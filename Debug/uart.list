
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065d0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08006770  08006770  00007770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd8  08006cd8  000081dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006cd8  08006cd8  00007cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ce0  08006ce0  000081dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ce0  08006ce0  00007ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ce4  08006ce4  00007ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08006ce8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001dc  08006ec4  000081dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08006ec4  0000839c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007839  00000000  00000000  0000820c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000158d  00000000  00000000  0000fa45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  00010fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000545  00000000  00000000  000116d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001645a  00000000  00000000  00011c15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008844  00000000  00000000  0002806f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087d74  00000000  00000000  000308b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8627  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d84  00000000  00000000  000b866c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000bb3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006758 	.word	0x08006758

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006758 	.word	0x08006758

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char* p, int len){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)p, len, 10);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	230a      	movs	r3, #10
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <_write+0x24>)
 8000f5e:	f001 fae3 	bl	8002528 <HAL_UART_Transmit>
	return len;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200001f8 	.word	0x200001f8

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f76:	f000 fb2f 	bl	80015d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7a:	f000 f8ff 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7e:	f000 f985 	bl	800128c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f82:	f000 f959 	bl	8001238 <MX_USART2_UART_Init>
//  	HAL_Delay(10);
  	static int comState = 0;
  	static int angleR = 0;
  	static int angleS = 120;
  	static int angleT = 240;
  	angleR++;
 8000f86:	4b74      	ldr	r3, [pc, #464]	@ (8001158 <main+0x1e8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	4a72      	ldr	r2, [pc, #456]	@ (8001158 <main+0x1e8>)
 8000f8e:	6013      	str	r3, [r2, #0]
  	angleS++;
 8000f90:	4b72      	ldr	r3, [pc, #456]	@ (800115c <main+0x1ec>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	4a71      	ldr	r2, [pc, #452]	@ (800115c <main+0x1ec>)
 8000f98:	6013      	str	r3, [r2, #0]
  	angleT++;
 8000f9a:	4b71      	ldr	r3, [pc, #452]	@ (8001160 <main+0x1f0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a6f      	ldr	r2, [pc, #444]	@ (8001160 <main+0x1f0>)
 8000fa2:	6013      	str	r3, [r2, #0]
  	angleR%=360;
 8000fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8001158 <main+0x1e8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a6e      	ldr	r2, [pc, #440]	@ (8001164 <main+0x1f4>)
 8000faa:	fb82 1203 	smull	r1, r2, r2, r3
 8000fae:	441a      	add	r2, r3
 8000fb0:	1211      	asrs	r1, r2, #8
 8000fb2:	17da      	asrs	r2, r3, #31
 8000fb4:	1a8a      	subs	r2, r1, r2
 8000fb6:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000fba:	fb01 f202 	mul.w	r2, r1, r2
 8000fbe:	1a9a      	subs	r2, r3, r2
 8000fc0:	4b65      	ldr	r3, [pc, #404]	@ (8001158 <main+0x1e8>)
 8000fc2:	601a      	str	r2, [r3, #0]
  	angleS%=360;
 8000fc4:	4b65      	ldr	r3, [pc, #404]	@ (800115c <main+0x1ec>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a66      	ldr	r2, [pc, #408]	@ (8001164 <main+0x1f4>)
 8000fca:	fb82 1203 	smull	r1, r2, r2, r3
 8000fce:	441a      	add	r2, r3
 8000fd0:	1211      	asrs	r1, r2, #8
 8000fd2:	17da      	asrs	r2, r3, #31
 8000fd4:	1a8a      	subs	r2, r1, r2
 8000fd6:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000fda:	fb01 f202 	mul.w	r2, r1, r2
 8000fde:	1a9a      	subs	r2, r3, r2
 8000fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800115c <main+0x1ec>)
 8000fe2:	601a      	str	r2, [r3, #0]
  	angleT%=360;
 8000fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8001160 <main+0x1f0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a5e      	ldr	r2, [pc, #376]	@ (8001164 <main+0x1f4>)
 8000fea:	fb82 1203 	smull	r1, r2, r2, r3
 8000fee:	441a      	add	r2, r3
 8000ff0:	1211      	asrs	r1, r2, #8
 8000ff2:	17da      	asrs	r2, r3, #31
 8000ff4:	1a8a      	subs	r2, r1, r2
 8000ff6:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8000ffa:	fb01 f202 	mul.w	r2, r1, r2
 8000ffe:	1a9a      	subs	r2, r3, r2
 8001000:	4b57      	ldr	r3, [pc, #348]	@ (8001160 <main+0x1f0>)
 8001002:	601a      	str	r2, [r3, #0]
  	float valueR = sin(angleR * M_PI / 180);
 8001004:	4b54      	ldr	r3, [pc, #336]	@ (8001158 <main+0x1e8>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa93 	bl	8000534 <__aeabi_i2d>
 800100e:	a350      	add	r3, pc, #320	@ (adr r3, 8001150 <main+0x1e0>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f7ff faf8 	bl	8000608 <__aeabi_dmul>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	4b50      	ldr	r3, [pc, #320]	@ (8001168 <main+0x1f8>)
 8001026:	f7ff fc19 	bl	800085c <__aeabi_ddiv>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	ec43 2b17 	vmov	d7, r2, r3
 8001032:	eeb0 0a47 	vmov.f32	s0, s14
 8001036:	eef0 0a67 	vmov.f32	s1, s15
 800103a:	f004 fb5d 	bl	80056f8 <sin>
 800103e:	ec53 2b10 	vmov	r2, r3, d0
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fdb7 	bl	8000bb8 <__aeabi_d2f>
 800104a:	4603      	mov	r3, r0
 800104c:	60fb      	str	r3, [r7, #12]
  	float valueS = sin(angleS * M_PI / 180);
 800104e:	4b43      	ldr	r3, [pc, #268]	@ (800115c <main+0x1ec>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fa6e 	bl	8000534 <__aeabi_i2d>
 8001058:	a33d      	add	r3, pc, #244	@ (adr r3, 8001150 <main+0x1e0>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	f7ff fad3 	bl	8000608 <__aeabi_dmul>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b3e      	ldr	r3, [pc, #248]	@ (8001168 <main+0x1f8>)
 8001070:	f7ff fbf4 	bl	800085c <__aeabi_ddiv>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	ec43 2b17 	vmov	d7, r2, r3
 800107c:	eeb0 0a47 	vmov.f32	s0, s14
 8001080:	eef0 0a67 	vmov.f32	s1, s15
 8001084:	f004 fb38 	bl	80056f8 <sin>
 8001088:	ec53 2b10 	vmov	r2, r3, d0
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fd92 	bl	8000bb8 <__aeabi_d2f>
 8001094:	4603      	mov	r3, r0
 8001096:	60bb      	str	r3, [r7, #8]
  	float valueT = sin(angleT * M_PI / 180);
 8001098:	4b31      	ldr	r3, [pc, #196]	@ (8001160 <main+0x1f0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa49 	bl	8000534 <__aeabi_i2d>
 80010a2:	a32b      	add	r3, pc, #172	@ (adr r3, 8001150 <main+0x1e0>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	f7ff faae 	bl	8000608 <__aeabi_dmul>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	4610      	mov	r0, r2
 80010b2:	4619      	mov	r1, r3
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001168 <main+0x1f8>)
 80010ba:	f7ff fbcf 	bl	800085c <__aeabi_ddiv>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	ec43 2b17 	vmov	d7, r2, r3
 80010c6:	eeb0 0a47 	vmov.f32	s0, s14
 80010ca:	eef0 0a67 	vmov.f32	s1, s15
 80010ce:	f004 fb13 	bl	80056f8 <sin>
 80010d2:	ec53 2b10 	vmov	r2, r3, d0
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f7ff fd6d 	bl	8000bb8 <__aeabi_d2f>
 80010de:	4603      	mov	r3, r0
 80010e0:	607b      	str	r3, [r7, #4]

  	if(comState){
 80010e2:	4b22      	ldr	r3, [pc, #136]	@ (800116c <main+0x1fc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d017      	beq.n	800111a <main+0x1aa>
  		printf("%f\t",valueR);
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f7ff fa34 	bl	8000558 <__aeabi_f2d>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	481e      	ldr	r0, [pc, #120]	@ (8001170 <main+0x200>)
 80010f6:	f002 fb83 	bl	8003800 <iprintf>
			printf("%f\t",valueS);
 80010fa:	68b8      	ldr	r0, [r7, #8]
 80010fc:	f7ff fa2c 	bl	8000558 <__aeabi_f2d>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	481a      	ldr	r0, [pc, #104]	@ (8001170 <main+0x200>)
 8001106:	f002 fb7b 	bl	8003800 <iprintf>
			printf("%f\n",valueT);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fa24 	bl	8000558 <__aeabi_f2d>
 8001110:	4602      	mov	r2, r0
 8001112:	460b      	mov	r3, r1
 8001114:	4817      	ldr	r0, [pc, #92]	@ (8001174 <main+0x204>)
 8001116:	f002 fb73 	bl	8003800 <iprintf>
  	}

  	char ch;
  	HAL_StatusTypeDef ret;
  	ret = HAL_UART_Receive(&huart2, &ch, 1, 1);
 800111a:	1cb9      	adds	r1, r7, #2
 800111c:	2301      	movs	r3, #1
 800111e:	2201      	movs	r2, #1
 8001120:	4815      	ldr	r0, [pc, #84]	@ (8001178 <main+0x208>)
 8001122:	f001 fa8c 	bl	800263e <HAL_UART_Receive>
 8001126:	4603      	mov	r3, r0
 8001128:	70fb      	strb	r3, [r7, #3]
  	if(ch == '1') comState = 1;
 800112a:	78bb      	ldrb	r3, [r7, #2]
 800112c:	2b31      	cmp	r3, #49	@ 0x31
 800112e:	d102      	bne.n	8001136 <main+0x1c6>
 8001130:	4b0e      	ldr	r3, [pc, #56]	@ (800116c <main+0x1fc>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
  	if(ch == '0') comState = 0;
 8001136:	78bb      	ldrb	r3, [r7, #2]
 8001138:	2b30      	cmp	r3, #48	@ 0x30
 800113a:	d102      	bne.n	8001142 <main+0x1d2>
 800113c:	4b0b      	ldr	r3, [pc, #44]	@ (800116c <main+0x1fc>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
  	HAL_Delay(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f000 faba 	bl	80016bc <HAL_Delay>
  {
 8001148:	e71d      	b.n	8000f86 <main+0x16>
 800114a:	bf00      	nop
 800114c:	f3af 8000 	nop.w
 8001150:	54442d18 	.word	0x54442d18
 8001154:	400921fb 	.word	0x400921fb
 8001158:	20000240 	.word	0x20000240
 800115c:	20000000 	.word	0x20000000
 8001160:	20000004 	.word	0x20000004
 8001164:	b60b60b7 	.word	0xb60b60b7
 8001168:	40668000 	.word	0x40668000
 800116c:	20000244 	.word	0x20000244
 8001170:	08006770 	.word	0x08006770
 8001174:	08006774 	.word	0x08006774
 8001178:	200001f8 	.word	0x200001f8

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b094      	sub	sp, #80	@ 0x50
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	2230      	movs	r2, #48	@ 0x30
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f002 fb8d 	bl	80038aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a0:	2300      	movs	r3, #0
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <SystemClock_Config+0xb4>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a8:	4a21      	ldr	r2, [pc, #132]	@ (8001230 <SystemClock_Config+0xb4>)
 80011aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <SystemClock_Config+0xb4>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <SystemClock_Config+0xb8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001234 <SystemClock_Config+0xb8>)
 80011c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <SystemClock_Config+0xb8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d8:	2302      	movs	r3, #2
 80011da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011dc:	2301      	movs	r3, #1
 80011de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e0:	2310      	movs	r3, #16
 80011e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 0320 	add.w	r3, r7, #32
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fcf3 	bl	8001bd8 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80011f8:	f000 f862 	bl	80012c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f000 ff56 	bl	80020c8 <HAL_RCC_ClockConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001222:	f000 f84d 	bl	80012c0 <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3750      	adds	r7, #80	@ 0x50
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <MX_USART2_UART_Init+0x50>)
 8001240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001250:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800125c:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 800125e:	220c      	movs	r2, #12
 8001260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001262:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001268:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_USART2_UART_Init+0x4c>)
 8001270:	f001 f90a 	bl	8002488 <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800127a:	f000 f821 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200001f8 	.word	0x200001f8
 8001288:	40004400 	.word	0x40004400

0800128c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_GPIO_Init+0x30>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a08      	ldr	r2, [pc, #32]	@ (80012bc <MX_GPIO_Init+0x30>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_GPIO_Init+0x30>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <Error_Handler+0x8>

080012cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	4a0f      	ldr	r2, [pc, #60]	@ (8001318 <HAL_MspInit+0x4c>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <HAL_MspInit+0x4c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	4a08      	ldr	r2, [pc, #32]	@ (8001318 <HAL_MspInit+0x4c>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_MspInit+0x4c>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <HAL_UART_MspInit+0x84>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d12b      	bne.n	8001396 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134c:	6413      	str	r3, [r2, #64]	@ 0x40
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a10      	ldr	r2, [pc, #64]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001376:	230c      	movs	r3, #12
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001382:	2303      	movs	r3, #3
 8001384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001386:	2307      	movs	r3, #7
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <HAL_UART_MspInit+0x8c>)
 8001392:	f000 fa9d 	bl	80018d0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	@ 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40004400 	.word	0x40004400
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <NMI_Handler+0x4>

080013b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <MemManage_Handler+0x4>

080013c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001402:	f000 f93b 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}

0800140a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  return 1;
 800140e:	2301      	movs	r3, #1
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_kill>:

int _kill(int pid, int sig)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001424:	f002 fa94 	bl	8003950 <__errno>
 8001428:	4603      	mov	r3, r0
 800142a:	2216      	movs	r2, #22
 800142c:	601a      	str	r2, [r3, #0]
  return -1;
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_exit>:

void _exit (int status)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001442:	f04f 31ff 	mov.w	r1, #4294967295
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffe7 	bl	800141a <_kill>
  while (1) {}    /* Make sure we hang here */
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <_exit+0x12>

08001450 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	e00a      	b.n	8001478 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001462:	f3af 8000 	nop.w
 8001466:	4601      	mov	r1, r0
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	b2ca      	uxtb	r2, r1
 8001470:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697a      	ldr	r2, [r7, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	429a      	cmp	r2, r3
 800147e:	dbf0      	blt.n	8001462 <_read+0x12>
  }

  return len;
 8001480:	687b      	ldr	r3, [r7, #4]
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_close>:
  }
  return len;
}

int _close(int file)
{
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001496:	4618      	mov	r0, r3
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b083      	sub	sp, #12
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014b2:	605a      	str	r2, [r3, #4]
  return 0;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <_isatty>:

int _isatty(int file)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	@ (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	@ (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001524:	f002 fa14 	bl	8003950 <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	220c      	movs	r2, #12
 800152c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295
 8001532:	e009      	b.n	8001548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153a:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <_sbrk+0x64>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20020000 	.word	0x20020000
 8001554:	00000400 	.word	0x00000400
 8001558:	20000248 	.word	0x20000248
 800155c:	200003a0 	.word	0x200003a0

08001560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <SystemInit+0x20>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <SystemInit+0x20>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001584:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001588:	f7ff ffea 	bl	8001560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158e:	490d      	ldr	r1, [pc, #52]	@ (80015c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a4:	4c0a      	ldr	r4, [pc, #40]	@ (80015d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015b2:	f002 f9d3 	bl	800395c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff fcdb 	bl	8000f70 <main>
  bx  lr    
 80015ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80015c8:	08006ce8 	.word	0x08006ce8
  ldr r2, =_sbss
 80015cc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80015d0:	2000039c 	.word	0x2000039c

080015d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC_IRQHandler>
	...

080015d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001618 <HAL_Init+0x40>)
 80015e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <HAL_Init+0x40>)
 80015ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a07      	ldr	r2, [pc, #28]	@ (8001618 <HAL_Init+0x40>)
 80015fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001600:	2003      	movs	r0, #3
 8001602:	f000 f931 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001606:	200f      	movs	r0, #15
 8001608:	f000 f808 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800160c:	f7ff fe5e 	bl	80012cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023c00 	.word	0x40023c00

0800161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <HAL_InitTick+0x54>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_InitTick+0x58>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f93b 	bl	80018b6 <HAL_SYSTICK_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e00e      	b.n	8001668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d80a      	bhi.n	8001666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001650:	2200      	movs	r2, #0
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f000 f911 	bl	800187e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165c:	4a06      	ldr	r2, [pc, #24]	@ (8001678 <HAL_InitTick+0x5c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000008 	.word	0x20000008
 8001674:	20000010 	.word	0x20000010
 8001678:	2000000c 	.word	0x2000000c

0800167c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <HAL_IncTick+0x20>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <HAL_IncTick+0x24>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <HAL_IncTick+0x24>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000010 	.word	0x20000010
 80016a0:	2000024c 	.word	0x2000024c

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b03      	ldr	r3, [pc, #12]	@ (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	2000024c 	.word	0x2000024c

080016bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff ffee 	bl	80016a4 <HAL_GetTick>
 80016c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d005      	beq.n	80016e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <HAL_Delay+0x44>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016e2:	bf00      	nop
 80016e4:	f7ff ffde 	bl	80016a4 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d8f7      	bhi.n	80016e4 <HAL_Delay+0x28>
  {
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000010 	.word	0x20000010

08001704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001720:	4013      	ands	r3, r2
 8001722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800172c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001736:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <__NVIC_SetPriorityGrouping+0x44>)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	60d3      	str	r3, [r2, #12]
}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001750:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <__NVIC_GetPriorityGrouping+0x18>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	f003 0307 	and.w	r3, r3, #7
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	@ (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	@ (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	@ 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	@ 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001834:	d301      	bcc.n	800183a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2301      	movs	r3, #1
 8001838:	e00f      	b.n	800185a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183a:	4a0a      	ldr	r2, [pc, #40]	@ (8001864 <SysTick_Config+0x40>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001842:	210f      	movs	r1, #15
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f7ff ff8e 	bl	8001768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <SysTick_Config+0x40>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <SysTick_Config+0x40>)
 8001854:	2207      	movs	r2, #7
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff47 	bl	8001704 <__NVIC_SetPriorityGrouping>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001890:	f7ff ff5c 	bl	800174c <__NVIC_GetPriorityGrouping>
 8001894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	6978      	ldr	r0, [r7, #20]
 800189c:	f7ff ff8e 	bl	80017bc <NVIC_EncodePriority>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff5d 	bl	8001768 <__NVIC_SetPriority>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffb0 	bl	8001824 <SysTick_Config>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	@ 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e159      	b.n	8001ba0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	429a      	cmp	r2, r3
 8001906:	f040 8148 	bne.w	8001b9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d005      	beq.n	8001922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191e:	2b02      	cmp	r3, #2
 8001920:	d130      	bne.n	8001984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001958:	2201      	movs	r2, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 0201 	and.w	r2, r3, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b03      	cmp	r3, #3
 800198e:	d017      	beq.n	80019c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d123      	bne.n	8001a14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	08da      	lsrs	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3208      	adds	r2, #8
 80019d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	08da      	lsrs	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3208      	adds	r2, #8
 8001a0e:	69b9      	ldr	r1, [r7, #24]
 8001a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0203 	and.w	r2, r3, #3
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80a2 	beq.w	8001b9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b57      	ldr	r3, [pc, #348]	@ (8001bb8 <HAL_GPIO_Init+0x2e8>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a5e:	4a56      	ldr	r2, [pc, #344]	@ (8001bb8 <HAL_GPIO_Init+0x2e8>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a66:	4b54      	ldr	r3, [pc, #336]	@ (8001bb8 <HAL_GPIO_Init+0x2e8>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a72:	4a52      	ldr	r2, [pc, #328]	@ (8001bbc <HAL_GPIO_Init+0x2ec>)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	220f      	movs	r2, #15
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a49      	ldr	r2, [pc, #292]	@ (8001bc0 <HAL_GPIO_Init+0x2f0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d019      	beq.n	8001ad2 <HAL_GPIO_Init+0x202>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a48      	ldr	r2, [pc, #288]	@ (8001bc4 <HAL_GPIO_Init+0x2f4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0x1fe>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a47      	ldr	r2, [pc, #284]	@ (8001bc8 <HAL_GPIO_Init+0x2f8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00d      	beq.n	8001aca <HAL_GPIO_Init+0x1fa>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a46      	ldr	r2, [pc, #280]	@ (8001bcc <HAL_GPIO_Init+0x2fc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x1f6>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a45      	ldr	r2, [pc, #276]	@ (8001bd0 <HAL_GPIO_Init+0x300>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_GPIO_Init+0x1f2>
 8001abe:	2304      	movs	r3, #4
 8001ac0:	e008      	b.n	8001ad4 <HAL_GPIO_Init+0x204>
 8001ac2:	2307      	movs	r3, #7
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x204>
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e004      	b.n	8001ad4 <HAL_GPIO_Init+0x204>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e002      	b.n	8001ad4 <HAL_GPIO_Init+0x204>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_GPIO_Init+0x204>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	f002 0203 	and.w	r2, r2, #3
 8001ada:	0092      	lsls	r2, r2, #2
 8001adc:	4093      	lsls	r3, r2
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae4:	4935      	ldr	r1, [pc, #212]	@ (8001bbc <HAL_GPIO_Init+0x2ec>)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af2:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <HAL_GPIO_Init+0x304>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b16:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b40:	4a24      	ldr	r2, [pc, #144]	@ (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b46:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6a:	4a1a      	ldr	r2, [pc, #104]	@ (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b70:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b94:	4a0f      	ldr	r2, [pc, #60]	@ (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b0f      	cmp	r3, #15
 8001ba4:	f67f aea2 	bls.w	80018ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3724      	adds	r7, #36	@ 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	40020800 	.word	0x40020800
 8001bcc:	40020c00 	.word	0x40020c00
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40013c00 	.word	0x40013c00

08001bd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e267      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d075      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bf6:	4b88      	ldr	r3, [pc, #544]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d00c      	beq.n	8001c1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c02:	4b85      	ldr	r3, [pc, #532]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d112      	bne.n	8001c34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0e:	4b82      	ldr	r3, [pc, #520]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c1a:	d10b      	bne.n	8001c34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d05b      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x108>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d157      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e242      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c3c:	d106      	bne.n	8001c4c <HAL_RCC_OscConfig+0x74>
 8001c3e:	4b76      	ldr	r3, [pc, #472]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a75      	ldr	r2, [pc, #468]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001c44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e01d      	b.n	8001c88 <HAL_RCC_OscConfig+0xb0>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x98>
 8001c56:	4b70      	ldr	r3, [pc, #448]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a6f      	ldr	r2, [pc, #444]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b6d      	ldr	r3, [pc, #436]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6c      	ldr	r2, [pc, #432]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0xb0>
 8001c70:	4b69      	ldr	r3, [pc, #420]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a68      	ldr	r2, [pc, #416]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b66      	ldr	r3, [pc, #408]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a65      	ldr	r2, [pc, #404]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d013      	beq.n	8001cb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fd08 	bl	80016a4 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fd04 	bl	80016a4 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	@ 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e207      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b5b      	ldr	r3, [pc, #364]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0xc0>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fcf4 	bl	80016a4 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fcf0 	bl	80016a4 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	@ 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1f3      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	4b51      	ldr	r3, [pc, #324]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0xe8>
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d063      	beq.n	8001db6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cee:	4b4a      	ldr	r3, [pc, #296]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfa:	4b47      	ldr	r3, [pc, #284]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d11c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d06:	4b44      	ldr	r3, [pc, #272]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d116      	bne.n	8001d40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d12:	4b41      	ldr	r3, [pc, #260]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCC_OscConfig+0x152>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e1c7      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4937      	ldr	r1, [pc, #220]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	e03a      	b.n	8001db6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d48:	4b34      	ldr	r3, [pc, #208]	@ (8001e1c <HAL_RCC_OscConfig+0x244>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fca9 	bl	80016a4 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d56:	f7ff fca5 	bl	80016a4 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e1a8      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d68:	4b2b      	ldr	r3, [pc, #172]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d74:	4b28      	ldr	r3, [pc, #160]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4925      	ldr	r1, [pc, #148]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	e015      	b.n	8001db6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8a:	4b24      	ldr	r3, [pc, #144]	@ (8001e1c <HAL_RCC_OscConfig+0x244>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff fc88 	bl	80016a4 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d98:	f7ff fc84 	bl	80016a4 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e187      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	4b1b      	ldr	r3, [pc, #108]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d036      	beq.n	8001e30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d016      	beq.n	8001df8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dca:	4b15      	ldr	r3, [pc, #84]	@ (8001e20 <HAL_RCC_OscConfig+0x248>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fc68 	bl	80016a4 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd8:	f7ff fc64 	bl	80016a4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e167      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dea:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <HAL_RCC_OscConfig+0x240>)
 8001dec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x200>
 8001df6:	e01b      	b.n	8001e30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001df8:	4b09      	ldr	r3, [pc, #36]	@ (8001e20 <HAL_RCC_OscConfig+0x248>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfe:	f7ff fc51 	bl	80016a4 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e04:	e00e      	b.n	8001e24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e06:	f7ff fc4d 	bl	80016a4 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d907      	bls.n	8001e24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e150      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	42470000 	.word	0x42470000
 8001e20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e24:	4b88      	ldr	r3, [pc, #544]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001e26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ea      	bne.n	8001e06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 8097 	beq.w	8001f6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e42:	4b81      	ldr	r3, [pc, #516]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10f      	bne.n	8001e6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	4b7d      	ldr	r3, [pc, #500]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	4a7c      	ldr	r2, [pc, #496]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5e:	4b7a      	ldr	r3, [pc, #488]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6e:	4b77      	ldr	r3, [pc, #476]	@ (800204c <HAL_RCC_OscConfig+0x474>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d118      	bne.n	8001eac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e7a:	4b74      	ldr	r3, [pc, #464]	@ (800204c <HAL_RCC_OscConfig+0x474>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a73      	ldr	r2, [pc, #460]	@ (800204c <HAL_RCC_OscConfig+0x474>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e86:	f7ff fc0d 	bl	80016a4 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8e:	f7ff fc09 	bl	80016a4 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e10c      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	@ (800204c <HAL_RCC_OscConfig+0x474>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d106      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x2ea>
 8001eb4:	4b64      	ldr	r3, [pc, #400]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb8:	4a63      	ldr	r2, [pc, #396]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ec0:	e01c      	b.n	8001efc <HAL_RCC_OscConfig+0x324>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b05      	cmp	r3, #5
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x30c>
 8001eca:	4b5f      	ldr	r3, [pc, #380]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ece:	4a5e      	ldr	r2, [pc, #376]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed6:	4b5c      	ldr	r3, [pc, #368]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eda:	4a5b      	ldr	r2, [pc, #364]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0x324>
 8001ee4:	4b58      	ldr	r3, [pc, #352]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee8:	4a57      	ldr	r2, [pc, #348]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001eea:	f023 0301 	bic.w	r3, r3, #1
 8001eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef0:	4b55      	ldr	r3, [pc, #340]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef4:	4a54      	ldr	r2, [pc, #336]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001ef6:	f023 0304 	bic.w	r3, r3, #4
 8001efa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d015      	beq.n	8001f30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f04:	f7ff fbce 	bl	80016a4 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fbca 	bl	80016a4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e0cb      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f22:	4b49      	ldr	r3, [pc, #292]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0ee      	beq.n	8001f0c <HAL_RCC_OscConfig+0x334>
 8001f2e:	e014      	b.n	8001f5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f30:	f7ff fbb8 	bl	80016a4 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f36:	e00a      	b.n	8001f4e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f38:	f7ff fbb4 	bl	80016a4 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e0b5      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1ee      	bne.n	8001f38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f5a:	7dfb      	ldrb	r3, [r7, #23]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d105      	bne.n	8001f6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f60:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	4a38      	ldr	r2, [pc, #224]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80a1 	beq.w	80020b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f76:	4b34      	ldr	r3, [pc, #208]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d05c      	beq.n	800203c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d141      	bne.n	800200e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	4b31      	ldr	r3, [pc, #196]	@ (8002050 <HAL_RCC_OscConfig+0x478>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f90:	f7ff fb88 	bl	80016a4 <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f98:	f7ff fb84 	bl	80016a4 <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e087      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001faa:	4b27      	ldr	r3, [pc, #156]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69da      	ldr	r2, [r3, #28]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc4:	019b      	lsls	r3, r3, #6
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	041b      	lsls	r3, r3, #16
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd8:	061b      	lsls	r3, r3, #24
 8001fda:	491b      	ldr	r1, [pc, #108]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8002050 <HAL_RCC_OscConfig+0x478>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7ff fb5d 	bl	80016a4 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fee:	f7ff fb59 	bl	80016a4 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e05c      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002000:	4b11      	ldr	r3, [pc, #68]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x416>
 800200c:	e054      	b.n	80020b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <HAL_RCC_OscConfig+0x478>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002014:	f7ff fb46 	bl	80016a4 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201c:	f7ff fb42 	bl	80016a4 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e045      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202e:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <HAL_RCC_OscConfig+0x470>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1f0      	bne.n	800201c <HAL_RCC_OscConfig+0x444>
 800203a:	e03d      	b.n	80020b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d107      	bne.n	8002054 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e038      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
 8002048:	40023800 	.word	0x40023800
 800204c:	40007000 	.word	0x40007000
 8002050:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002054:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <HAL_RCC_OscConfig+0x4ec>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d028      	beq.n	80020b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800206c:	429a      	cmp	r2, r3
 800206e:	d121      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d11a      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002084:	4013      	ands	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800208a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800208c:	4293      	cmp	r3, r2
 800208e:	d111      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209a:	085b      	lsrs	r3, r3, #1
 800209c:	3b01      	subs	r3, #1
 800209e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d107      	bne.n	80020b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e000      	b.n	80020ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800

080020c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0cc      	b.n	8002276 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020dc:	4b68      	ldr	r3, [pc, #416]	@ (8002280 <HAL_RCC_ClockConfig+0x1b8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d90c      	bls.n	8002104 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b65      	ldr	r3, [pc, #404]	@ (8002280 <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b63      	ldr	r3, [pc, #396]	@ (8002280 <HAL_RCC_ClockConfig+0x1b8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0307 	and.w	r3, r3, #7
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0b8      	b.n	8002276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d020      	beq.n	8002152 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800211c:	4b59      	ldr	r3, [pc, #356]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	4a58      	ldr	r2, [pc, #352]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002126:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002134:	4b53      	ldr	r3, [pc, #332]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	4a52      	ldr	r2, [pc, #328]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800213e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002140:	4b50      	ldr	r3, [pc, #320]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	494d      	ldr	r1, [pc, #308]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	4313      	orrs	r3, r2
 8002150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d044      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002166:	4b47      	ldr	r3, [pc, #284]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d119      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e07f      	b.n	8002276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b02      	cmp	r3, #2
 800217c:	d003      	beq.n	8002186 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002182:	2b03      	cmp	r3, #3
 8002184:	d107      	bne.n	8002196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002186:	4b3f      	ldr	r3, [pc, #252]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e06f      	b.n	8002276 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002196:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e067      	b.n	8002276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a6:	4b37      	ldr	r3, [pc, #220]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f023 0203 	bic.w	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4934      	ldr	r1, [pc, #208]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b8:	f7ff fa74 	bl	80016a4 <HAL_GetTick>
 80021bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c0:	f7ff fa70 	bl	80016a4 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e04f      	b.n	8002276 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 020c 	and.w	r2, r3, #12
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d1eb      	bne.n	80021c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e8:	4b25      	ldr	r3, [pc, #148]	@ (8002280 <HAL_RCC_ClockConfig+0x1b8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d20c      	bcs.n	8002210 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b22      	ldr	r3, [pc, #136]	@ (8002280 <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b20      	ldr	r3, [pc, #128]	@ (8002280 <HAL_RCC_ClockConfig+0x1b8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e032      	b.n	8002276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d008      	beq.n	800222e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800221c:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4916      	ldr	r1, [pc, #88]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d009      	beq.n	800224e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800223a:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	490e      	ldr	r1, [pc, #56]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800224e:	f000 f821 	bl	8002294 <HAL_RCC_GetSysClockFreq>
 8002252:	4602      	mov	r2, r0
 8002254:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	490a      	ldr	r1, [pc, #40]	@ (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	5ccb      	ldrb	r3, [r1, r3]
 8002262:	fa22 f303 	lsr.w	r3, r2, r3
 8002266:	4a09      	ldr	r2, [pc, #36]	@ (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <HAL_RCC_ClockConfig+0x1c8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff f9d4 	bl	800161c <HAL_InitTick>

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40023c00 	.word	0x40023c00
 8002284:	40023800 	.word	0x40023800
 8002288:	08006778 	.word	0x08006778
 800228c:	20000008 	.word	0x20000008
 8002290:	2000000c 	.word	0x2000000c

08002294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002298:	b090      	sub	sp, #64	@ 0x40
 800229a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ac:	4b59      	ldr	r3, [pc, #356]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d00d      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x40>
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	f200 80a1 	bhi.w	8002400 <HAL_RCC_GetSysClockFreq+0x16c>
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x34>
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d003      	beq.n	80022ce <HAL_RCC_GetSysClockFreq+0x3a>
 80022c6:	e09b      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022c8:	4b53      	ldr	r3, [pc, #332]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x184>)
 80022ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022cc:	e09b      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ce:	4b53      	ldr	r3, [pc, #332]	@ (800241c <HAL_RCC_GetSysClockFreq+0x188>)
 80022d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022d2:	e098      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022de:	4b4d      	ldr	r3, [pc, #308]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x180>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d028      	beq.n	800233c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x180>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	099b      	lsrs	r3, r3, #6
 80022f0:	2200      	movs	r2, #0
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80022fc:	2100      	movs	r1, #0
 80022fe:	4b47      	ldr	r3, [pc, #284]	@ (800241c <HAL_RCC_GetSysClockFreq+0x188>)
 8002300:	fb03 f201 	mul.w	r2, r3, r1
 8002304:	2300      	movs	r3, #0
 8002306:	fb00 f303 	mul.w	r3, r0, r3
 800230a:	4413      	add	r3, r2
 800230c:	4a43      	ldr	r2, [pc, #268]	@ (800241c <HAL_RCC_GetSysClockFreq+0x188>)
 800230e:	fba0 1202 	umull	r1, r2, r0, r2
 8002312:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002314:	460a      	mov	r2, r1
 8002316:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800231a:	4413      	add	r3, r2
 800231c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800231e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002320:	2200      	movs	r2, #0
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	61fa      	str	r2, [r7, #28]
 8002326:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800232a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800232e:	f7fe fc93 	bl	8000c58 <__aeabi_uldivmod>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4613      	mov	r3, r2
 8002338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800233a:	e053      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800233c:	4b35      	ldr	r3, [pc, #212]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x180>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	099b      	lsrs	r3, r3, #6
 8002342:	2200      	movs	r2, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	617a      	str	r2, [r7, #20]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800234e:	f04f 0b00 	mov.w	fp, #0
 8002352:	4652      	mov	r2, sl
 8002354:	465b      	mov	r3, fp
 8002356:	f04f 0000 	mov.w	r0, #0
 800235a:	f04f 0100 	mov.w	r1, #0
 800235e:	0159      	lsls	r1, r3, #5
 8002360:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002364:	0150      	lsls	r0, r2, #5
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	ebb2 080a 	subs.w	r8, r2, sl
 800236e:	eb63 090b 	sbc.w	r9, r3, fp
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800237e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002382:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002386:	ebb2 0408 	subs.w	r4, r2, r8
 800238a:	eb63 0509 	sbc.w	r5, r3, r9
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	00eb      	lsls	r3, r5, #3
 8002398:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800239c:	00e2      	lsls	r2, r4, #3
 800239e:	4614      	mov	r4, r2
 80023a0:	461d      	mov	r5, r3
 80023a2:	eb14 030a 	adds.w	r3, r4, sl
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	eb45 030b 	adc.w	r3, r5, fp
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ba:	4629      	mov	r1, r5
 80023bc:	028b      	lsls	r3, r1, #10
 80023be:	4621      	mov	r1, r4
 80023c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c4:	4621      	mov	r1, r4
 80023c6:	028a      	lsls	r2, r1, #10
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023ce:	2200      	movs	r2, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	60fa      	str	r2, [r7, #12]
 80023d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023d8:	f7fe fc3e 	bl	8000c58 <__aeabi_uldivmod>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4613      	mov	r3, r2
 80023e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_RCC_GetSysClockFreq+0x180>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	3301      	adds	r3, #1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80023f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80023f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80023fe:	e002      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x184>)
 8002402:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002408:	4618      	mov	r0, r3
 800240a:	3740      	adds	r7, #64	@ 0x40
 800240c:	46bd      	mov	sp, r7
 800240e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	00f42400 	.word	0x00f42400
 800241c:	017d7840 	.word	0x017d7840

08002420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <HAL_RCC_GetHCLKFreq+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000008 	.word	0x20000008

08002438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800243c:	f7ff fff0 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	0a9b      	lsrs	r3, r3, #10
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	4903      	ldr	r1, [pc, #12]	@ (800245c <HAL_RCC_GetPCLK1Freq+0x24>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	08006788 	.word	0x08006788

08002460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002464:	f7ff ffdc 	bl	8002420 <HAL_RCC_GetHCLKFreq>
 8002468:	4602      	mov	r2, r0
 800246a:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	0b5b      	lsrs	r3, r3, #13
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	4903      	ldr	r1, [pc, #12]	@ (8002484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002476:	5ccb      	ldrb	r3, [r1, r3]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	08006788 	.word	0x08006788

08002488 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e042      	b.n	8002520 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe ff34 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	@ 0x24
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fa09 	bl	80028e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695a      	ldr	r2, [r3, #20]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002500:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	@ 0x28
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b20      	cmp	r3, #32
 8002546:	d175      	bne.n	8002634 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <HAL_UART_Transmit+0x2c>
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e06e      	b.n	8002636 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2221      	movs	r2, #33	@ 0x21
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002566:	f7ff f89d 	bl	80016a4 <HAL_GetTick>
 800256a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	88fa      	ldrh	r2, [r7, #6]
 8002570:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	88fa      	ldrh	r2, [r7, #6]
 8002576:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002580:	d108      	bne.n	8002594 <HAL_UART_Transmit+0x6c>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d104      	bne.n	8002594 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	e003      	b.n	800259c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800259c:	e02e      	b.n	80025fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	2200      	movs	r2, #0
 80025a6:	2180      	movs	r1, #128	@ 0x80
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f8df 	bl	800276c <UART_WaitOnFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2220      	movs	r2, #32
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e03a      	b.n	8002636 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10b      	bne.n	80025de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3302      	adds	r3, #2
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	e007      	b.n	80025ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	3301      	adds	r3, #1
 80025ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1cb      	bne.n	800259e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	2200      	movs	r2, #0
 800260e:	2140      	movs	r1, #64	@ 0x40
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f8ab 	bl	800276c <UART_WaitOnFlagUntilTimeout>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e006      	b.n	8002636 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	e000      	b.n	8002636 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002634:	2302      	movs	r3, #2
  }
}
 8002636:	4618      	mov	r0, r3
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b08a      	sub	sp, #40	@ 0x28
 8002642:	af02      	add	r7, sp, #8
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	603b      	str	r3, [r7, #0]
 800264a:	4613      	mov	r3, r2
 800264c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	f040 8081 	bne.w	8002762 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d002      	beq.n	800266c <HAL_UART_Receive+0x2e>
 8002666:	88fb      	ldrh	r3, [r7, #6]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e079      	b.n	8002764 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2222      	movs	r2, #34	@ 0x22
 800267a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002684:	f7ff f80e 	bl	80016a4 <HAL_GetTick>
 8002688:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	88fa      	ldrh	r2, [r7, #6]
 800268e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	88fa      	ldrh	r2, [r7, #6]
 8002694:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800269e:	d108      	bne.n	80026b2 <HAL_UART_Receive+0x74>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d104      	bne.n	80026b2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	61bb      	str	r3, [r7, #24]
 80026b0:	e003      	b.n	80026ba <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80026ba:	e047      	b.n	800274c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2200      	movs	r2, #0
 80026c4:	2120      	movs	r1, #32
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f850 	bl	800276c <UART_WaitOnFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d005      	beq.n	80026de <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e042      	b.n	8002764 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10c      	bne.n	80026fe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	3302      	adds	r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
 80026fc:	e01f      	b.n	800273e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002706:	d007      	beq.n	8002718 <HAL_UART_Receive+0xda>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10a      	bne.n	8002726 <HAL_UART_Receive+0xe8>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d106      	bne.n	8002726 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e008      	b.n	8002738 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002732:	b2da      	uxtb	r2, r3
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	3301      	adds	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1b2      	bne.n	80026bc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e000      	b.n	8002764 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002762:	2302      	movs	r3, #2
  }
}
 8002764:	4618      	mov	r0, r3
 8002766:	3720      	adds	r7, #32
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}

0800276c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	4613      	mov	r3, r2
 800277a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800277c:	e03b      	b.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d037      	beq.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002786:	f7fe ff8d 	bl	80016a4 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	6a3a      	ldr	r2, [r7, #32]
 8002792:	429a      	cmp	r2, r3
 8002794:	d302      	bcc.n	800279c <UART_WaitOnFlagUntilTimeout+0x30>
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e03a      	b.n	8002816 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d023      	beq.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b80      	cmp	r3, #128	@ 0x80
 80027b2:	d020      	beq.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b40      	cmp	r3, #64	@ 0x40
 80027b8:	d01d      	beq.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d116      	bne.n	80027f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027de:	68f8      	ldr	r0, [r7, #12]
 80027e0:	f000 f81d 	bl	800281e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2208      	movs	r2, #8
 80027e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00f      	b.n	8002816 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	4013      	ands	r3, r2
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	429a      	cmp	r2, r3
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	429a      	cmp	r2, r3
 8002812:	d0b4      	beq.n	800277e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800281e:	b480      	push	{r7}
 8002820:	b095      	sub	sp, #84	@ 0x54
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	330c      	adds	r3, #12
 800282c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002830:	e853 3f00 	ldrex	r3, [r3]
 8002834:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002838:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800283c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	330c      	adds	r3, #12
 8002844:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002846:	643a      	str	r2, [r7, #64]	@ 0x40
 8002848:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800284c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800284e:	e841 2300 	strex	r3, r2, [r1]
 8002852:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1e5      	bne.n	8002826 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3314      	adds	r3, #20
 8002860:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	e853 3f00 	ldrex	r3, [r3]
 8002868:	61fb      	str	r3, [r7, #28]
   return(result);
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f023 0301 	bic.w	r3, r3, #1
 8002870:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3314      	adds	r3, #20
 8002878:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800287a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002882:	e841 2300 	strex	r3, r2, [r1]
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1e5      	bne.n	800285a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	2b01      	cmp	r3, #1
 8002894:	d119      	bne.n	80028ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	330c      	adds	r3, #12
 800289c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	e853 3f00 	ldrex	r3, [r3]
 80028a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	f023 0310 	bic.w	r3, r3, #16
 80028ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	330c      	adds	r3, #12
 80028b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028b6:	61ba      	str	r2, [r7, #24]
 80028b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ba:	6979      	ldr	r1, [r7, #20]
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	e841 2300 	strex	r3, r2, [r1]
 80028c2:	613b      	str	r3, [r7, #16]
   return(result);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1e5      	bne.n	8002896 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028d8:	bf00      	nop
 80028da:	3754      	adds	r7, #84	@ 0x54
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e8:	b0c0      	sub	sp, #256	@ 0x100
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002900:	68d9      	ldr	r1, [r3, #12]
 8002902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	ea40 0301 	orr.w	r3, r0, r1
 800290c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800290e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	431a      	orrs	r2, r3
 800291c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	431a      	orrs	r2, r3
 8002924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800293c:	f021 010c 	bic.w	r1, r1, #12
 8002940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800294a:	430b      	orrs	r3, r1
 800294c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800294e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800295a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295e:	6999      	ldr	r1, [r3, #24]
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	ea40 0301 	orr.w	r3, r0, r1
 800296a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b8f      	ldr	r3, [pc, #572]	@ (8002bb0 <UART_SetConfig+0x2cc>)
 8002974:	429a      	cmp	r2, r3
 8002976:	d005      	beq.n	8002984 <UART_SetConfig+0xa0>
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb4 <UART_SetConfig+0x2d0>)
 8002980:	429a      	cmp	r2, r3
 8002982:	d104      	bne.n	800298e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002984:	f7ff fd6c 	bl	8002460 <HAL_RCC_GetPCLK2Freq>
 8002988:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800298c:	e003      	b.n	8002996 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800298e:	f7ff fd53 	bl	8002438 <HAL_RCC_GetPCLK1Freq>
 8002992:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029a0:	f040 810c 	bne.w	8002bbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029a8:	2200      	movs	r2, #0
 80029aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029ae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80029b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80029b6:	4622      	mov	r2, r4
 80029b8:	462b      	mov	r3, r5
 80029ba:	1891      	adds	r1, r2, r2
 80029bc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029be:	415b      	adcs	r3, r3
 80029c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80029c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029c6:	4621      	mov	r1, r4
 80029c8:	eb12 0801 	adds.w	r8, r2, r1
 80029cc:	4629      	mov	r1, r5
 80029ce:	eb43 0901 	adc.w	r9, r3, r1
 80029d2:	f04f 0200 	mov.w	r2, #0
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029e6:	4690      	mov	r8, r2
 80029e8:	4699      	mov	r9, r3
 80029ea:	4623      	mov	r3, r4
 80029ec:	eb18 0303 	adds.w	r3, r8, r3
 80029f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029f4:	462b      	mov	r3, r5
 80029f6:	eb49 0303 	adc.w	r3, r9, r3
 80029fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a12:	460b      	mov	r3, r1
 8002a14:	18db      	adds	r3, r3, r3
 8002a16:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a18:	4613      	mov	r3, r2
 8002a1a:	eb42 0303 	adc.w	r3, r2, r3
 8002a1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a28:	f7fe f916 	bl	8000c58 <__aeabi_uldivmod>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4b61      	ldr	r3, [pc, #388]	@ (8002bb8 <UART_SetConfig+0x2d4>)
 8002a32:	fba3 2302 	umull	r2, r3, r3, r2
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	011c      	lsls	r4, r3, #4
 8002a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	464b      	mov	r3, r9
 8002a50:	1891      	adds	r1, r2, r2
 8002a52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a54:	415b      	adcs	r3, r3
 8002a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a62:	4649      	mov	r1, r9
 8002a64:	eb43 0b01 	adc.w	fp, r3, r1
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a7c:	4692      	mov	sl, r2
 8002a7e:	469b      	mov	fp, r3
 8002a80:	4643      	mov	r3, r8
 8002a82:	eb1a 0303 	adds.w	r3, sl, r3
 8002a86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002aa0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002aa4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	18db      	adds	r3, r3, r3
 8002aac:	643b      	str	r3, [r7, #64]	@ 0x40
 8002aae:	4613      	mov	r3, r2
 8002ab0:	eb42 0303 	adc.w	r3, r2, r3
 8002ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ab6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002aba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002abe:	f7fe f8cb 	bl	8000c58 <__aeabi_uldivmod>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <UART_SetConfig+0x2d4>)
 8002aca:	fba3 2301 	umull	r2, r3, r3, r1
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2264      	movs	r2, #100	@ 0x64
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	1acb      	subs	r3, r1, r3
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ade:	4b36      	ldr	r3, [pc, #216]	@ (8002bb8 <UART_SetConfig+0x2d4>)
 8002ae0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002aec:	441c      	add	r4, r3
 8002aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002af2:	2200      	movs	r2, #0
 8002af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002af8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002afc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b00:	4642      	mov	r2, r8
 8002b02:	464b      	mov	r3, r9
 8002b04:	1891      	adds	r1, r2, r2
 8002b06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b08:	415b      	adcs	r3, r3
 8002b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b10:	4641      	mov	r1, r8
 8002b12:	1851      	adds	r1, r2, r1
 8002b14:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b16:	4649      	mov	r1, r9
 8002b18:	414b      	adcs	r3, r1
 8002b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b28:	4659      	mov	r1, fp
 8002b2a:	00cb      	lsls	r3, r1, #3
 8002b2c:	4651      	mov	r1, sl
 8002b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b32:	4651      	mov	r1, sl
 8002b34:	00ca      	lsls	r2, r1, #3
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4642      	mov	r2, r8
 8002b3e:	189b      	adds	r3, r3, r2
 8002b40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b44:	464b      	mov	r3, r9
 8002b46:	460a      	mov	r2, r1
 8002b48:	eb42 0303 	adc.w	r3, r2, r3
 8002b4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b64:	460b      	mov	r3, r1
 8002b66:	18db      	adds	r3, r3, r3
 8002b68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	eb42 0303 	adc.w	r3, r2, r3
 8002b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b7a:	f7fe f86d 	bl	8000c58 <__aeabi_uldivmod>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb8 <UART_SetConfig+0x2d4>)
 8002b84:	fba3 1302 	umull	r1, r3, r3, r2
 8002b88:	095b      	lsrs	r3, r3, #5
 8002b8a:	2164      	movs	r1, #100	@ 0x64
 8002b8c:	fb01 f303 	mul.w	r3, r1, r3
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	3332      	adds	r3, #50	@ 0x32
 8002b96:	4a08      	ldr	r2, [pc, #32]	@ (8002bb8 <UART_SetConfig+0x2d4>)
 8002b98:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	f003 0207 	and.w	r2, r3, #7
 8002ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4422      	add	r2, r4
 8002baa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bac:	e106      	b.n	8002dbc <UART_SetConfig+0x4d8>
 8002bae:	bf00      	nop
 8002bb0:	40011000 	.word	0x40011000
 8002bb4:	40011400 	.word	0x40011400
 8002bb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bc6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002bca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002bce:	4642      	mov	r2, r8
 8002bd0:	464b      	mov	r3, r9
 8002bd2:	1891      	adds	r1, r2, r2
 8002bd4:	6239      	str	r1, [r7, #32]
 8002bd6:	415b      	adcs	r3, r3
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bde:	4641      	mov	r1, r8
 8002be0:	1854      	adds	r4, r2, r1
 8002be2:	4649      	mov	r1, r9
 8002be4:	eb43 0501 	adc.w	r5, r3, r1
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	00eb      	lsls	r3, r5, #3
 8002bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bf6:	00e2      	lsls	r2, r4, #3
 8002bf8:	4614      	mov	r4, r2
 8002bfa:	461d      	mov	r5, r3
 8002bfc:	4643      	mov	r3, r8
 8002bfe:	18e3      	adds	r3, r4, r3
 8002c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c04:	464b      	mov	r3, r9
 8002c06:	eb45 0303 	adc.w	r3, r5, r3
 8002c0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c1a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	008b      	lsls	r3, r1, #2
 8002c2e:	4621      	mov	r1, r4
 8002c30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c34:	4621      	mov	r1, r4
 8002c36:	008a      	lsls	r2, r1, #2
 8002c38:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c3c:	f7fe f80c 	bl	8000c58 <__aeabi_uldivmod>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4b60      	ldr	r3, [pc, #384]	@ (8002dc8 <UART_SetConfig+0x4e4>)
 8002c46:	fba3 2302 	umull	r2, r3, r3, r2
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	011c      	lsls	r4, r3, #4
 8002c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c52:	2200      	movs	r2, #0
 8002c54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c5c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c60:	4642      	mov	r2, r8
 8002c62:	464b      	mov	r3, r9
 8002c64:	1891      	adds	r1, r2, r2
 8002c66:	61b9      	str	r1, [r7, #24]
 8002c68:	415b      	adcs	r3, r3
 8002c6a:	61fb      	str	r3, [r7, #28]
 8002c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c70:	4641      	mov	r1, r8
 8002c72:	1851      	adds	r1, r2, r1
 8002c74:	6139      	str	r1, [r7, #16]
 8002c76:	4649      	mov	r1, r9
 8002c78:	414b      	adcs	r3, r1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c88:	4659      	mov	r1, fp
 8002c8a:	00cb      	lsls	r3, r1, #3
 8002c8c:	4651      	mov	r1, sl
 8002c8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c92:	4651      	mov	r1, sl
 8002c94:	00ca      	lsls	r2, r1, #3
 8002c96:	4610      	mov	r0, r2
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4642      	mov	r2, r8
 8002c9e:	189b      	adds	r3, r3, r2
 8002ca0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002ca4:	464b      	mov	r3, r9
 8002ca6:	460a      	mov	r2, r1
 8002ca8:	eb42 0303 	adc.w	r3, r2, r3
 8002cac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002cba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002cc8:	4649      	mov	r1, r9
 8002cca:	008b      	lsls	r3, r1, #2
 8002ccc:	4641      	mov	r1, r8
 8002cce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cd2:	4641      	mov	r1, r8
 8002cd4:	008a      	lsls	r2, r1, #2
 8002cd6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002cda:	f7fd ffbd 	bl	8000c58 <__aeabi_uldivmod>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	4b38      	ldr	r3, [pc, #224]	@ (8002dc8 <UART_SetConfig+0x4e4>)
 8002ce6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	2264      	movs	r2, #100	@ 0x64
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	1acb      	subs	r3, r1, r3
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	3332      	adds	r3, #50	@ 0x32
 8002cf8:	4a33      	ldr	r2, [pc, #204]	@ (8002dc8 <UART_SetConfig+0x4e4>)
 8002cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d04:	441c      	add	r4, r3
 8002d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d0e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d10:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d14:	4642      	mov	r2, r8
 8002d16:	464b      	mov	r3, r9
 8002d18:	1891      	adds	r1, r2, r2
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	415b      	adcs	r3, r3
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d24:	4641      	mov	r1, r8
 8002d26:	1851      	adds	r1, r2, r1
 8002d28:	6039      	str	r1, [r7, #0]
 8002d2a:	4649      	mov	r1, r9
 8002d2c:	414b      	adcs	r3, r1
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d3c:	4659      	mov	r1, fp
 8002d3e:	00cb      	lsls	r3, r1, #3
 8002d40:	4651      	mov	r1, sl
 8002d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d46:	4651      	mov	r1, sl
 8002d48:	00ca      	lsls	r2, r1, #3
 8002d4a:	4610      	mov	r0, r2
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4642      	mov	r2, r8
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d56:	464b      	mov	r3, r9
 8002d58:	460a      	mov	r2, r1
 8002d5a:	eb42 0303 	adc.w	r3, r2, r3
 8002d5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d6a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d78:	4649      	mov	r1, r9
 8002d7a:	008b      	lsls	r3, r1, #2
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d82:	4641      	mov	r1, r8
 8002d84:	008a      	lsls	r2, r1, #2
 8002d86:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d8a:	f7fd ff65 	bl	8000c58 <__aeabi_uldivmod>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc8 <UART_SetConfig+0x4e4>)
 8002d94:	fba3 1302 	umull	r1, r3, r3, r2
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	2164      	movs	r1, #100	@ 0x64
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	3332      	adds	r3, #50	@ 0x32
 8002da6:	4a08      	ldr	r2, [pc, #32]	@ (8002dc8 <UART_SetConfig+0x4e4>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	f003 020f 	and.w	r2, r3, #15
 8002db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4422      	add	r2, r4
 8002dba:	609a      	str	r2, [r3, #8]
}
 8002dbc:	bf00      	nop
 8002dbe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dc8:	51eb851f 	.word	0x51eb851f

08002dcc <__cvt>:
 8002dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd0:	ec57 6b10 	vmov	r6, r7, d0
 8002dd4:	2f00      	cmp	r7, #0
 8002dd6:	460c      	mov	r4, r1
 8002dd8:	4619      	mov	r1, r3
 8002dda:	463b      	mov	r3, r7
 8002ddc:	bfbb      	ittet	lt
 8002dde:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002de2:	461f      	movlt	r7, r3
 8002de4:	2300      	movge	r3, #0
 8002de6:	232d      	movlt	r3, #45	@ 0x2d
 8002de8:	700b      	strb	r3, [r1, #0]
 8002dea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002dec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002df0:	4691      	mov	r9, r2
 8002df2:	f023 0820 	bic.w	r8, r3, #32
 8002df6:	bfbc      	itt	lt
 8002df8:	4632      	movlt	r2, r6
 8002dfa:	4616      	movlt	r6, r2
 8002dfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002e00:	d005      	beq.n	8002e0e <__cvt+0x42>
 8002e02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002e06:	d100      	bne.n	8002e0a <__cvt+0x3e>
 8002e08:	3401      	adds	r4, #1
 8002e0a:	2102      	movs	r1, #2
 8002e0c:	e000      	b.n	8002e10 <__cvt+0x44>
 8002e0e:	2103      	movs	r1, #3
 8002e10:	ab03      	add	r3, sp, #12
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	ab02      	add	r3, sp, #8
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	ec47 6b10 	vmov	d0, r6, r7
 8002e1c:	4653      	mov	r3, sl
 8002e1e:	4622      	mov	r2, r4
 8002e20:	f000 fe4e 	bl	8003ac0 <_dtoa_r>
 8002e24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002e28:	4605      	mov	r5, r0
 8002e2a:	d119      	bne.n	8002e60 <__cvt+0x94>
 8002e2c:	f019 0f01 	tst.w	r9, #1
 8002e30:	d00e      	beq.n	8002e50 <__cvt+0x84>
 8002e32:	eb00 0904 	add.w	r9, r0, r4
 8002e36:	2200      	movs	r2, #0
 8002e38:	2300      	movs	r3, #0
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	4639      	mov	r1, r7
 8002e3e:	f7fd fe4b 	bl	8000ad8 <__aeabi_dcmpeq>
 8002e42:	b108      	cbz	r0, 8002e48 <__cvt+0x7c>
 8002e44:	f8cd 900c 	str.w	r9, [sp, #12]
 8002e48:	2230      	movs	r2, #48	@ 0x30
 8002e4a:	9b03      	ldr	r3, [sp, #12]
 8002e4c:	454b      	cmp	r3, r9
 8002e4e:	d31e      	bcc.n	8002e8e <__cvt+0xc2>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002e54:	1b5b      	subs	r3, r3, r5
 8002e56:	4628      	mov	r0, r5
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	b004      	add	sp, #16
 8002e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002e64:	eb00 0904 	add.w	r9, r0, r4
 8002e68:	d1e5      	bne.n	8002e36 <__cvt+0x6a>
 8002e6a:	7803      	ldrb	r3, [r0, #0]
 8002e6c:	2b30      	cmp	r3, #48	@ 0x30
 8002e6e:	d10a      	bne.n	8002e86 <__cvt+0xba>
 8002e70:	2200      	movs	r2, #0
 8002e72:	2300      	movs	r3, #0
 8002e74:	4630      	mov	r0, r6
 8002e76:	4639      	mov	r1, r7
 8002e78:	f7fd fe2e 	bl	8000ad8 <__aeabi_dcmpeq>
 8002e7c:	b918      	cbnz	r0, 8002e86 <__cvt+0xba>
 8002e7e:	f1c4 0401 	rsb	r4, r4, #1
 8002e82:	f8ca 4000 	str.w	r4, [sl]
 8002e86:	f8da 3000 	ldr.w	r3, [sl]
 8002e8a:	4499      	add	r9, r3
 8002e8c:	e7d3      	b.n	8002e36 <__cvt+0x6a>
 8002e8e:	1c59      	adds	r1, r3, #1
 8002e90:	9103      	str	r1, [sp, #12]
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e7d9      	b.n	8002e4a <__cvt+0x7e>

08002e96 <__exponent>:
 8002e96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e98:	2900      	cmp	r1, #0
 8002e9a:	bfba      	itte	lt
 8002e9c:	4249      	neglt	r1, r1
 8002e9e:	232d      	movlt	r3, #45	@ 0x2d
 8002ea0:	232b      	movge	r3, #43	@ 0x2b
 8002ea2:	2909      	cmp	r1, #9
 8002ea4:	7002      	strb	r2, [r0, #0]
 8002ea6:	7043      	strb	r3, [r0, #1]
 8002ea8:	dd29      	ble.n	8002efe <__exponent+0x68>
 8002eaa:	f10d 0307 	add.w	r3, sp, #7
 8002eae:	461d      	mov	r5, r3
 8002eb0:	270a      	movs	r7, #10
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	fbb1 f6f7 	udiv	r6, r1, r7
 8002eb8:	fb07 1416 	mls	r4, r7, r6, r1
 8002ebc:	3430      	adds	r4, #48	@ 0x30
 8002ebe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002ec2:	460c      	mov	r4, r1
 8002ec4:	2c63      	cmp	r4, #99	@ 0x63
 8002ec6:	f103 33ff 	add.w	r3, r3, #4294967295
 8002eca:	4631      	mov	r1, r6
 8002ecc:	dcf1      	bgt.n	8002eb2 <__exponent+0x1c>
 8002ece:	3130      	adds	r1, #48	@ 0x30
 8002ed0:	1e94      	subs	r4, r2, #2
 8002ed2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002ed6:	1c41      	adds	r1, r0, #1
 8002ed8:	4623      	mov	r3, r4
 8002eda:	42ab      	cmp	r3, r5
 8002edc:	d30a      	bcc.n	8002ef4 <__exponent+0x5e>
 8002ede:	f10d 0309 	add.w	r3, sp, #9
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	42ac      	cmp	r4, r5
 8002ee6:	bf88      	it	hi
 8002ee8:	2300      	movhi	r3, #0
 8002eea:	3302      	adds	r3, #2
 8002eec:	4403      	add	r3, r0
 8002eee:	1a18      	subs	r0, r3, r0
 8002ef0:	b003      	add	sp, #12
 8002ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002ef8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002efc:	e7ed      	b.n	8002eda <__exponent+0x44>
 8002efe:	2330      	movs	r3, #48	@ 0x30
 8002f00:	3130      	adds	r1, #48	@ 0x30
 8002f02:	7083      	strb	r3, [r0, #2]
 8002f04:	70c1      	strb	r1, [r0, #3]
 8002f06:	1d03      	adds	r3, r0, #4
 8002f08:	e7f1      	b.n	8002eee <__exponent+0x58>
	...

08002f0c <_printf_float>:
 8002f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f10:	b08d      	sub	sp, #52	@ 0x34
 8002f12:	460c      	mov	r4, r1
 8002f14:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002f18:	4616      	mov	r6, r2
 8002f1a:	461f      	mov	r7, r3
 8002f1c:	4605      	mov	r5, r0
 8002f1e:	f000 fccd 	bl	80038bc <_localeconv_r>
 8002f22:	6803      	ldr	r3, [r0, #0]
 8002f24:	9304      	str	r3, [sp, #16]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fd f9aa 	bl	8000280 <strlen>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002f30:	f8d8 3000 	ldr.w	r3, [r8]
 8002f34:	9005      	str	r0, [sp, #20]
 8002f36:	3307      	adds	r3, #7
 8002f38:	f023 0307 	bic.w	r3, r3, #7
 8002f3c:	f103 0208 	add.w	r2, r3, #8
 8002f40:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002f44:	f8d4 b000 	ldr.w	fp, [r4]
 8002f48:	f8c8 2000 	str.w	r2, [r8]
 8002f4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002f54:	9307      	str	r3, [sp, #28]
 8002f56:	f8cd 8018 	str.w	r8, [sp, #24]
 8002f5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002f5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f62:	4b9c      	ldr	r3, [pc, #624]	@ (80031d4 <_printf_float+0x2c8>)
 8002f64:	f04f 32ff 	mov.w	r2, #4294967295
 8002f68:	f7fd fde8 	bl	8000b3c <__aeabi_dcmpun>
 8002f6c:	bb70      	cbnz	r0, 8002fcc <_printf_float+0xc0>
 8002f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f72:	4b98      	ldr	r3, [pc, #608]	@ (80031d4 <_printf_float+0x2c8>)
 8002f74:	f04f 32ff 	mov.w	r2, #4294967295
 8002f78:	f7fd fdc2 	bl	8000b00 <__aeabi_dcmple>
 8002f7c:	bb30      	cbnz	r0, 8002fcc <_printf_float+0xc0>
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2300      	movs	r3, #0
 8002f82:	4640      	mov	r0, r8
 8002f84:	4649      	mov	r1, r9
 8002f86:	f7fd fdb1 	bl	8000aec <__aeabi_dcmplt>
 8002f8a:	b110      	cbz	r0, 8002f92 <_printf_float+0x86>
 8002f8c:	232d      	movs	r3, #45	@ 0x2d
 8002f8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f92:	4a91      	ldr	r2, [pc, #580]	@ (80031d8 <_printf_float+0x2cc>)
 8002f94:	4b91      	ldr	r3, [pc, #580]	@ (80031dc <_printf_float+0x2d0>)
 8002f96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002f9a:	bf94      	ite	ls
 8002f9c:	4690      	movls	r8, r2
 8002f9e:	4698      	movhi	r8, r3
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	6123      	str	r3, [r4, #16]
 8002fa4:	f02b 0304 	bic.w	r3, fp, #4
 8002fa8:	6023      	str	r3, [r4, #0]
 8002faa:	f04f 0900 	mov.w	r9, #0
 8002fae:	9700      	str	r7, [sp, #0]
 8002fb0:	4633      	mov	r3, r6
 8002fb2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	f000 f9d2 	bl	8003360 <_printf_common>
 8002fbc:	3001      	adds	r0, #1
 8002fbe:	f040 808d 	bne.w	80030dc <_printf_float+0x1d0>
 8002fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc6:	b00d      	add	sp, #52	@ 0x34
 8002fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fcc:	4642      	mov	r2, r8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	4640      	mov	r0, r8
 8002fd2:	4649      	mov	r1, r9
 8002fd4:	f7fd fdb2 	bl	8000b3c <__aeabi_dcmpun>
 8002fd8:	b140      	cbz	r0, 8002fec <_printf_float+0xe0>
 8002fda:	464b      	mov	r3, r9
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bfbc      	itt	lt
 8002fe0:	232d      	movlt	r3, #45	@ 0x2d
 8002fe2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80031e0 <_printf_float+0x2d4>)
 8002fe8:	4b7e      	ldr	r3, [pc, #504]	@ (80031e4 <_printf_float+0x2d8>)
 8002fea:	e7d4      	b.n	8002f96 <_printf_float+0x8a>
 8002fec:	6863      	ldr	r3, [r4, #4]
 8002fee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002ff2:	9206      	str	r2, [sp, #24]
 8002ff4:	1c5a      	adds	r2, r3, #1
 8002ff6:	d13b      	bne.n	8003070 <_printf_float+0x164>
 8002ff8:	2306      	movs	r3, #6
 8002ffa:	6063      	str	r3, [r4, #4]
 8002ffc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003000:	2300      	movs	r3, #0
 8003002:	6022      	str	r2, [r4, #0]
 8003004:	9303      	str	r3, [sp, #12]
 8003006:	ab0a      	add	r3, sp, #40	@ 0x28
 8003008:	e9cd a301 	strd	sl, r3, [sp, #4]
 800300c:	ab09      	add	r3, sp, #36	@ 0x24
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	6861      	ldr	r1, [r4, #4]
 8003012:	ec49 8b10 	vmov	d0, r8, r9
 8003016:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800301a:	4628      	mov	r0, r5
 800301c:	f7ff fed6 	bl	8002dcc <__cvt>
 8003020:	9b06      	ldr	r3, [sp, #24]
 8003022:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003024:	2b47      	cmp	r3, #71	@ 0x47
 8003026:	4680      	mov	r8, r0
 8003028:	d129      	bne.n	800307e <_printf_float+0x172>
 800302a:	1cc8      	adds	r0, r1, #3
 800302c:	db02      	blt.n	8003034 <_printf_float+0x128>
 800302e:	6863      	ldr	r3, [r4, #4]
 8003030:	4299      	cmp	r1, r3
 8003032:	dd41      	ble.n	80030b8 <_printf_float+0x1ac>
 8003034:	f1aa 0a02 	sub.w	sl, sl, #2
 8003038:	fa5f fa8a 	uxtb.w	sl, sl
 800303c:	3901      	subs	r1, #1
 800303e:	4652      	mov	r2, sl
 8003040:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003044:	9109      	str	r1, [sp, #36]	@ 0x24
 8003046:	f7ff ff26 	bl	8002e96 <__exponent>
 800304a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800304c:	1813      	adds	r3, r2, r0
 800304e:	2a01      	cmp	r2, #1
 8003050:	4681      	mov	r9, r0
 8003052:	6123      	str	r3, [r4, #16]
 8003054:	dc02      	bgt.n	800305c <_printf_float+0x150>
 8003056:	6822      	ldr	r2, [r4, #0]
 8003058:	07d2      	lsls	r2, r2, #31
 800305a:	d501      	bpl.n	8003060 <_printf_float+0x154>
 800305c:	3301      	adds	r3, #1
 800305e:	6123      	str	r3, [r4, #16]
 8003060:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0a2      	beq.n	8002fae <_printf_float+0xa2>
 8003068:	232d      	movs	r3, #45	@ 0x2d
 800306a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800306e:	e79e      	b.n	8002fae <_printf_float+0xa2>
 8003070:	9a06      	ldr	r2, [sp, #24]
 8003072:	2a47      	cmp	r2, #71	@ 0x47
 8003074:	d1c2      	bne.n	8002ffc <_printf_float+0xf0>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1c0      	bne.n	8002ffc <_printf_float+0xf0>
 800307a:	2301      	movs	r3, #1
 800307c:	e7bd      	b.n	8002ffa <_printf_float+0xee>
 800307e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003082:	d9db      	bls.n	800303c <_printf_float+0x130>
 8003084:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003088:	d118      	bne.n	80030bc <_printf_float+0x1b0>
 800308a:	2900      	cmp	r1, #0
 800308c:	6863      	ldr	r3, [r4, #4]
 800308e:	dd0b      	ble.n	80030a8 <_printf_float+0x19c>
 8003090:	6121      	str	r1, [r4, #16]
 8003092:	b913      	cbnz	r3, 800309a <_printf_float+0x18e>
 8003094:	6822      	ldr	r2, [r4, #0]
 8003096:	07d0      	lsls	r0, r2, #31
 8003098:	d502      	bpl.n	80030a0 <_printf_float+0x194>
 800309a:	3301      	adds	r3, #1
 800309c:	440b      	add	r3, r1
 800309e:	6123      	str	r3, [r4, #16]
 80030a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80030a2:	f04f 0900 	mov.w	r9, #0
 80030a6:	e7db      	b.n	8003060 <_printf_float+0x154>
 80030a8:	b913      	cbnz	r3, 80030b0 <_printf_float+0x1a4>
 80030aa:	6822      	ldr	r2, [r4, #0]
 80030ac:	07d2      	lsls	r2, r2, #31
 80030ae:	d501      	bpl.n	80030b4 <_printf_float+0x1a8>
 80030b0:	3302      	adds	r3, #2
 80030b2:	e7f4      	b.n	800309e <_printf_float+0x192>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e7f2      	b.n	800309e <_printf_float+0x192>
 80030b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80030bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80030be:	4299      	cmp	r1, r3
 80030c0:	db05      	blt.n	80030ce <_printf_float+0x1c2>
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	6121      	str	r1, [r4, #16]
 80030c6:	07d8      	lsls	r0, r3, #31
 80030c8:	d5ea      	bpl.n	80030a0 <_printf_float+0x194>
 80030ca:	1c4b      	adds	r3, r1, #1
 80030cc:	e7e7      	b.n	800309e <_printf_float+0x192>
 80030ce:	2900      	cmp	r1, #0
 80030d0:	bfd4      	ite	le
 80030d2:	f1c1 0202 	rsble	r2, r1, #2
 80030d6:	2201      	movgt	r2, #1
 80030d8:	4413      	add	r3, r2
 80030da:	e7e0      	b.n	800309e <_printf_float+0x192>
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	055a      	lsls	r2, r3, #21
 80030e0:	d407      	bmi.n	80030f2 <_printf_float+0x1e6>
 80030e2:	6923      	ldr	r3, [r4, #16]
 80030e4:	4642      	mov	r2, r8
 80030e6:	4631      	mov	r1, r6
 80030e8:	4628      	mov	r0, r5
 80030ea:	47b8      	blx	r7
 80030ec:	3001      	adds	r0, #1
 80030ee:	d12b      	bne.n	8003148 <_printf_float+0x23c>
 80030f0:	e767      	b.n	8002fc2 <_printf_float+0xb6>
 80030f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80030f6:	f240 80dd 	bls.w	80032b4 <_printf_float+0x3a8>
 80030fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80030fe:	2200      	movs	r2, #0
 8003100:	2300      	movs	r3, #0
 8003102:	f7fd fce9 	bl	8000ad8 <__aeabi_dcmpeq>
 8003106:	2800      	cmp	r0, #0
 8003108:	d033      	beq.n	8003172 <_printf_float+0x266>
 800310a:	4a37      	ldr	r2, [pc, #220]	@ (80031e8 <_printf_float+0x2dc>)
 800310c:	2301      	movs	r3, #1
 800310e:	4631      	mov	r1, r6
 8003110:	4628      	mov	r0, r5
 8003112:	47b8      	blx	r7
 8003114:	3001      	adds	r0, #1
 8003116:	f43f af54 	beq.w	8002fc2 <_printf_float+0xb6>
 800311a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800311e:	4543      	cmp	r3, r8
 8003120:	db02      	blt.n	8003128 <_printf_float+0x21c>
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	07d8      	lsls	r0, r3, #31
 8003126:	d50f      	bpl.n	8003148 <_printf_float+0x23c>
 8003128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800312c:	4631      	mov	r1, r6
 800312e:	4628      	mov	r0, r5
 8003130:	47b8      	blx	r7
 8003132:	3001      	adds	r0, #1
 8003134:	f43f af45 	beq.w	8002fc2 <_printf_float+0xb6>
 8003138:	f04f 0900 	mov.w	r9, #0
 800313c:	f108 38ff 	add.w	r8, r8, #4294967295
 8003140:	f104 0a1a 	add.w	sl, r4, #26
 8003144:	45c8      	cmp	r8, r9
 8003146:	dc09      	bgt.n	800315c <_printf_float+0x250>
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	079b      	lsls	r3, r3, #30
 800314c:	f100 8103 	bmi.w	8003356 <_printf_float+0x44a>
 8003150:	68e0      	ldr	r0, [r4, #12]
 8003152:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003154:	4298      	cmp	r0, r3
 8003156:	bfb8      	it	lt
 8003158:	4618      	movlt	r0, r3
 800315a:	e734      	b.n	8002fc6 <_printf_float+0xba>
 800315c:	2301      	movs	r3, #1
 800315e:	4652      	mov	r2, sl
 8003160:	4631      	mov	r1, r6
 8003162:	4628      	mov	r0, r5
 8003164:	47b8      	blx	r7
 8003166:	3001      	adds	r0, #1
 8003168:	f43f af2b 	beq.w	8002fc2 <_printf_float+0xb6>
 800316c:	f109 0901 	add.w	r9, r9, #1
 8003170:	e7e8      	b.n	8003144 <_printf_float+0x238>
 8003172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003174:	2b00      	cmp	r3, #0
 8003176:	dc39      	bgt.n	80031ec <_printf_float+0x2e0>
 8003178:	4a1b      	ldr	r2, [pc, #108]	@ (80031e8 <_printf_float+0x2dc>)
 800317a:	2301      	movs	r3, #1
 800317c:	4631      	mov	r1, r6
 800317e:	4628      	mov	r0, r5
 8003180:	47b8      	blx	r7
 8003182:	3001      	adds	r0, #1
 8003184:	f43f af1d 	beq.w	8002fc2 <_printf_float+0xb6>
 8003188:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800318c:	ea59 0303 	orrs.w	r3, r9, r3
 8003190:	d102      	bne.n	8003198 <_printf_float+0x28c>
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	07d9      	lsls	r1, r3, #31
 8003196:	d5d7      	bpl.n	8003148 <_printf_float+0x23c>
 8003198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800319c:	4631      	mov	r1, r6
 800319e:	4628      	mov	r0, r5
 80031a0:	47b8      	blx	r7
 80031a2:	3001      	adds	r0, #1
 80031a4:	f43f af0d 	beq.w	8002fc2 <_printf_float+0xb6>
 80031a8:	f04f 0a00 	mov.w	sl, #0
 80031ac:	f104 0b1a 	add.w	fp, r4, #26
 80031b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031b2:	425b      	negs	r3, r3
 80031b4:	4553      	cmp	r3, sl
 80031b6:	dc01      	bgt.n	80031bc <_printf_float+0x2b0>
 80031b8:	464b      	mov	r3, r9
 80031ba:	e793      	b.n	80030e4 <_printf_float+0x1d8>
 80031bc:	2301      	movs	r3, #1
 80031be:	465a      	mov	r2, fp
 80031c0:	4631      	mov	r1, r6
 80031c2:	4628      	mov	r0, r5
 80031c4:	47b8      	blx	r7
 80031c6:	3001      	adds	r0, #1
 80031c8:	f43f aefb 	beq.w	8002fc2 <_printf_float+0xb6>
 80031cc:	f10a 0a01 	add.w	sl, sl, #1
 80031d0:	e7ee      	b.n	80031b0 <_printf_float+0x2a4>
 80031d2:	bf00      	nop
 80031d4:	7fefffff 	.word	0x7fefffff
 80031d8:	08006790 	.word	0x08006790
 80031dc:	08006794 	.word	0x08006794
 80031e0:	08006798 	.word	0x08006798
 80031e4:	0800679c 	.word	0x0800679c
 80031e8:	080067a0 	.word	0x080067a0
 80031ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80031ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80031f2:	4553      	cmp	r3, sl
 80031f4:	bfa8      	it	ge
 80031f6:	4653      	movge	r3, sl
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	4699      	mov	r9, r3
 80031fc:	dc36      	bgt.n	800326c <_printf_float+0x360>
 80031fe:	f04f 0b00 	mov.w	fp, #0
 8003202:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003206:	f104 021a 	add.w	r2, r4, #26
 800320a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800320c:	9306      	str	r3, [sp, #24]
 800320e:	eba3 0309 	sub.w	r3, r3, r9
 8003212:	455b      	cmp	r3, fp
 8003214:	dc31      	bgt.n	800327a <_printf_float+0x36e>
 8003216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003218:	459a      	cmp	sl, r3
 800321a:	dc3a      	bgt.n	8003292 <_printf_float+0x386>
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	07da      	lsls	r2, r3, #31
 8003220:	d437      	bmi.n	8003292 <_printf_float+0x386>
 8003222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003224:	ebaa 0903 	sub.w	r9, sl, r3
 8003228:	9b06      	ldr	r3, [sp, #24]
 800322a:	ebaa 0303 	sub.w	r3, sl, r3
 800322e:	4599      	cmp	r9, r3
 8003230:	bfa8      	it	ge
 8003232:	4699      	movge	r9, r3
 8003234:	f1b9 0f00 	cmp.w	r9, #0
 8003238:	dc33      	bgt.n	80032a2 <_printf_float+0x396>
 800323a:	f04f 0800 	mov.w	r8, #0
 800323e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003242:	f104 0b1a 	add.w	fp, r4, #26
 8003246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003248:	ebaa 0303 	sub.w	r3, sl, r3
 800324c:	eba3 0309 	sub.w	r3, r3, r9
 8003250:	4543      	cmp	r3, r8
 8003252:	f77f af79 	ble.w	8003148 <_printf_float+0x23c>
 8003256:	2301      	movs	r3, #1
 8003258:	465a      	mov	r2, fp
 800325a:	4631      	mov	r1, r6
 800325c:	4628      	mov	r0, r5
 800325e:	47b8      	blx	r7
 8003260:	3001      	adds	r0, #1
 8003262:	f43f aeae 	beq.w	8002fc2 <_printf_float+0xb6>
 8003266:	f108 0801 	add.w	r8, r8, #1
 800326a:	e7ec      	b.n	8003246 <_printf_float+0x33a>
 800326c:	4642      	mov	r2, r8
 800326e:	4631      	mov	r1, r6
 8003270:	4628      	mov	r0, r5
 8003272:	47b8      	blx	r7
 8003274:	3001      	adds	r0, #1
 8003276:	d1c2      	bne.n	80031fe <_printf_float+0x2f2>
 8003278:	e6a3      	b.n	8002fc2 <_printf_float+0xb6>
 800327a:	2301      	movs	r3, #1
 800327c:	4631      	mov	r1, r6
 800327e:	4628      	mov	r0, r5
 8003280:	9206      	str	r2, [sp, #24]
 8003282:	47b8      	blx	r7
 8003284:	3001      	adds	r0, #1
 8003286:	f43f ae9c 	beq.w	8002fc2 <_printf_float+0xb6>
 800328a:	9a06      	ldr	r2, [sp, #24]
 800328c:	f10b 0b01 	add.w	fp, fp, #1
 8003290:	e7bb      	b.n	800320a <_printf_float+0x2fe>
 8003292:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003296:	4631      	mov	r1, r6
 8003298:	4628      	mov	r0, r5
 800329a:	47b8      	blx	r7
 800329c:	3001      	adds	r0, #1
 800329e:	d1c0      	bne.n	8003222 <_printf_float+0x316>
 80032a0:	e68f      	b.n	8002fc2 <_printf_float+0xb6>
 80032a2:	9a06      	ldr	r2, [sp, #24]
 80032a4:	464b      	mov	r3, r9
 80032a6:	4442      	add	r2, r8
 80032a8:	4631      	mov	r1, r6
 80032aa:	4628      	mov	r0, r5
 80032ac:	47b8      	blx	r7
 80032ae:	3001      	adds	r0, #1
 80032b0:	d1c3      	bne.n	800323a <_printf_float+0x32e>
 80032b2:	e686      	b.n	8002fc2 <_printf_float+0xb6>
 80032b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80032b8:	f1ba 0f01 	cmp.w	sl, #1
 80032bc:	dc01      	bgt.n	80032c2 <_printf_float+0x3b6>
 80032be:	07db      	lsls	r3, r3, #31
 80032c0:	d536      	bpl.n	8003330 <_printf_float+0x424>
 80032c2:	2301      	movs	r3, #1
 80032c4:	4642      	mov	r2, r8
 80032c6:	4631      	mov	r1, r6
 80032c8:	4628      	mov	r0, r5
 80032ca:	47b8      	blx	r7
 80032cc:	3001      	adds	r0, #1
 80032ce:	f43f ae78 	beq.w	8002fc2 <_printf_float+0xb6>
 80032d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80032d6:	4631      	mov	r1, r6
 80032d8:	4628      	mov	r0, r5
 80032da:	47b8      	blx	r7
 80032dc:	3001      	adds	r0, #1
 80032de:	f43f ae70 	beq.w	8002fc2 <_printf_float+0xb6>
 80032e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80032e6:	2200      	movs	r2, #0
 80032e8:	2300      	movs	r3, #0
 80032ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80032ee:	f7fd fbf3 	bl	8000ad8 <__aeabi_dcmpeq>
 80032f2:	b9c0      	cbnz	r0, 8003326 <_printf_float+0x41a>
 80032f4:	4653      	mov	r3, sl
 80032f6:	f108 0201 	add.w	r2, r8, #1
 80032fa:	4631      	mov	r1, r6
 80032fc:	4628      	mov	r0, r5
 80032fe:	47b8      	blx	r7
 8003300:	3001      	adds	r0, #1
 8003302:	d10c      	bne.n	800331e <_printf_float+0x412>
 8003304:	e65d      	b.n	8002fc2 <_printf_float+0xb6>
 8003306:	2301      	movs	r3, #1
 8003308:	465a      	mov	r2, fp
 800330a:	4631      	mov	r1, r6
 800330c:	4628      	mov	r0, r5
 800330e:	47b8      	blx	r7
 8003310:	3001      	adds	r0, #1
 8003312:	f43f ae56 	beq.w	8002fc2 <_printf_float+0xb6>
 8003316:	f108 0801 	add.w	r8, r8, #1
 800331a:	45d0      	cmp	r8, sl
 800331c:	dbf3      	blt.n	8003306 <_printf_float+0x3fa>
 800331e:	464b      	mov	r3, r9
 8003320:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003324:	e6df      	b.n	80030e6 <_printf_float+0x1da>
 8003326:	f04f 0800 	mov.w	r8, #0
 800332a:	f104 0b1a 	add.w	fp, r4, #26
 800332e:	e7f4      	b.n	800331a <_printf_float+0x40e>
 8003330:	2301      	movs	r3, #1
 8003332:	4642      	mov	r2, r8
 8003334:	e7e1      	b.n	80032fa <_printf_float+0x3ee>
 8003336:	2301      	movs	r3, #1
 8003338:	464a      	mov	r2, r9
 800333a:	4631      	mov	r1, r6
 800333c:	4628      	mov	r0, r5
 800333e:	47b8      	blx	r7
 8003340:	3001      	adds	r0, #1
 8003342:	f43f ae3e 	beq.w	8002fc2 <_printf_float+0xb6>
 8003346:	f108 0801 	add.w	r8, r8, #1
 800334a:	68e3      	ldr	r3, [r4, #12]
 800334c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800334e:	1a5b      	subs	r3, r3, r1
 8003350:	4543      	cmp	r3, r8
 8003352:	dcf0      	bgt.n	8003336 <_printf_float+0x42a>
 8003354:	e6fc      	b.n	8003150 <_printf_float+0x244>
 8003356:	f04f 0800 	mov.w	r8, #0
 800335a:	f104 0919 	add.w	r9, r4, #25
 800335e:	e7f4      	b.n	800334a <_printf_float+0x43e>

08003360 <_printf_common>:
 8003360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003364:	4616      	mov	r6, r2
 8003366:	4698      	mov	r8, r3
 8003368:	688a      	ldr	r2, [r1, #8]
 800336a:	690b      	ldr	r3, [r1, #16]
 800336c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003370:	4293      	cmp	r3, r2
 8003372:	bfb8      	it	lt
 8003374:	4613      	movlt	r3, r2
 8003376:	6033      	str	r3, [r6, #0]
 8003378:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800337c:	4607      	mov	r7, r0
 800337e:	460c      	mov	r4, r1
 8003380:	b10a      	cbz	r2, 8003386 <_printf_common+0x26>
 8003382:	3301      	adds	r3, #1
 8003384:	6033      	str	r3, [r6, #0]
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	0699      	lsls	r1, r3, #26
 800338a:	bf42      	ittt	mi
 800338c:	6833      	ldrmi	r3, [r6, #0]
 800338e:	3302      	addmi	r3, #2
 8003390:	6033      	strmi	r3, [r6, #0]
 8003392:	6825      	ldr	r5, [r4, #0]
 8003394:	f015 0506 	ands.w	r5, r5, #6
 8003398:	d106      	bne.n	80033a8 <_printf_common+0x48>
 800339a:	f104 0a19 	add.w	sl, r4, #25
 800339e:	68e3      	ldr	r3, [r4, #12]
 80033a0:	6832      	ldr	r2, [r6, #0]
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	42ab      	cmp	r3, r5
 80033a6:	dc26      	bgt.n	80033f6 <_printf_common+0x96>
 80033a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80033ac:	6822      	ldr	r2, [r4, #0]
 80033ae:	3b00      	subs	r3, #0
 80033b0:	bf18      	it	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	0692      	lsls	r2, r2, #26
 80033b6:	d42b      	bmi.n	8003410 <_printf_common+0xb0>
 80033b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80033bc:	4641      	mov	r1, r8
 80033be:	4638      	mov	r0, r7
 80033c0:	47c8      	blx	r9
 80033c2:	3001      	adds	r0, #1
 80033c4:	d01e      	beq.n	8003404 <_printf_common+0xa4>
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	6922      	ldr	r2, [r4, #16]
 80033ca:	f003 0306 	and.w	r3, r3, #6
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	bf02      	ittt	eq
 80033d2:	68e5      	ldreq	r5, [r4, #12]
 80033d4:	6833      	ldreq	r3, [r6, #0]
 80033d6:	1aed      	subeq	r5, r5, r3
 80033d8:	68a3      	ldr	r3, [r4, #8]
 80033da:	bf0c      	ite	eq
 80033dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033e0:	2500      	movne	r5, #0
 80033e2:	4293      	cmp	r3, r2
 80033e4:	bfc4      	itt	gt
 80033e6:	1a9b      	subgt	r3, r3, r2
 80033e8:	18ed      	addgt	r5, r5, r3
 80033ea:	2600      	movs	r6, #0
 80033ec:	341a      	adds	r4, #26
 80033ee:	42b5      	cmp	r5, r6
 80033f0:	d11a      	bne.n	8003428 <_printf_common+0xc8>
 80033f2:	2000      	movs	r0, #0
 80033f4:	e008      	b.n	8003408 <_printf_common+0xa8>
 80033f6:	2301      	movs	r3, #1
 80033f8:	4652      	mov	r2, sl
 80033fa:	4641      	mov	r1, r8
 80033fc:	4638      	mov	r0, r7
 80033fe:	47c8      	blx	r9
 8003400:	3001      	adds	r0, #1
 8003402:	d103      	bne.n	800340c <_printf_common+0xac>
 8003404:	f04f 30ff 	mov.w	r0, #4294967295
 8003408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800340c:	3501      	adds	r5, #1
 800340e:	e7c6      	b.n	800339e <_printf_common+0x3e>
 8003410:	18e1      	adds	r1, r4, r3
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	2030      	movs	r0, #48	@ 0x30
 8003416:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800341a:	4422      	add	r2, r4
 800341c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003420:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003424:	3302      	adds	r3, #2
 8003426:	e7c7      	b.n	80033b8 <_printf_common+0x58>
 8003428:	2301      	movs	r3, #1
 800342a:	4622      	mov	r2, r4
 800342c:	4641      	mov	r1, r8
 800342e:	4638      	mov	r0, r7
 8003430:	47c8      	blx	r9
 8003432:	3001      	adds	r0, #1
 8003434:	d0e6      	beq.n	8003404 <_printf_common+0xa4>
 8003436:	3601      	adds	r6, #1
 8003438:	e7d9      	b.n	80033ee <_printf_common+0x8e>
	...

0800343c <_printf_i>:
 800343c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003440:	7e0f      	ldrb	r7, [r1, #24]
 8003442:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003444:	2f78      	cmp	r7, #120	@ 0x78
 8003446:	4691      	mov	r9, r2
 8003448:	4680      	mov	r8, r0
 800344a:	460c      	mov	r4, r1
 800344c:	469a      	mov	sl, r3
 800344e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003452:	d807      	bhi.n	8003464 <_printf_i+0x28>
 8003454:	2f62      	cmp	r7, #98	@ 0x62
 8003456:	d80a      	bhi.n	800346e <_printf_i+0x32>
 8003458:	2f00      	cmp	r7, #0
 800345a:	f000 80d2 	beq.w	8003602 <_printf_i+0x1c6>
 800345e:	2f58      	cmp	r7, #88	@ 0x58
 8003460:	f000 80b9 	beq.w	80035d6 <_printf_i+0x19a>
 8003464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003468:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800346c:	e03a      	b.n	80034e4 <_printf_i+0xa8>
 800346e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003472:	2b15      	cmp	r3, #21
 8003474:	d8f6      	bhi.n	8003464 <_printf_i+0x28>
 8003476:	a101      	add	r1, pc, #4	@ (adr r1, 800347c <_printf_i+0x40>)
 8003478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800347c:	080034d5 	.word	0x080034d5
 8003480:	080034e9 	.word	0x080034e9
 8003484:	08003465 	.word	0x08003465
 8003488:	08003465 	.word	0x08003465
 800348c:	08003465 	.word	0x08003465
 8003490:	08003465 	.word	0x08003465
 8003494:	080034e9 	.word	0x080034e9
 8003498:	08003465 	.word	0x08003465
 800349c:	08003465 	.word	0x08003465
 80034a0:	08003465 	.word	0x08003465
 80034a4:	08003465 	.word	0x08003465
 80034a8:	080035e9 	.word	0x080035e9
 80034ac:	08003513 	.word	0x08003513
 80034b0:	080035a3 	.word	0x080035a3
 80034b4:	08003465 	.word	0x08003465
 80034b8:	08003465 	.word	0x08003465
 80034bc:	0800360b 	.word	0x0800360b
 80034c0:	08003465 	.word	0x08003465
 80034c4:	08003513 	.word	0x08003513
 80034c8:	08003465 	.word	0x08003465
 80034cc:	08003465 	.word	0x08003465
 80034d0:	080035ab 	.word	0x080035ab
 80034d4:	6833      	ldr	r3, [r6, #0]
 80034d6:	1d1a      	adds	r2, r3, #4
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6032      	str	r2, [r6, #0]
 80034dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80034e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80034e4:	2301      	movs	r3, #1
 80034e6:	e09d      	b.n	8003624 <_printf_i+0x1e8>
 80034e8:	6833      	ldr	r3, [r6, #0]
 80034ea:	6820      	ldr	r0, [r4, #0]
 80034ec:	1d19      	adds	r1, r3, #4
 80034ee:	6031      	str	r1, [r6, #0]
 80034f0:	0606      	lsls	r6, r0, #24
 80034f2:	d501      	bpl.n	80034f8 <_printf_i+0xbc>
 80034f4:	681d      	ldr	r5, [r3, #0]
 80034f6:	e003      	b.n	8003500 <_printf_i+0xc4>
 80034f8:	0645      	lsls	r5, r0, #25
 80034fa:	d5fb      	bpl.n	80034f4 <_printf_i+0xb8>
 80034fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003500:	2d00      	cmp	r5, #0
 8003502:	da03      	bge.n	800350c <_printf_i+0xd0>
 8003504:	232d      	movs	r3, #45	@ 0x2d
 8003506:	426d      	negs	r5, r5
 8003508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800350c:	4859      	ldr	r0, [pc, #356]	@ (8003674 <_printf_i+0x238>)
 800350e:	230a      	movs	r3, #10
 8003510:	e011      	b.n	8003536 <_printf_i+0xfa>
 8003512:	6821      	ldr	r1, [r4, #0]
 8003514:	6833      	ldr	r3, [r6, #0]
 8003516:	0608      	lsls	r0, r1, #24
 8003518:	f853 5b04 	ldr.w	r5, [r3], #4
 800351c:	d402      	bmi.n	8003524 <_printf_i+0xe8>
 800351e:	0649      	lsls	r1, r1, #25
 8003520:	bf48      	it	mi
 8003522:	b2ad      	uxthmi	r5, r5
 8003524:	2f6f      	cmp	r7, #111	@ 0x6f
 8003526:	4853      	ldr	r0, [pc, #332]	@ (8003674 <_printf_i+0x238>)
 8003528:	6033      	str	r3, [r6, #0]
 800352a:	bf14      	ite	ne
 800352c:	230a      	movne	r3, #10
 800352e:	2308      	moveq	r3, #8
 8003530:	2100      	movs	r1, #0
 8003532:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003536:	6866      	ldr	r6, [r4, #4]
 8003538:	60a6      	str	r6, [r4, #8]
 800353a:	2e00      	cmp	r6, #0
 800353c:	bfa2      	ittt	ge
 800353e:	6821      	ldrge	r1, [r4, #0]
 8003540:	f021 0104 	bicge.w	r1, r1, #4
 8003544:	6021      	strge	r1, [r4, #0]
 8003546:	b90d      	cbnz	r5, 800354c <_printf_i+0x110>
 8003548:	2e00      	cmp	r6, #0
 800354a:	d04b      	beq.n	80035e4 <_printf_i+0x1a8>
 800354c:	4616      	mov	r6, r2
 800354e:	fbb5 f1f3 	udiv	r1, r5, r3
 8003552:	fb03 5711 	mls	r7, r3, r1, r5
 8003556:	5dc7      	ldrb	r7, [r0, r7]
 8003558:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800355c:	462f      	mov	r7, r5
 800355e:	42bb      	cmp	r3, r7
 8003560:	460d      	mov	r5, r1
 8003562:	d9f4      	bls.n	800354e <_printf_i+0x112>
 8003564:	2b08      	cmp	r3, #8
 8003566:	d10b      	bne.n	8003580 <_printf_i+0x144>
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	07df      	lsls	r7, r3, #31
 800356c:	d508      	bpl.n	8003580 <_printf_i+0x144>
 800356e:	6923      	ldr	r3, [r4, #16]
 8003570:	6861      	ldr	r1, [r4, #4]
 8003572:	4299      	cmp	r1, r3
 8003574:	bfde      	ittt	le
 8003576:	2330      	movle	r3, #48	@ 0x30
 8003578:	f806 3c01 	strble.w	r3, [r6, #-1]
 800357c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003580:	1b92      	subs	r2, r2, r6
 8003582:	6122      	str	r2, [r4, #16]
 8003584:	f8cd a000 	str.w	sl, [sp]
 8003588:	464b      	mov	r3, r9
 800358a:	aa03      	add	r2, sp, #12
 800358c:	4621      	mov	r1, r4
 800358e:	4640      	mov	r0, r8
 8003590:	f7ff fee6 	bl	8003360 <_printf_common>
 8003594:	3001      	adds	r0, #1
 8003596:	d14a      	bne.n	800362e <_printf_i+0x1f2>
 8003598:	f04f 30ff 	mov.w	r0, #4294967295
 800359c:	b004      	add	sp, #16
 800359e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035a2:	6823      	ldr	r3, [r4, #0]
 80035a4:	f043 0320 	orr.w	r3, r3, #32
 80035a8:	6023      	str	r3, [r4, #0]
 80035aa:	4833      	ldr	r0, [pc, #204]	@ (8003678 <_printf_i+0x23c>)
 80035ac:	2778      	movs	r7, #120	@ 0x78
 80035ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	6831      	ldr	r1, [r6, #0]
 80035b6:	061f      	lsls	r7, r3, #24
 80035b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80035bc:	d402      	bmi.n	80035c4 <_printf_i+0x188>
 80035be:	065f      	lsls	r7, r3, #25
 80035c0:	bf48      	it	mi
 80035c2:	b2ad      	uxthmi	r5, r5
 80035c4:	6031      	str	r1, [r6, #0]
 80035c6:	07d9      	lsls	r1, r3, #31
 80035c8:	bf44      	itt	mi
 80035ca:	f043 0320 	orrmi.w	r3, r3, #32
 80035ce:	6023      	strmi	r3, [r4, #0]
 80035d0:	b11d      	cbz	r5, 80035da <_printf_i+0x19e>
 80035d2:	2310      	movs	r3, #16
 80035d4:	e7ac      	b.n	8003530 <_printf_i+0xf4>
 80035d6:	4827      	ldr	r0, [pc, #156]	@ (8003674 <_printf_i+0x238>)
 80035d8:	e7e9      	b.n	80035ae <_printf_i+0x172>
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	f023 0320 	bic.w	r3, r3, #32
 80035e0:	6023      	str	r3, [r4, #0]
 80035e2:	e7f6      	b.n	80035d2 <_printf_i+0x196>
 80035e4:	4616      	mov	r6, r2
 80035e6:	e7bd      	b.n	8003564 <_printf_i+0x128>
 80035e8:	6833      	ldr	r3, [r6, #0]
 80035ea:	6825      	ldr	r5, [r4, #0]
 80035ec:	6961      	ldr	r1, [r4, #20]
 80035ee:	1d18      	adds	r0, r3, #4
 80035f0:	6030      	str	r0, [r6, #0]
 80035f2:	062e      	lsls	r6, r5, #24
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	d501      	bpl.n	80035fc <_printf_i+0x1c0>
 80035f8:	6019      	str	r1, [r3, #0]
 80035fa:	e002      	b.n	8003602 <_printf_i+0x1c6>
 80035fc:	0668      	lsls	r0, r5, #25
 80035fe:	d5fb      	bpl.n	80035f8 <_printf_i+0x1bc>
 8003600:	8019      	strh	r1, [r3, #0]
 8003602:	2300      	movs	r3, #0
 8003604:	6123      	str	r3, [r4, #16]
 8003606:	4616      	mov	r6, r2
 8003608:	e7bc      	b.n	8003584 <_printf_i+0x148>
 800360a:	6833      	ldr	r3, [r6, #0]
 800360c:	1d1a      	adds	r2, r3, #4
 800360e:	6032      	str	r2, [r6, #0]
 8003610:	681e      	ldr	r6, [r3, #0]
 8003612:	6862      	ldr	r2, [r4, #4]
 8003614:	2100      	movs	r1, #0
 8003616:	4630      	mov	r0, r6
 8003618:	f7fc fde2 	bl	80001e0 <memchr>
 800361c:	b108      	cbz	r0, 8003622 <_printf_i+0x1e6>
 800361e:	1b80      	subs	r0, r0, r6
 8003620:	6060      	str	r0, [r4, #4]
 8003622:	6863      	ldr	r3, [r4, #4]
 8003624:	6123      	str	r3, [r4, #16]
 8003626:	2300      	movs	r3, #0
 8003628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800362c:	e7aa      	b.n	8003584 <_printf_i+0x148>
 800362e:	6923      	ldr	r3, [r4, #16]
 8003630:	4632      	mov	r2, r6
 8003632:	4649      	mov	r1, r9
 8003634:	4640      	mov	r0, r8
 8003636:	47d0      	blx	sl
 8003638:	3001      	adds	r0, #1
 800363a:	d0ad      	beq.n	8003598 <_printf_i+0x15c>
 800363c:	6823      	ldr	r3, [r4, #0]
 800363e:	079b      	lsls	r3, r3, #30
 8003640:	d413      	bmi.n	800366a <_printf_i+0x22e>
 8003642:	68e0      	ldr	r0, [r4, #12]
 8003644:	9b03      	ldr	r3, [sp, #12]
 8003646:	4298      	cmp	r0, r3
 8003648:	bfb8      	it	lt
 800364a:	4618      	movlt	r0, r3
 800364c:	e7a6      	b.n	800359c <_printf_i+0x160>
 800364e:	2301      	movs	r3, #1
 8003650:	4632      	mov	r2, r6
 8003652:	4649      	mov	r1, r9
 8003654:	4640      	mov	r0, r8
 8003656:	47d0      	blx	sl
 8003658:	3001      	adds	r0, #1
 800365a:	d09d      	beq.n	8003598 <_printf_i+0x15c>
 800365c:	3501      	adds	r5, #1
 800365e:	68e3      	ldr	r3, [r4, #12]
 8003660:	9903      	ldr	r1, [sp, #12]
 8003662:	1a5b      	subs	r3, r3, r1
 8003664:	42ab      	cmp	r3, r5
 8003666:	dcf2      	bgt.n	800364e <_printf_i+0x212>
 8003668:	e7eb      	b.n	8003642 <_printf_i+0x206>
 800366a:	2500      	movs	r5, #0
 800366c:	f104 0619 	add.w	r6, r4, #25
 8003670:	e7f5      	b.n	800365e <_printf_i+0x222>
 8003672:	bf00      	nop
 8003674:	080067a2 	.word	0x080067a2
 8003678:	080067b3 	.word	0x080067b3

0800367c <std>:
 800367c:	2300      	movs	r3, #0
 800367e:	b510      	push	{r4, lr}
 8003680:	4604      	mov	r4, r0
 8003682:	e9c0 3300 	strd	r3, r3, [r0]
 8003686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800368a:	6083      	str	r3, [r0, #8]
 800368c:	8181      	strh	r1, [r0, #12]
 800368e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003690:	81c2      	strh	r2, [r0, #14]
 8003692:	6183      	str	r3, [r0, #24]
 8003694:	4619      	mov	r1, r3
 8003696:	2208      	movs	r2, #8
 8003698:	305c      	adds	r0, #92	@ 0x5c
 800369a:	f000 f906 	bl	80038aa <memset>
 800369e:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <std+0x58>)
 80036a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80036a2:	4b0d      	ldr	r3, [pc, #52]	@ (80036d8 <std+0x5c>)
 80036a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80036a6:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <std+0x60>)
 80036a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80036aa:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <std+0x64>)
 80036ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80036ae:	4b0d      	ldr	r3, [pc, #52]	@ (80036e4 <std+0x68>)
 80036b0:	6224      	str	r4, [r4, #32]
 80036b2:	429c      	cmp	r4, r3
 80036b4:	d006      	beq.n	80036c4 <std+0x48>
 80036b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80036ba:	4294      	cmp	r4, r2
 80036bc:	d002      	beq.n	80036c4 <std+0x48>
 80036be:	33d0      	adds	r3, #208	@ 0xd0
 80036c0:	429c      	cmp	r4, r3
 80036c2:	d105      	bne.n	80036d0 <std+0x54>
 80036c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80036c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036cc:	f000 b96a 	b.w	80039a4 <__retarget_lock_init_recursive>
 80036d0:	bd10      	pop	{r4, pc}
 80036d2:	bf00      	nop
 80036d4:	08003825 	.word	0x08003825
 80036d8:	08003847 	.word	0x08003847
 80036dc:	0800387f 	.word	0x0800387f
 80036e0:	080038a3 	.word	0x080038a3
 80036e4:	20000250 	.word	0x20000250

080036e8 <stdio_exit_handler>:
 80036e8:	4a02      	ldr	r2, [pc, #8]	@ (80036f4 <stdio_exit_handler+0xc>)
 80036ea:	4903      	ldr	r1, [pc, #12]	@ (80036f8 <stdio_exit_handler+0x10>)
 80036ec:	4803      	ldr	r0, [pc, #12]	@ (80036fc <stdio_exit_handler+0x14>)
 80036ee:	f000 b869 	b.w	80037c4 <_fwalk_sglue>
 80036f2:	bf00      	nop
 80036f4:	20000014 	.word	0x20000014
 80036f8:	080052d9 	.word	0x080052d9
 80036fc:	20000024 	.word	0x20000024

08003700 <cleanup_stdio>:
 8003700:	6841      	ldr	r1, [r0, #4]
 8003702:	4b0c      	ldr	r3, [pc, #48]	@ (8003734 <cleanup_stdio+0x34>)
 8003704:	4299      	cmp	r1, r3
 8003706:	b510      	push	{r4, lr}
 8003708:	4604      	mov	r4, r0
 800370a:	d001      	beq.n	8003710 <cleanup_stdio+0x10>
 800370c:	f001 fde4 	bl	80052d8 <_fflush_r>
 8003710:	68a1      	ldr	r1, [r4, #8]
 8003712:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <cleanup_stdio+0x38>)
 8003714:	4299      	cmp	r1, r3
 8003716:	d002      	beq.n	800371e <cleanup_stdio+0x1e>
 8003718:	4620      	mov	r0, r4
 800371a:	f001 fddd 	bl	80052d8 <_fflush_r>
 800371e:	68e1      	ldr	r1, [r4, #12]
 8003720:	4b06      	ldr	r3, [pc, #24]	@ (800373c <cleanup_stdio+0x3c>)
 8003722:	4299      	cmp	r1, r3
 8003724:	d004      	beq.n	8003730 <cleanup_stdio+0x30>
 8003726:	4620      	mov	r0, r4
 8003728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800372c:	f001 bdd4 	b.w	80052d8 <_fflush_r>
 8003730:	bd10      	pop	{r4, pc}
 8003732:	bf00      	nop
 8003734:	20000250 	.word	0x20000250
 8003738:	200002b8 	.word	0x200002b8
 800373c:	20000320 	.word	0x20000320

08003740 <global_stdio_init.part.0>:
 8003740:	b510      	push	{r4, lr}
 8003742:	4b0b      	ldr	r3, [pc, #44]	@ (8003770 <global_stdio_init.part.0+0x30>)
 8003744:	4c0b      	ldr	r4, [pc, #44]	@ (8003774 <global_stdio_init.part.0+0x34>)
 8003746:	4a0c      	ldr	r2, [pc, #48]	@ (8003778 <global_stdio_init.part.0+0x38>)
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	4620      	mov	r0, r4
 800374c:	2200      	movs	r2, #0
 800374e:	2104      	movs	r1, #4
 8003750:	f7ff ff94 	bl	800367c <std>
 8003754:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003758:	2201      	movs	r2, #1
 800375a:	2109      	movs	r1, #9
 800375c:	f7ff ff8e 	bl	800367c <std>
 8003760:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003764:	2202      	movs	r2, #2
 8003766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800376a:	2112      	movs	r1, #18
 800376c:	f7ff bf86 	b.w	800367c <std>
 8003770:	20000388 	.word	0x20000388
 8003774:	20000250 	.word	0x20000250
 8003778:	080036e9 	.word	0x080036e9

0800377c <__sfp_lock_acquire>:
 800377c:	4801      	ldr	r0, [pc, #4]	@ (8003784 <__sfp_lock_acquire+0x8>)
 800377e:	f000 b912 	b.w	80039a6 <__retarget_lock_acquire_recursive>
 8003782:	bf00      	nop
 8003784:	20000391 	.word	0x20000391

08003788 <__sfp_lock_release>:
 8003788:	4801      	ldr	r0, [pc, #4]	@ (8003790 <__sfp_lock_release+0x8>)
 800378a:	f000 b90d 	b.w	80039a8 <__retarget_lock_release_recursive>
 800378e:	bf00      	nop
 8003790:	20000391 	.word	0x20000391

08003794 <__sinit>:
 8003794:	b510      	push	{r4, lr}
 8003796:	4604      	mov	r4, r0
 8003798:	f7ff fff0 	bl	800377c <__sfp_lock_acquire>
 800379c:	6a23      	ldr	r3, [r4, #32]
 800379e:	b11b      	cbz	r3, 80037a8 <__sinit+0x14>
 80037a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a4:	f7ff bff0 	b.w	8003788 <__sfp_lock_release>
 80037a8:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <__sinit+0x28>)
 80037aa:	6223      	str	r3, [r4, #32]
 80037ac:	4b04      	ldr	r3, [pc, #16]	@ (80037c0 <__sinit+0x2c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1f5      	bne.n	80037a0 <__sinit+0xc>
 80037b4:	f7ff ffc4 	bl	8003740 <global_stdio_init.part.0>
 80037b8:	e7f2      	b.n	80037a0 <__sinit+0xc>
 80037ba:	bf00      	nop
 80037bc:	08003701 	.word	0x08003701
 80037c0:	20000388 	.word	0x20000388

080037c4 <_fwalk_sglue>:
 80037c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037c8:	4607      	mov	r7, r0
 80037ca:	4688      	mov	r8, r1
 80037cc:	4614      	mov	r4, r2
 80037ce:	2600      	movs	r6, #0
 80037d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037d4:	f1b9 0901 	subs.w	r9, r9, #1
 80037d8:	d505      	bpl.n	80037e6 <_fwalk_sglue+0x22>
 80037da:	6824      	ldr	r4, [r4, #0]
 80037dc:	2c00      	cmp	r4, #0
 80037de:	d1f7      	bne.n	80037d0 <_fwalk_sglue+0xc>
 80037e0:	4630      	mov	r0, r6
 80037e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037e6:	89ab      	ldrh	r3, [r5, #12]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d907      	bls.n	80037fc <_fwalk_sglue+0x38>
 80037ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037f0:	3301      	adds	r3, #1
 80037f2:	d003      	beq.n	80037fc <_fwalk_sglue+0x38>
 80037f4:	4629      	mov	r1, r5
 80037f6:	4638      	mov	r0, r7
 80037f8:	47c0      	blx	r8
 80037fa:	4306      	orrs	r6, r0
 80037fc:	3568      	adds	r5, #104	@ 0x68
 80037fe:	e7e9      	b.n	80037d4 <_fwalk_sglue+0x10>

08003800 <iprintf>:
 8003800:	b40f      	push	{r0, r1, r2, r3}
 8003802:	b507      	push	{r0, r1, r2, lr}
 8003804:	4906      	ldr	r1, [pc, #24]	@ (8003820 <iprintf+0x20>)
 8003806:	ab04      	add	r3, sp, #16
 8003808:	6808      	ldr	r0, [r1, #0]
 800380a:	f853 2b04 	ldr.w	r2, [r3], #4
 800380e:	6881      	ldr	r1, [r0, #8]
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	f001 fbc5 	bl	8004fa0 <_vfiprintf_r>
 8003816:	b003      	add	sp, #12
 8003818:	f85d eb04 	ldr.w	lr, [sp], #4
 800381c:	b004      	add	sp, #16
 800381e:	4770      	bx	lr
 8003820:	20000020 	.word	0x20000020

08003824 <__sread>:
 8003824:	b510      	push	{r4, lr}
 8003826:	460c      	mov	r4, r1
 8003828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800382c:	f000 f86c 	bl	8003908 <_read_r>
 8003830:	2800      	cmp	r0, #0
 8003832:	bfab      	itete	ge
 8003834:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003836:	89a3      	ldrhlt	r3, [r4, #12]
 8003838:	181b      	addge	r3, r3, r0
 800383a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800383e:	bfac      	ite	ge
 8003840:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003842:	81a3      	strhlt	r3, [r4, #12]
 8003844:	bd10      	pop	{r4, pc}

08003846 <__swrite>:
 8003846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800384a:	461f      	mov	r7, r3
 800384c:	898b      	ldrh	r3, [r1, #12]
 800384e:	05db      	lsls	r3, r3, #23
 8003850:	4605      	mov	r5, r0
 8003852:	460c      	mov	r4, r1
 8003854:	4616      	mov	r6, r2
 8003856:	d505      	bpl.n	8003864 <__swrite+0x1e>
 8003858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800385c:	2302      	movs	r3, #2
 800385e:	2200      	movs	r2, #0
 8003860:	f000 f840 	bl	80038e4 <_lseek_r>
 8003864:	89a3      	ldrh	r3, [r4, #12]
 8003866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800386a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800386e:	81a3      	strh	r3, [r4, #12]
 8003870:	4632      	mov	r2, r6
 8003872:	463b      	mov	r3, r7
 8003874:	4628      	mov	r0, r5
 8003876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800387a:	f000 b857 	b.w	800392c <_write_r>

0800387e <__sseek>:
 800387e:	b510      	push	{r4, lr}
 8003880:	460c      	mov	r4, r1
 8003882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003886:	f000 f82d 	bl	80038e4 <_lseek_r>
 800388a:	1c43      	adds	r3, r0, #1
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	bf15      	itete	ne
 8003890:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003892:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003896:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800389a:	81a3      	strheq	r3, [r4, #12]
 800389c:	bf18      	it	ne
 800389e:	81a3      	strhne	r3, [r4, #12]
 80038a0:	bd10      	pop	{r4, pc}

080038a2 <__sclose>:
 80038a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a6:	f000 b80d 	b.w	80038c4 <_close_r>

080038aa <memset>:
 80038aa:	4402      	add	r2, r0
 80038ac:	4603      	mov	r3, r0
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d100      	bne.n	80038b4 <memset+0xa>
 80038b2:	4770      	bx	lr
 80038b4:	f803 1b01 	strb.w	r1, [r3], #1
 80038b8:	e7f9      	b.n	80038ae <memset+0x4>
	...

080038bc <_localeconv_r>:
 80038bc:	4800      	ldr	r0, [pc, #0]	@ (80038c0 <_localeconv_r+0x4>)
 80038be:	4770      	bx	lr
 80038c0:	20000160 	.word	0x20000160

080038c4 <_close_r>:
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4d06      	ldr	r5, [pc, #24]	@ (80038e0 <_close_r+0x1c>)
 80038c8:	2300      	movs	r3, #0
 80038ca:	4604      	mov	r4, r0
 80038cc:	4608      	mov	r0, r1
 80038ce:	602b      	str	r3, [r5, #0]
 80038d0:	f7fd fddb 	bl	800148a <_close>
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	d102      	bne.n	80038de <_close_r+0x1a>
 80038d8:	682b      	ldr	r3, [r5, #0]
 80038da:	b103      	cbz	r3, 80038de <_close_r+0x1a>
 80038dc:	6023      	str	r3, [r4, #0]
 80038de:	bd38      	pop	{r3, r4, r5, pc}
 80038e0:	2000038c 	.word	0x2000038c

080038e4 <_lseek_r>:
 80038e4:	b538      	push	{r3, r4, r5, lr}
 80038e6:	4d07      	ldr	r5, [pc, #28]	@ (8003904 <_lseek_r+0x20>)
 80038e8:	4604      	mov	r4, r0
 80038ea:	4608      	mov	r0, r1
 80038ec:	4611      	mov	r1, r2
 80038ee:	2200      	movs	r2, #0
 80038f0:	602a      	str	r2, [r5, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	f7fd fdf0 	bl	80014d8 <_lseek>
 80038f8:	1c43      	adds	r3, r0, #1
 80038fa:	d102      	bne.n	8003902 <_lseek_r+0x1e>
 80038fc:	682b      	ldr	r3, [r5, #0]
 80038fe:	b103      	cbz	r3, 8003902 <_lseek_r+0x1e>
 8003900:	6023      	str	r3, [r4, #0]
 8003902:	bd38      	pop	{r3, r4, r5, pc}
 8003904:	2000038c 	.word	0x2000038c

08003908 <_read_r>:
 8003908:	b538      	push	{r3, r4, r5, lr}
 800390a:	4d07      	ldr	r5, [pc, #28]	@ (8003928 <_read_r+0x20>)
 800390c:	4604      	mov	r4, r0
 800390e:	4608      	mov	r0, r1
 8003910:	4611      	mov	r1, r2
 8003912:	2200      	movs	r2, #0
 8003914:	602a      	str	r2, [r5, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	f7fd fd9a 	bl	8001450 <_read>
 800391c:	1c43      	adds	r3, r0, #1
 800391e:	d102      	bne.n	8003926 <_read_r+0x1e>
 8003920:	682b      	ldr	r3, [r5, #0]
 8003922:	b103      	cbz	r3, 8003926 <_read_r+0x1e>
 8003924:	6023      	str	r3, [r4, #0]
 8003926:	bd38      	pop	{r3, r4, r5, pc}
 8003928:	2000038c 	.word	0x2000038c

0800392c <_write_r>:
 800392c:	b538      	push	{r3, r4, r5, lr}
 800392e:	4d07      	ldr	r5, [pc, #28]	@ (800394c <_write_r+0x20>)
 8003930:	4604      	mov	r4, r0
 8003932:	4608      	mov	r0, r1
 8003934:	4611      	mov	r1, r2
 8003936:	2200      	movs	r2, #0
 8003938:	602a      	str	r2, [r5, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	f7fd fb04 	bl	8000f48 <_write>
 8003940:	1c43      	adds	r3, r0, #1
 8003942:	d102      	bne.n	800394a <_write_r+0x1e>
 8003944:	682b      	ldr	r3, [r5, #0]
 8003946:	b103      	cbz	r3, 800394a <_write_r+0x1e>
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	bd38      	pop	{r3, r4, r5, pc}
 800394c:	2000038c 	.word	0x2000038c

08003950 <__errno>:
 8003950:	4b01      	ldr	r3, [pc, #4]	@ (8003958 <__errno+0x8>)
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000020 	.word	0x20000020

0800395c <__libc_init_array>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	4d0d      	ldr	r5, [pc, #52]	@ (8003994 <__libc_init_array+0x38>)
 8003960:	4c0d      	ldr	r4, [pc, #52]	@ (8003998 <__libc_init_array+0x3c>)
 8003962:	1b64      	subs	r4, r4, r5
 8003964:	10a4      	asrs	r4, r4, #2
 8003966:	2600      	movs	r6, #0
 8003968:	42a6      	cmp	r6, r4
 800396a:	d109      	bne.n	8003980 <__libc_init_array+0x24>
 800396c:	4d0b      	ldr	r5, [pc, #44]	@ (800399c <__libc_init_array+0x40>)
 800396e:	4c0c      	ldr	r4, [pc, #48]	@ (80039a0 <__libc_init_array+0x44>)
 8003970:	f002 fef2 	bl	8006758 <_init>
 8003974:	1b64      	subs	r4, r4, r5
 8003976:	10a4      	asrs	r4, r4, #2
 8003978:	2600      	movs	r6, #0
 800397a:	42a6      	cmp	r6, r4
 800397c:	d105      	bne.n	800398a <__libc_init_array+0x2e>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	f855 3b04 	ldr.w	r3, [r5], #4
 8003984:	4798      	blx	r3
 8003986:	3601      	adds	r6, #1
 8003988:	e7ee      	b.n	8003968 <__libc_init_array+0xc>
 800398a:	f855 3b04 	ldr.w	r3, [r5], #4
 800398e:	4798      	blx	r3
 8003990:	3601      	adds	r6, #1
 8003992:	e7f2      	b.n	800397a <__libc_init_array+0x1e>
 8003994:	08006ce0 	.word	0x08006ce0
 8003998:	08006ce0 	.word	0x08006ce0
 800399c:	08006ce0 	.word	0x08006ce0
 80039a0:	08006ce4 	.word	0x08006ce4

080039a4 <__retarget_lock_init_recursive>:
 80039a4:	4770      	bx	lr

080039a6 <__retarget_lock_acquire_recursive>:
 80039a6:	4770      	bx	lr

080039a8 <__retarget_lock_release_recursive>:
 80039a8:	4770      	bx	lr

080039aa <quorem>:
 80039aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ae:	6903      	ldr	r3, [r0, #16]
 80039b0:	690c      	ldr	r4, [r1, #16]
 80039b2:	42a3      	cmp	r3, r4
 80039b4:	4607      	mov	r7, r0
 80039b6:	db7e      	blt.n	8003ab6 <quorem+0x10c>
 80039b8:	3c01      	subs	r4, #1
 80039ba:	f101 0814 	add.w	r8, r1, #20
 80039be:	00a3      	lsls	r3, r4, #2
 80039c0:	f100 0514 	add.w	r5, r0, #20
 80039c4:	9300      	str	r3, [sp, #0]
 80039c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80039ca:	9301      	str	r3, [sp, #4]
 80039cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80039d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80039d4:	3301      	adds	r3, #1
 80039d6:	429a      	cmp	r2, r3
 80039d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80039dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80039e0:	d32e      	bcc.n	8003a40 <quorem+0x96>
 80039e2:	f04f 0a00 	mov.w	sl, #0
 80039e6:	46c4      	mov	ip, r8
 80039e8:	46ae      	mov	lr, r5
 80039ea:	46d3      	mov	fp, sl
 80039ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 80039f0:	b298      	uxth	r0, r3
 80039f2:	fb06 a000 	mla	r0, r6, r0, sl
 80039f6:	0c02      	lsrs	r2, r0, #16
 80039f8:	0c1b      	lsrs	r3, r3, #16
 80039fa:	fb06 2303 	mla	r3, r6, r3, r2
 80039fe:	f8de 2000 	ldr.w	r2, [lr]
 8003a02:	b280      	uxth	r0, r0
 8003a04:	b292      	uxth	r2, r2
 8003a06:	1a12      	subs	r2, r2, r0
 8003a08:	445a      	add	r2, fp
 8003a0a:	f8de 0000 	ldr.w	r0, [lr]
 8003a0e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003a18:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003a1c:	b292      	uxth	r2, r2
 8003a1e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003a22:	45e1      	cmp	r9, ip
 8003a24:	f84e 2b04 	str.w	r2, [lr], #4
 8003a28:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003a2c:	d2de      	bcs.n	80039ec <quorem+0x42>
 8003a2e:	9b00      	ldr	r3, [sp, #0]
 8003a30:	58eb      	ldr	r3, [r5, r3]
 8003a32:	b92b      	cbnz	r3, 8003a40 <quorem+0x96>
 8003a34:	9b01      	ldr	r3, [sp, #4]
 8003a36:	3b04      	subs	r3, #4
 8003a38:	429d      	cmp	r5, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	d32f      	bcc.n	8003a9e <quorem+0xf4>
 8003a3e:	613c      	str	r4, [r7, #16]
 8003a40:	4638      	mov	r0, r7
 8003a42:	f001 f97b 	bl	8004d3c <__mcmp>
 8003a46:	2800      	cmp	r0, #0
 8003a48:	db25      	blt.n	8003a96 <quorem+0xec>
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f858 2b04 	ldr.w	r2, [r8], #4
 8003a52:	f8d1 c000 	ldr.w	ip, [r1]
 8003a56:	fa1f fe82 	uxth.w	lr, r2
 8003a5a:	fa1f f38c 	uxth.w	r3, ip
 8003a5e:	eba3 030e 	sub.w	r3, r3, lr
 8003a62:	4403      	add	r3, r0
 8003a64:	0c12      	lsrs	r2, r2, #16
 8003a66:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003a6a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a74:	45c1      	cmp	r9, r8
 8003a76:	f841 3b04 	str.w	r3, [r1], #4
 8003a7a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003a7e:	d2e6      	bcs.n	8003a4e <quorem+0xa4>
 8003a80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003a84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003a88:	b922      	cbnz	r2, 8003a94 <quorem+0xea>
 8003a8a:	3b04      	subs	r3, #4
 8003a8c:	429d      	cmp	r5, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	d30b      	bcc.n	8003aaa <quorem+0x100>
 8003a92:	613c      	str	r4, [r7, #16]
 8003a94:	3601      	adds	r6, #1
 8003a96:	4630      	mov	r0, r6
 8003a98:	b003      	add	sp, #12
 8003a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9e:	6812      	ldr	r2, [r2, #0]
 8003aa0:	3b04      	subs	r3, #4
 8003aa2:	2a00      	cmp	r2, #0
 8003aa4:	d1cb      	bne.n	8003a3e <quorem+0x94>
 8003aa6:	3c01      	subs	r4, #1
 8003aa8:	e7c6      	b.n	8003a38 <quorem+0x8e>
 8003aaa:	6812      	ldr	r2, [r2, #0]
 8003aac:	3b04      	subs	r3, #4
 8003aae:	2a00      	cmp	r2, #0
 8003ab0:	d1ef      	bne.n	8003a92 <quorem+0xe8>
 8003ab2:	3c01      	subs	r4, #1
 8003ab4:	e7ea      	b.n	8003a8c <quorem+0xe2>
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	e7ee      	b.n	8003a98 <quorem+0xee>
 8003aba:	0000      	movs	r0, r0
 8003abc:	0000      	movs	r0, r0
	...

08003ac0 <_dtoa_r>:
 8003ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ac4:	69c7      	ldr	r7, [r0, #28]
 8003ac6:	b099      	sub	sp, #100	@ 0x64
 8003ac8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003acc:	ec55 4b10 	vmov	r4, r5, d0
 8003ad0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003ad2:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ad4:	4683      	mov	fp, r0
 8003ad6:	920e      	str	r2, [sp, #56]	@ 0x38
 8003ad8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003ada:	b97f      	cbnz	r7, 8003afc <_dtoa_r+0x3c>
 8003adc:	2010      	movs	r0, #16
 8003ade:	f000 fdfd 	bl	80046dc <malloc>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	f8cb 001c 	str.w	r0, [fp, #28]
 8003ae8:	b920      	cbnz	r0, 8003af4 <_dtoa_r+0x34>
 8003aea:	4ba7      	ldr	r3, [pc, #668]	@ (8003d88 <_dtoa_r+0x2c8>)
 8003aec:	21ef      	movs	r1, #239	@ 0xef
 8003aee:	48a7      	ldr	r0, [pc, #668]	@ (8003d8c <_dtoa_r+0x2cc>)
 8003af0:	f001 fccc 	bl	800548c <__assert_func>
 8003af4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003af8:	6007      	str	r7, [r0, #0]
 8003afa:	60c7      	str	r7, [r0, #12]
 8003afc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003b00:	6819      	ldr	r1, [r3, #0]
 8003b02:	b159      	cbz	r1, 8003b1c <_dtoa_r+0x5c>
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	604a      	str	r2, [r1, #4]
 8003b08:	2301      	movs	r3, #1
 8003b0a:	4093      	lsls	r3, r2
 8003b0c:	608b      	str	r3, [r1, #8]
 8003b0e:	4658      	mov	r0, fp
 8003b10:	f000 feda 	bl	80048c8 <_Bfree>
 8003b14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	1e2b      	subs	r3, r5, #0
 8003b1e:	bfb9      	ittee	lt
 8003b20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003b24:	9303      	strlt	r3, [sp, #12]
 8003b26:	2300      	movge	r3, #0
 8003b28:	6033      	strge	r3, [r6, #0]
 8003b2a:	9f03      	ldr	r7, [sp, #12]
 8003b2c:	4b98      	ldr	r3, [pc, #608]	@ (8003d90 <_dtoa_r+0x2d0>)
 8003b2e:	bfbc      	itt	lt
 8003b30:	2201      	movlt	r2, #1
 8003b32:	6032      	strlt	r2, [r6, #0]
 8003b34:	43bb      	bics	r3, r7
 8003b36:	d112      	bne.n	8003b5e <_dtoa_r+0x9e>
 8003b38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003b3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003b44:	4323      	orrs	r3, r4
 8003b46:	f000 854d 	beq.w	80045e4 <_dtoa_r+0xb24>
 8003b4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003b4c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003da4 <_dtoa_r+0x2e4>
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 854f 	beq.w	80045f4 <_dtoa_r+0xb34>
 8003b56:	f10a 0303 	add.w	r3, sl, #3
 8003b5a:	f000 bd49 	b.w	80045f0 <_dtoa_r+0xb30>
 8003b5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003b62:	2200      	movs	r2, #0
 8003b64:	ec51 0b17 	vmov	r0, r1, d7
 8003b68:	2300      	movs	r3, #0
 8003b6a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8003b6e:	f7fc ffb3 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b72:	4680      	mov	r8, r0
 8003b74:	b158      	cbz	r0, 8003b8e <_dtoa_r+0xce>
 8003b76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003b78:	2301      	movs	r3, #1
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003b7e:	b113      	cbz	r3, 8003b86 <_dtoa_r+0xc6>
 8003b80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003b82:	4b84      	ldr	r3, [pc, #528]	@ (8003d94 <_dtoa_r+0x2d4>)
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003da8 <_dtoa_r+0x2e8>
 8003b8a:	f000 bd33 	b.w	80045f4 <_dtoa_r+0xb34>
 8003b8e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003b92:	aa16      	add	r2, sp, #88	@ 0x58
 8003b94:	a917      	add	r1, sp, #92	@ 0x5c
 8003b96:	4658      	mov	r0, fp
 8003b98:	f001 f980 	bl	8004e9c <__d2b>
 8003b9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003ba0:	4681      	mov	r9, r0
 8003ba2:	2e00      	cmp	r6, #0
 8003ba4:	d077      	beq.n	8003c96 <_dtoa_r+0x1d6>
 8003ba6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ba8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8003bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003bb4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003bb8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003bbc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	4b74      	ldr	r3, [pc, #464]	@ (8003d98 <_dtoa_r+0x2d8>)
 8003bc6:	f7fc fb67 	bl	8000298 <__aeabi_dsub>
 8003bca:	a369      	add	r3, pc, #420	@ (adr r3, 8003d70 <_dtoa_r+0x2b0>)
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f7fc fd1a 	bl	8000608 <__aeabi_dmul>
 8003bd4:	a368      	add	r3, pc, #416	@ (adr r3, 8003d78 <_dtoa_r+0x2b8>)
 8003bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bda:	f7fc fb5f 	bl	800029c <__adddf3>
 8003bde:	4604      	mov	r4, r0
 8003be0:	4630      	mov	r0, r6
 8003be2:	460d      	mov	r5, r1
 8003be4:	f7fc fca6 	bl	8000534 <__aeabi_i2d>
 8003be8:	a365      	add	r3, pc, #404	@ (adr r3, 8003d80 <_dtoa_r+0x2c0>)
 8003bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bee:	f7fc fd0b 	bl	8000608 <__aeabi_dmul>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	f7fc fb4f 	bl	800029c <__adddf3>
 8003bfe:	4604      	mov	r4, r0
 8003c00:	460d      	mov	r5, r1
 8003c02:	f7fc ffb1 	bl	8000b68 <__aeabi_d2iz>
 8003c06:	2200      	movs	r2, #0
 8003c08:	4607      	mov	r7, r0
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	4629      	mov	r1, r5
 8003c10:	f7fc ff6c 	bl	8000aec <__aeabi_dcmplt>
 8003c14:	b140      	cbz	r0, 8003c28 <_dtoa_r+0x168>
 8003c16:	4638      	mov	r0, r7
 8003c18:	f7fc fc8c 	bl	8000534 <__aeabi_i2d>
 8003c1c:	4622      	mov	r2, r4
 8003c1e:	462b      	mov	r3, r5
 8003c20:	f7fc ff5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c24:	b900      	cbnz	r0, 8003c28 <_dtoa_r+0x168>
 8003c26:	3f01      	subs	r7, #1
 8003c28:	2f16      	cmp	r7, #22
 8003c2a:	d851      	bhi.n	8003cd0 <_dtoa_r+0x210>
 8003c2c:	4b5b      	ldr	r3, [pc, #364]	@ (8003d9c <_dtoa_r+0x2dc>)
 8003c2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003c3a:	f7fc ff57 	bl	8000aec <__aeabi_dcmplt>
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d048      	beq.n	8003cd4 <_dtoa_r+0x214>
 8003c42:	3f01      	subs	r7, #1
 8003c44:	2300      	movs	r3, #0
 8003c46:	9312      	str	r3, [sp, #72]	@ 0x48
 8003c48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003c4a:	1b9b      	subs	r3, r3, r6
 8003c4c:	1e5a      	subs	r2, r3, #1
 8003c4e:	bf44      	itt	mi
 8003c50:	f1c3 0801 	rsbmi	r8, r3, #1
 8003c54:	2300      	movmi	r3, #0
 8003c56:	9208      	str	r2, [sp, #32]
 8003c58:	bf54      	ite	pl
 8003c5a:	f04f 0800 	movpl.w	r8, #0
 8003c5e:	9308      	strmi	r3, [sp, #32]
 8003c60:	2f00      	cmp	r7, #0
 8003c62:	db39      	blt.n	8003cd8 <_dtoa_r+0x218>
 8003c64:	9b08      	ldr	r3, [sp, #32]
 8003c66:	970f      	str	r7, [sp, #60]	@ 0x3c
 8003c68:	443b      	add	r3, r7
 8003c6a:	9308      	str	r3, [sp, #32]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c72:	2b09      	cmp	r3, #9
 8003c74:	d864      	bhi.n	8003d40 <_dtoa_r+0x280>
 8003c76:	2b05      	cmp	r3, #5
 8003c78:	bfc4      	itt	gt
 8003c7a:	3b04      	subgt	r3, #4
 8003c7c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8003c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c80:	f1a3 0302 	sub.w	r3, r3, #2
 8003c84:	bfcc      	ite	gt
 8003c86:	2400      	movgt	r4, #0
 8003c88:	2401      	movle	r4, #1
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d863      	bhi.n	8003d56 <_dtoa_r+0x296>
 8003c8e:	e8df f003 	tbb	[pc, r3]
 8003c92:	372a      	.short	0x372a
 8003c94:	5535      	.short	0x5535
 8003c96:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003c9a:	441e      	add	r6, r3
 8003c9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	bfc1      	itttt	gt
 8003ca4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003ca8:	409f      	lslgt	r7, r3
 8003caa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003cae:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003cb2:	bfd6      	itet	le
 8003cb4:	f1c3 0320 	rsble	r3, r3, #32
 8003cb8:	ea47 0003 	orrgt.w	r0, r7, r3
 8003cbc:	fa04 f003 	lslle.w	r0, r4, r3
 8003cc0:	f7fc fc28 	bl	8000514 <__aeabi_ui2d>
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003cca:	3e01      	subs	r6, #1
 8003ccc:	9214      	str	r2, [sp, #80]	@ 0x50
 8003cce:	e777      	b.n	8003bc0 <_dtoa_r+0x100>
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e7b8      	b.n	8003c46 <_dtoa_r+0x186>
 8003cd4:	9012      	str	r0, [sp, #72]	@ 0x48
 8003cd6:	e7b7      	b.n	8003c48 <_dtoa_r+0x188>
 8003cd8:	427b      	negs	r3, r7
 8003cda:	930a      	str	r3, [sp, #40]	@ 0x28
 8003cdc:	2300      	movs	r3, #0
 8003cde:	eba8 0807 	sub.w	r8, r8, r7
 8003ce2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003ce4:	e7c4      	b.n	8003c70 <_dtoa_r+0x1b0>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003cea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	dc35      	bgt.n	8003d5c <_dtoa_r+0x29c>
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	9307      	str	r3, [sp, #28]
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	920e      	str	r2, [sp, #56]	@ 0x38
 8003cfa:	e00b      	b.n	8003d14 <_dtoa_r+0x254>
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e7f3      	b.n	8003ce8 <_dtoa_r+0x228>
 8003d00:	2300      	movs	r3, #0
 8003d02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	9307      	str	r3, [sp, #28]
 8003d10:	bfb8      	it	lt
 8003d12:	2301      	movlt	r3, #1
 8003d14:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003d18:	2100      	movs	r1, #0
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	f102 0514 	add.w	r5, r2, #20
 8003d20:	429d      	cmp	r5, r3
 8003d22:	d91f      	bls.n	8003d64 <_dtoa_r+0x2a4>
 8003d24:	6041      	str	r1, [r0, #4]
 8003d26:	4658      	mov	r0, fp
 8003d28:	f000 fd8e 	bl	8004848 <_Balloc>
 8003d2c:	4682      	mov	sl, r0
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	d13c      	bne.n	8003dac <_dtoa_r+0x2ec>
 8003d32:	4b1b      	ldr	r3, [pc, #108]	@ (8003da0 <_dtoa_r+0x2e0>)
 8003d34:	4602      	mov	r2, r0
 8003d36:	f240 11af 	movw	r1, #431	@ 0x1af
 8003d3a:	e6d8      	b.n	8003aee <_dtoa_r+0x2e>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e7e0      	b.n	8003d02 <_dtoa_r+0x242>
 8003d40:	2401      	movs	r4, #1
 8003d42:	2300      	movs	r3, #0
 8003d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d46:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003d48:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	9307      	str	r3, [sp, #28]
 8003d50:	2200      	movs	r2, #0
 8003d52:	2312      	movs	r3, #18
 8003d54:	e7d0      	b.n	8003cf8 <_dtoa_r+0x238>
 8003d56:	2301      	movs	r3, #1
 8003d58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003d5a:	e7f5      	b.n	8003d48 <_dtoa_r+0x288>
 8003d5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	9307      	str	r3, [sp, #28]
 8003d62:	e7d7      	b.n	8003d14 <_dtoa_r+0x254>
 8003d64:	3101      	adds	r1, #1
 8003d66:	0052      	lsls	r2, r2, #1
 8003d68:	e7d8      	b.n	8003d1c <_dtoa_r+0x25c>
 8003d6a:	bf00      	nop
 8003d6c:	f3af 8000 	nop.w
 8003d70:	636f4361 	.word	0x636f4361
 8003d74:	3fd287a7 	.word	0x3fd287a7
 8003d78:	8b60c8b3 	.word	0x8b60c8b3
 8003d7c:	3fc68a28 	.word	0x3fc68a28
 8003d80:	509f79fb 	.word	0x509f79fb
 8003d84:	3fd34413 	.word	0x3fd34413
 8003d88:	080067d1 	.word	0x080067d1
 8003d8c:	080067e8 	.word	0x080067e8
 8003d90:	7ff00000 	.word	0x7ff00000
 8003d94:	080067a1 	.word	0x080067a1
 8003d98:	3ff80000 	.word	0x3ff80000
 8003d9c:	080068e0 	.word	0x080068e0
 8003da0:	08006840 	.word	0x08006840
 8003da4:	080067cd 	.word	0x080067cd
 8003da8:	080067a0 	.word	0x080067a0
 8003dac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003db0:	6018      	str	r0, [r3, #0]
 8003db2:	9b07      	ldr	r3, [sp, #28]
 8003db4:	2b0e      	cmp	r3, #14
 8003db6:	f200 80a4 	bhi.w	8003f02 <_dtoa_r+0x442>
 8003dba:	2c00      	cmp	r4, #0
 8003dbc:	f000 80a1 	beq.w	8003f02 <_dtoa_r+0x442>
 8003dc0:	2f00      	cmp	r7, #0
 8003dc2:	dd33      	ble.n	8003e2c <_dtoa_r+0x36c>
 8003dc4:	4bad      	ldr	r3, [pc, #692]	@ (800407c <_dtoa_r+0x5bc>)
 8003dc6:	f007 020f 	and.w	r2, r7, #15
 8003dca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003dce:	ed93 7b00 	vldr	d7, [r3]
 8003dd2:	05f8      	lsls	r0, r7, #23
 8003dd4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003dd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003ddc:	d516      	bpl.n	8003e0c <_dtoa_r+0x34c>
 8003dde:	4ba8      	ldr	r3, [pc, #672]	@ (8004080 <_dtoa_r+0x5c0>)
 8003de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003de4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003de8:	f7fc fd38 	bl	800085c <__aeabi_ddiv>
 8003dec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003df0:	f004 040f 	and.w	r4, r4, #15
 8003df4:	2603      	movs	r6, #3
 8003df6:	4da2      	ldr	r5, [pc, #648]	@ (8004080 <_dtoa_r+0x5c0>)
 8003df8:	b954      	cbnz	r4, 8003e10 <_dtoa_r+0x350>
 8003dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e02:	f7fc fd2b 	bl	800085c <__aeabi_ddiv>
 8003e06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e0a:	e028      	b.n	8003e5e <_dtoa_r+0x39e>
 8003e0c:	2602      	movs	r6, #2
 8003e0e:	e7f2      	b.n	8003df6 <_dtoa_r+0x336>
 8003e10:	07e1      	lsls	r1, r4, #31
 8003e12:	d508      	bpl.n	8003e26 <_dtoa_r+0x366>
 8003e14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e1c:	f7fc fbf4 	bl	8000608 <__aeabi_dmul>
 8003e20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003e24:	3601      	adds	r6, #1
 8003e26:	1064      	asrs	r4, r4, #1
 8003e28:	3508      	adds	r5, #8
 8003e2a:	e7e5      	b.n	8003df8 <_dtoa_r+0x338>
 8003e2c:	f000 80d2 	beq.w	8003fd4 <_dtoa_r+0x514>
 8003e30:	427c      	negs	r4, r7
 8003e32:	4b92      	ldr	r3, [pc, #584]	@ (800407c <_dtoa_r+0x5bc>)
 8003e34:	4d92      	ldr	r5, [pc, #584]	@ (8004080 <_dtoa_r+0x5c0>)
 8003e36:	f004 020f 	and.w	r2, r4, #15
 8003e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003e46:	f7fc fbdf 	bl	8000608 <__aeabi_dmul>
 8003e4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e4e:	1124      	asrs	r4, r4, #4
 8003e50:	2300      	movs	r3, #0
 8003e52:	2602      	movs	r6, #2
 8003e54:	2c00      	cmp	r4, #0
 8003e56:	f040 80b2 	bne.w	8003fbe <_dtoa_r+0x4fe>
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1d3      	bne.n	8003e06 <_dtoa_r+0x346>
 8003e5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003e60:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80b7 	beq.w	8003fd8 <_dtoa_r+0x518>
 8003e6a:	4b86      	ldr	r3, [pc, #536]	@ (8004084 <_dtoa_r+0x5c4>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	4620      	mov	r0, r4
 8003e70:	4629      	mov	r1, r5
 8003e72:	f7fc fe3b 	bl	8000aec <__aeabi_dcmplt>
 8003e76:	2800      	cmp	r0, #0
 8003e78:	f000 80ae 	beq.w	8003fd8 <_dtoa_r+0x518>
 8003e7c:	9b07      	ldr	r3, [sp, #28]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 80aa 	beq.w	8003fd8 <_dtoa_r+0x518>
 8003e84:	9b00      	ldr	r3, [sp, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	dd37      	ble.n	8003efa <_dtoa_r+0x43a>
 8003e8a:	1e7b      	subs	r3, r7, #1
 8003e8c:	9304      	str	r3, [sp, #16]
 8003e8e:	4620      	mov	r0, r4
 8003e90:	4b7d      	ldr	r3, [pc, #500]	@ (8004088 <_dtoa_r+0x5c8>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	4629      	mov	r1, r5
 8003e96:	f7fc fbb7 	bl	8000608 <__aeabi_dmul>
 8003e9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e9e:	9c00      	ldr	r4, [sp, #0]
 8003ea0:	3601      	adds	r6, #1
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f7fc fb46 	bl	8000534 <__aeabi_i2d>
 8003ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003eac:	f7fc fbac 	bl	8000608 <__aeabi_dmul>
 8003eb0:	4b76      	ldr	r3, [pc, #472]	@ (800408c <_dtoa_r+0x5cc>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f7fc f9f2 	bl	800029c <__adddf3>
 8003eb8:	4605      	mov	r5, r0
 8003eba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003ebe:	2c00      	cmp	r4, #0
 8003ec0:	f040 808d 	bne.w	8003fde <_dtoa_r+0x51e>
 8003ec4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ec8:	4b71      	ldr	r3, [pc, #452]	@ (8004090 <_dtoa_r+0x5d0>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f7fc f9e4 	bl	8000298 <__aeabi_dsub>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003ed8:	462a      	mov	r2, r5
 8003eda:	4633      	mov	r3, r6
 8003edc:	f7fc fe24 	bl	8000b28 <__aeabi_dcmpgt>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	f040 828b 	bne.w	80043fc <_dtoa_r+0x93c>
 8003ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003eea:	462a      	mov	r2, r5
 8003eec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003ef0:	f7fc fdfc 	bl	8000aec <__aeabi_dcmplt>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	f040 8128 	bne.w	800414a <_dtoa_r+0x68a>
 8003efa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003efe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003f02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f2c0 815a 	blt.w	80041be <_dtoa_r+0x6fe>
 8003f0a:	2f0e      	cmp	r7, #14
 8003f0c:	f300 8157 	bgt.w	80041be <_dtoa_r+0x6fe>
 8003f10:	4b5a      	ldr	r3, [pc, #360]	@ (800407c <_dtoa_r+0x5bc>)
 8003f12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003f16:	ed93 7b00 	vldr	d7, [r3]
 8003f1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	ed8d 7b00 	vstr	d7, [sp]
 8003f22:	da03      	bge.n	8003f2c <_dtoa_r+0x46c>
 8003f24:	9b07      	ldr	r3, [sp, #28]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f340 8101 	ble.w	800412e <_dtoa_r+0x66e>
 8003f2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003f30:	4656      	mov	r6, sl
 8003f32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f36:	4620      	mov	r0, r4
 8003f38:	4629      	mov	r1, r5
 8003f3a:	f7fc fc8f 	bl	800085c <__aeabi_ddiv>
 8003f3e:	f7fc fe13 	bl	8000b68 <__aeabi_d2iz>
 8003f42:	4680      	mov	r8, r0
 8003f44:	f7fc faf6 	bl	8000534 <__aeabi_i2d>
 8003f48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f4c:	f7fc fb5c 	bl	8000608 <__aeabi_dmul>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4620      	mov	r0, r4
 8003f56:	4629      	mov	r1, r5
 8003f58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003f5c:	f7fc f99c 	bl	8000298 <__aeabi_dsub>
 8003f60:	f806 4b01 	strb.w	r4, [r6], #1
 8003f64:	9d07      	ldr	r5, [sp, #28]
 8003f66:	eba6 040a 	sub.w	r4, r6, sl
 8003f6a:	42a5      	cmp	r5, r4
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	f040 8117 	bne.w	80041a2 <_dtoa_r+0x6e2>
 8003f74:	f7fc f992 	bl	800029c <__adddf3>
 8003f78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	460d      	mov	r5, r1
 8003f80:	f7fc fdd2 	bl	8000b28 <__aeabi_dcmpgt>
 8003f84:	2800      	cmp	r0, #0
 8003f86:	f040 80f9 	bne.w	800417c <_dtoa_r+0x6bc>
 8003f8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f8e:	4620      	mov	r0, r4
 8003f90:	4629      	mov	r1, r5
 8003f92:	f7fc fda1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f96:	b118      	cbz	r0, 8003fa0 <_dtoa_r+0x4e0>
 8003f98:	f018 0f01 	tst.w	r8, #1
 8003f9c:	f040 80ee 	bne.w	800417c <_dtoa_r+0x6bc>
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	4658      	mov	r0, fp
 8003fa4:	f000 fc90 	bl	80048c8 <_Bfree>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	7033      	strb	r3, [r6, #0]
 8003fac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003fae:	3701      	adds	r7, #1
 8003fb0:	601f      	str	r7, [r3, #0]
 8003fb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 831d 	beq.w	80045f4 <_dtoa_r+0xb34>
 8003fba:	601e      	str	r6, [r3, #0]
 8003fbc:	e31a      	b.n	80045f4 <_dtoa_r+0xb34>
 8003fbe:	07e2      	lsls	r2, r4, #31
 8003fc0:	d505      	bpl.n	8003fce <_dtoa_r+0x50e>
 8003fc2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003fc6:	f7fc fb1f 	bl	8000608 <__aeabi_dmul>
 8003fca:	3601      	adds	r6, #1
 8003fcc:	2301      	movs	r3, #1
 8003fce:	1064      	asrs	r4, r4, #1
 8003fd0:	3508      	adds	r5, #8
 8003fd2:	e73f      	b.n	8003e54 <_dtoa_r+0x394>
 8003fd4:	2602      	movs	r6, #2
 8003fd6:	e742      	b.n	8003e5e <_dtoa_r+0x39e>
 8003fd8:	9c07      	ldr	r4, [sp, #28]
 8003fda:	9704      	str	r7, [sp, #16]
 8003fdc:	e761      	b.n	8003ea2 <_dtoa_r+0x3e2>
 8003fde:	4b27      	ldr	r3, [pc, #156]	@ (800407c <_dtoa_r+0x5bc>)
 8003fe0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003fe2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003fe6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003fea:	4454      	add	r4, sl
 8003fec:	2900      	cmp	r1, #0
 8003fee:	d053      	beq.n	8004098 <_dtoa_r+0x5d8>
 8003ff0:	4928      	ldr	r1, [pc, #160]	@ (8004094 <_dtoa_r+0x5d4>)
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f7fc fc32 	bl	800085c <__aeabi_ddiv>
 8003ff8:	4633      	mov	r3, r6
 8003ffa:	462a      	mov	r2, r5
 8003ffc:	f7fc f94c 	bl	8000298 <__aeabi_dsub>
 8004000:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004004:	4656      	mov	r6, sl
 8004006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800400a:	f7fc fdad 	bl	8000b68 <__aeabi_d2iz>
 800400e:	4605      	mov	r5, r0
 8004010:	f7fc fa90 	bl	8000534 <__aeabi_i2d>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800401c:	f7fc f93c 	bl	8000298 <__aeabi_dsub>
 8004020:	3530      	adds	r5, #48	@ 0x30
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800402a:	f806 5b01 	strb.w	r5, [r6], #1
 800402e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004032:	f7fc fd5b 	bl	8000aec <__aeabi_dcmplt>
 8004036:	2800      	cmp	r0, #0
 8004038:	d171      	bne.n	800411e <_dtoa_r+0x65e>
 800403a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800403e:	4911      	ldr	r1, [pc, #68]	@ (8004084 <_dtoa_r+0x5c4>)
 8004040:	2000      	movs	r0, #0
 8004042:	f7fc f929 	bl	8000298 <__aeabi_dsub>
 8004046:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800404a:	f7fc fd4f 	bl	8000aec <__aeabi_dcmplt>
 800404e:	2800      	cmp	r0, #0
 8004050:	f040 8095 	bne.w	800417e <_dtoa_r+0x6be>
 8004054:	42a6      	cmp	r6, r4
 8004056:	f43f af50 	beq.w	8003efa <_dtoa_r+0x43a>
 800405a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800405e:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <_dtoa_r+0x5c8>)
 8004060:	2200      	movs	r2, #0
 8004062:	f7fc fad1 	bl	8000608 <__aeabi_dmul>
 8004066:	4b08      	ldr	r3, [pc, #32]	@ (8004088 <_dtoa_r+0x5c8>)
 8004068:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800406c:	2200      	movs	r2, #0
 800406e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004072:	f7fc fac9 	bl	8000608 <__aeabi_dmul>
 8004076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800407a:	e7c4      	b.n	8004006 <_dtoa_r+0x546>
 800407c:	080068e0 	.word	0x080068e0
 8004080:	080068b8 	.word	0x080068b8
 8004084:	3ff00000 	.word	0x3ff00000
 8004088:	40240000 	.word	0x40240000
 800408c:	401c0000 	.word	0x401c0000
 8004090:	40140000 	.word	0x40140000
 8004094:	3fe00000 	.word	0x3fe00000
 8004098:	4631      	mov	r1, r6
 800409a:	4628      	mov	r0, r5
 800409c:	f7fc fab4 	bl	8000608 <__aeabi_dmul>
 80040a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80040a4:	9415      	str	r4, [sp, #84]	@ 0x54
 80040a6:	4656      	mov	r6, sl
 80040a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040ac:	f7fc fd5c 	bl	8000b68 <__aeabi_d2iz>
 80040b0:	4605      	mov	r5, r0
 80040b2:	f7fc fa3f 	bl	8000534 <__aeabi_i2d>
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040be:	f7fc f8eb 	bl	8000298 <__aeabi_dsub>
 80040c2:	3530      	adds	r5, #48	@ 0x30
 80040c4:	f806 5b01 	strb.w	r5, [r6], #1
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	42a6      	cmp	r6, r4
 80040ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	d124      	bne.n	8004122 <_dtoa_r+0x662>
 80040d8:	4bac      	ldr	r3, [pc, #688]	@ (800438c <_dtoa_r+0x8cc>)
 80040da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80040de:	f7fc f8dd 	bl	800029c <__adddf3>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040ea:	f7fc fd1d 	bl	8000b28 <__aeabi_dcmpgt>
 80040ee:	2800      	cmp	r0, #0
 80040f0:	d145      	bne.n	800417e <_dtoa_r+0x6be>
 80040f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80040f6:	49a5      	ldr	r1, [pc, #660]	@ (800438c <_dtoa_r+0x8cc>)
 80040f8:	2000      	movs	r0, #0
 80040fa:	f7fc f8cd 	bl	8000298 <__aeabi_dsub>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004106:	f7fc fcf1 	bl	8000aec <__aeabi_dcmplt>
 800410a:	2800      	cmp	r0, #0
 800410c:	f43f aef5 	beq.w	8003efa <_dtoa_r+0x43a>
 8004110:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8004112:	1e73      	subs	r3, r6, #1
 8004114:	9315      	str	r3, [sp, #84]	@ 0x54
 8004116:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800411a:	2b30      	cmp	r3, #48	@ 0x30
 800411c:	d0f8      	beq.n	8004110 <_dtoa_r+0x650>
 800411e:	9f04      	ldr	r7, [sp, #16]
 8004120:	e73e      	b.n	8003fa0 <_dtoa_r+0x4e0>
 8004122:	4b9b      	ldr	r3, [pc, #620]	@ (8004390 <_dtoa_r+0x8d0>)
 8004124:	f7fc fa70 	bl	8000608 <__aeabi_dmul>
 8004128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800412c:	e7bc      	b.n	80040a8 <_dtoa_r+0x5e8>
 800412e:	d10c      	bne.n	800414a <_dtoa_r+0x68a>
 8004130:	4b98      	ldr	r3, [pc, #608]	@ (8004394 <_dtoa_r+0x8d4>)
 8004132:	2200      	movs	r2, #0
 8004134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004138:	f7fc fa66 	bl	8000608 <__aeabi_dmul>
 800413c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004140:	f7fc fce8 	bl	8000b14 <__aeabi_dcmpge>
 8004144:	2800      	cmp	r0, #0
 8004146:	f000 8157 	beq.w	80043f8 <_dtoa_r+0x938>
 800414a:	2400      	movs	r4, #0
 800414c:	4625      	mov	r5, r4
 800414e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004150:	43db      	mvns	r3, r3
 8004152:	9304      	str	r3, [sp, #16]
 8004154:	4656      	mov	r6, sl
 8004156:	2700      	movs	r7, #0
 8004158:	4621      	mov	r1, r4
 800415a:	4658      	mov	r0, fp
 800415c:	f000 fbb4 	bl	80048c8 <_Bfree>
 8004160:	2d00      	cmp	r5, #0
 8004162:	d0dc      	beq.n	800411e <_dtoa_r+0x65e>
 8004164:	b12f      	cbz	r7, 8004172 <_dtoa_r+0x6b2>
 8004166:	42af      	cmp	r7, r5
 8004168:	d003      	beq.n	8004172 <_dtoa_r+0x6b2>
 800416a:	4639      	mov	r1, r7
 800416c:	4658      	mov	r0, fp
 800416e:	f000 fbab 	bl	80048c8 <_Bfree>
 8004172:	4629      	mov	r1, r5
 8004174:	4658      	mov	r0, fp
 8004176:	f000 fba7 	bl	80048c8 <_Bfree>
 800417a:	e7d0      	b.n	800411e <_dtoa_r+0x65e>
 800417c:	9704      	str	r7, [sp, #16]
 800417e:	4633      	mov	r3, r6
 8004180:	461e      	mov	r6, r3
 8004182:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004186:	2a39      	cmp	r2, #57	@ 0x39
 8004188:	d107      	bne.n	800419a <_dtoa_r+0x6da>
 800418a:	459a      	cmp	sl, r3
 800418c:	d1f8      	bne.n	8004180 <_dtoa_r+0x6c0>
 800418e:	9a04      	ldr	r2, [sp, #16]
 8004190:	3201      	adds	r2, #1
 8004192:	9204      	str	r2, [sp, #16]
 8004194:	2230      	movs	r2, #48	@ 0x30
 8004196:	f88a 2000 	strb.w	r2, [sl]
 800419a:	781a      	ldrb	r2, [r3, #0]
 800419c:	3201      	adds	r2, #1
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	e7bd      	b.n	800411e <_dtoa_r+0x65e>
 80041a2:	4b7b      	ldr	r3, [pc, #492]	@ (8004390 <_dtoa_r+0x8d0>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	f7fc fa2f 	bl	8000608 <__aeabi_dmul>
 80041aa:	2200      	movs	r2, #0
 80041ac:	2300      	movs	r3, #0
 80041ae:	4604      	mov	r4, r0
 80041b0:	460d      	mov	r5, r1
 80041b2:	f7fc fc91 	bl	8000ad8 <__aeabi_dcmpeq>
 80041b6:	2800      	cmp	r0, #0
 80041b8:	f43f aebb 	beq.w	8003f32 <_dtoa_r+0x472>
 80041bc:	e6f0      	b.n	8003fa0 <_dtoa_r+0x4e0>
 80041be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80041c0:	2a00      	cmp	r2, #0
 80041c2:	f000 80db 	beq.w	800437c <_dtoa_r+0x8bc>
 80041c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041c8:	2a01      	cmp	r2, #1
 80041ca:	f300 80bf 	bgt.w	800434c <_dtoa_r+0x88c>
 80041ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80041d0:	2a00      	cmp	r2, #0
 80041d2:	f000 80b7 	beq.w	8004344 <_dtoa_r+0x884>
 80041d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80041da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80041dc:	4646      	mov	r6, r8
 80041de:	9a08      	ldr	r2, [sp, #32]
 80041e0:	2101      	movs	r1, #1
 80041e2:	441a      	add	r2, r3
 80041e4:	4658      	mov	r0, fp
 80041e6:	4498      	add	r8, r3
 80041e8:	9208      	str	r2, [sp, #32]
 80041ea:	f000 fc21 	bl	8004a30 <__i2b>
 80041ee:	4605      	mov	r5, r0
 80041f0:	b15e      	cbz	r6, 800420a <_dtoa_r+0x74a>
 80041f2:	9b08      	ldr	r3, [sp, #32]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	dd08      	ble.n	800420a <_dtoa_r+0x74a>
 80041f8:	42b3      	cmp	r3, r6
 80041fa:	9a08      	ldr	r2, [sp, #32]
 80041fc:	bfa8      	it	ge
 80041fe:	4633      	movge	r3, r6
 8004200:	eba8 0803 	sub.w	r8, r8, r3
 8004204:	1af6      	subs	r6, r6, r3
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	9308      	str	r3, [sp, #32]
 800420a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800420c:	b1f3      	cbz	r3, 800424c <_dtoa_r+0x78c>
 800420e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80b7 	beq.w	8004384 <_dtoa_r+0x8c4>
 8004216:	b18c      	cbz	r4, 800423c <_dtoa_r+0x77c>
 8004218:	4629      	mov	r1, r5
 800421a:	4622      	mov	r2, r4
 800421c:	4658      	mov	r0, fp
 800421e:	f000 fcc7 	bl	8004bb0 <__pow5mult>
 8004222:	464a      	mov	r2, r9
 8004224:	4601      	mov	r1, r0
 8004226:	4605      	mov	r5, r0
 8004228:	4658      	mov	r0, fp
 800422a:	f000 fc17 	bl	8004a5c <__multiply>
 800422e:	4649      	mov	r1, r9
 8004230:	9004      	str	r0, [sp, #16]
 8004232:	4658      	mov	r0, fp
 8004234:	f000 fb48 	bl	80048c8 <_Bfree>
 8004238:	9b04      	ldr	r3, [sp, #16]
 800423a:	4699      	mov	r9, r3
 800423c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800423e:	1b1a      	subs	r2, r3, r4
 8004240:	d004      	beq.n	800424c <_dtoa_r+0x78c>
 8004242:	4649      	mov	r1, r9
 8004244:	4658      	mov	r0, fp
 8004246:	f000 fcb3 	bl	8004bb0 <__pow5mult>
 800424a:	4681      	mov	r9, r0
 800424c:	2101      	movs	r1, #1
 800424e:	4658      	mov	r0, fp
 8004250:	f000 fbee 	bl	8004a30 <__i2b>
 8004254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004256:	4604      	mov	r4, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 81cf 	beq.w	80045fc <_dtoa_r+0xb3c>
 800425e:	461a      	mov	r2, r3
 8004260:	4601      	mov	r1, r0
 8004262:	4658      	mov	r0, fp
 8004264:	f000 fca4 	bl	8004bb0 <__pow5mult>
 8004268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800426a:	2b01      	cmp	r3, #1
 800426c:	4604      	mov	r4, r0
 800426e:	f300 8095 	bgt.w	800439c <_dtoa_r+0x8dc>
 8004272:	9b02      	ldr	r3, [sp, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	f040 8087 	bne.w	8004388 <_dtoa_r+0x8c8>
 800427a:	9b03      	ldr	r3, [sp, #12]
 800427c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004280:	2b00      	cmp	r3, #0
 8004282:	f040 8089 	bne.w	8004398 <_dtoa_r+0x8d8>
 8004286:	9b03      	ldr	r3, [sp, #12]
 8004288:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800428c:	0d1b      	lsrs	r3, r3, #20
 800428e:	051b      	lsls	r3, r3, #20
 8004290:	b12b      	cbz	r3, 800429e <_dtoa_r+0x7de>
 8004292:	9b08      	ldr	r3, [sp, #32]
 8004294:	3301      	adds	r3, #1
 8004296:	9308      	str	r3, [sp, #32]
 8004298:	f108 0801 	add.w	r8, r8, #1
 800429c:	2301      	movs	r3, #1
 800429e:	930a      	str	r3, [sp, #40]	@ 0x28
 80042a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 81b0 	beq.w	8004608 <_dtoa_r+0xb48>
 80042a8:	6923      	ldr	r3, [r4, #16]
 80042aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80042ae:	6918      	ldr	r0, [r3, #16]
 80042b0:	f000 fb72 	bl	8004998 <__hi0bits>
 80042b4:	f1c0 0020 	rsb	r0, r0, #32
 80042b8:	9b08      	ldr	r3, [sp, #32]
 80042ba:	4418      	add	r0, r3
 80042bc:	f010 001f 	ands.w	r0, r0, #31
 80042c0:	d077      	beq.n	80043b2 <_dtoa_r+0x8f2>
 80042c2:	f1c0 0320 	rsb	r3, r0, #32
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	dd6b      	ble.n	80043a2 <_dtoa_r+0x8e2>
 80042ca:	9b08      	ldr	r3, [sp, #32]
 80042cc:	f1c0 001c 	rsb	r0, r0, #28
 80042d0:	4403      	add	r3, r0
 80042d2:	4480      	add	r8, r0
 80042d4:	4406      	add	r6, r0
 80042d6:	9308      	str	r3, [sp, #32]
 80042d8:	f1b8 0f00 	cmp.w	r8, #0
 80042dc:	dd05      	ble.n	80042ea <_dtoa_r+0x82a>
 80042de:	4649      	mov	r1, r9
 80042e0:	4642      	mov	r2, r8
 80042e2:	4658      	mov	r0, fp
 80042e4:	f000 fcbe 	bl	8004c64 <__lshift>
 80042e8:	4681      	mov	r9, r0
 80042ea:	9b08      	ldr	r3, [sp, #32]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	dd05      	ble.n	80042fc <_dtoa_r+0x83c>
 80042f0:	4621      	mov	r1, r4
 80042f2:	461a      	mov	r2, r3
 80042f4:	4658      	mov	r0, fp
 80042f6:	f000 fcb5 	bl	8004c64 <__lshift>
 80042fa:	4604      	mov	r4, r0
 80042fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d059      	beq.n	80043b6 <_dtoa_r+0x8f6>
 8004302:	4621      	mov	r1, r4
 8004304:	4648      	mov	r0, r9
 8004306:	f000 fd19 	bl	8004d3c <__mcmp>
 800430a:	2800      	cmp	r0, #0
 800430c:	da53      	bge.n	80043b6 <_dtoa_r+0x8f6>
 800430e:	1e7b      	subs	r3, r7, #1
 8004310:	9304      	str	r3, [sp, #16]
 8004312:	4649      	mov	r1, r9
 8004314:	2300      	movs	r3, #0
 8004316:	220a      	movs	r2, #10
 8004318:	4658      	mov	r0, fp
 800431a:	f000 faf7 	bl	800490c <__multadd>
 800431e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004320:	4681      	mov	r9, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 8172 	beq.w	800460c <_dtoa_r+0xb4c>
 8004328:	2300      	movs	r3, #0
 800432a:	4629      	mov	r1, r5
 800432c:	220a      	movs	r2, #10
 800432e:	4658      	mov	r0, fp
 8004330:	f000 faec 	bl	800490c <__multadd>
 8004334:	9b00      	ldr	r3, [sp, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	4605      	mov	r5, r0
 800433a:	dc67      	bgt.n	800440c <_dtoa_r+0x94c>
 800433c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800433e:	2b02      	cmp	r3, #2
 8004340:	dc41      	bgt.n	80043c6 <_dtoa_r+0x906>
 8004342:	e063      	b.n	800440c <_dtoa_r+0x94c>
 8004344:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004346:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800434a:	e746      	b.n	80041da <_dtoa_r+0x71a>
 800434c:	9b07      	ldr	r3, [sp, #28]
 800434e:	1e5c      	subs	r4, r3, #1
 8004350:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004352:	42a3      	cmp	r3, r4
 8004354:	bfbf      	itttt	lt
 8004356:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004358:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800435a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800435c:	1ae3      	sublt	r3, r4, r3
 800435e:	bfb4      	ite	lt
 8004360:	18d2      	addlt	r2, r2, r3
 8004362:	1b1c      	subge	r4, r3, r4
 8004364:	9b07      	ldr	r3, [sp, #28]
 8004366:	bfbc      	itt	lt
 8004368:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800436a:	2400      	movlt	r4, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	bfb5      	itete	lt
 8004370:	eba8 0603 	sublt.w	r6, r8, r3
 8004374:	9b07      	ldrge	r3, [sp, #28]
 8004376:	2300      	movlt	r3, #0
 8004378:	4646      	movge	r6, r8
 800437a:	e730      	b.n	80041de <_dtoa_r+0x71e>
 800437c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800437e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004380:	4646      	mov	r6, r8
 8004382:	e735      	b.n	80041f0 <_dtoa_r+0x730>
 8004384:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004386:	e75c      	b.n	8004242 <_dtoa_r+0x782>
 8004388:	2300      	movs	r3, #0
 800438a:	e788      	b.n	800429e <_dtoa_r+0x7de>
 800438c:	3fe00000 	.word	0x3fe00000
 8004390:	40240000 	.word	0x40240000
 8004394:	40140000 	.word	0x40140000
 8004398:	9b02      	ldr	r3, [sp, #8]
 800439a:	e780      	b.n	800429e <_dtoa_r+0x7de>
 800439c:	2300      	movs	r3, #0
 800439e:	930a      	str	r3, [sp, #40]	@ 0x28
 80043a0:	e782      	b.n	80042a8 <_dtoa_r+0x7e8>
 80043a2:	d099      	beq.n	80042d8 <_dtoa_r+0x818>
 80043a4:	9a08      	ldr	r2, [sp, #32]
 80043a6:	331c      	adds	r3, #28
 80043a8:	441a      	add	r2, r3
 80043aa:	4498      	add	r8, r3
 80043ac:	441e      	add	r6, r3
 80043ae:	9208      	str	r2, [sp, #32]
 80043b0:	e792      	b.n	80042d8 <_dtoa_r+0x818>
 80043b2:	4603      	mov	r3, r0
 80043b4:	e7f6      	b.n	80043a4 <_dtoa_r+0x8e4>
 80043b6:	9b07      	ldr	r3, [sp, #28]
 80043b8:	9704      	str	r7, [sp, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	dc20      	bgt.n	8004400 <_dtoa_r+0x940>
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	dd1e      	ble.n	8004404 <_dtoa_r+0x944>
 80043c6:	9b00      	ldr	r3, [sp, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f47f aec0 	bne.w	800414e <_dtoa_r+0x68e>
 80043ce:	4621      	mov	r1, r4
 80043d0:	2205      	movs	r2, #5
 80043d2:	4658      	mov	r0, fp
 80043d4:	f000 fa9a 	bl	800490c <__multadd>
 80043d8:	4601      	mov	r1, r0
 80043da:	4604      	mov	r4, r0
 80043dc:	4648      	mov	r0, r9
 80043de:	f000 fcad 	bl	8004d3c <__mcmp>
 80043e2:	2800      	cmp	r0, #0
 80043e4:	f77f aeb3 	ble.w	800414e <_dtoa_r+0x68e>
 80043e8:	4656      	mov	r6, sl
 80043ea:	2331      	movs	r3, #49	@ 0x31
 80043ec:	f806 3b01 	strb.w	r3, [r6], #1
 80043f0:	9b04      	ldr	r3, [sp, #16]
 80043f2:	3301      	adds	r3, #1
 80043f4:	9304      	str	r3, [sp, #16]
 80043f6:	e6ae      	b.n	8004156 <_dtoa_r+0x696>
 80043f8:	9c07      	ldr	r4, [sp, #28]
 80043fa:	9704      	str	r7, [sp, #16]
 80043fc:	4625      	mov	r5, r4
 80043fe:	e7f3      	b.n	80043e8 <_dtoa_r+0x928>
 8004400:	9b07      	ldr	r3, [sp, #28]
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 8104 	beq.w	8004614 <_dtoa_r+0xb54>
 800440c:	2e00      	cmp	r6, #0
 800440e:	dd05      	ble.n	800441c <_dtoa_r+0x95c>
 8004410:	4629      	mov	r1, r5
 8004412:	4632      	mov	r2, r6
 8004414:	4658      	mov	r0, fp
 8004416:	f000 fc25 	bl	8004c64 <__lshift>
 800441a:	4605      	mov	r5, r0
 800441c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	d05a      	beq.n	80044d8 <_dtoa_r+0xa18>
 8004422:	6869      	ldr	r1, [r5, #4]
 8004424:	4658      	mov	r0, fp
 8004426:	f000 fa0f 	bl	8004848 <_Balloc>
 800442a:	4606      	mov	r6, r0
 800442c:	b928      	cbnz	r0, 800443a <_dtoa_r+0x97a>
 800442e:	4b84      	ldr	r3, [pc, #528]	@ (8004640 <_dtoa_r+0xb80>)
 8004430:	4602      	mov	r2, r0
 8004432:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004436:	f7ff bb5a 	b.w	8003aee <_dtoa_r+0x2e>
 800443a:	692a      	ldr	r2, [r5, #16]
 800443c:	3202      	adds	r2, #2
 800443e:	0092      	lsls	r2, r2, #2
 8004440:	f105 010c 	add.w	r1, r5, #12
 8004444:	300c      	adds	r0, #12
 8004446:	f001 f813 	bl	8005470 <memcpy>
 800444a:	2201      	movs	r2, #1
 800444c:	4631      	mov	r1, r6
 800444e:	4658      	mov	r0, fp
 8004450:	f000 fc08 	bl	8004c64 <__lshift>
 8004454:	f10a 0301 	add.w	r3, sl, #1
 8004458:	9307      	str	r3, [sp, #28]
 800445a:	9b00      	ldr	r3, [sp, #0]
 800445c:	4453      	add	r3, sl
 800445e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004460:	9b02      	ldr	r3, [sp, #8]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	462f      	mov	r7, r5
 8004468:	930a      	str	r3, [sp, #40]	@ 0x28
 800446a:	4605      	mov	r5, r0
 800446c:	9b07      	ldr	r3, [sp, #28]
 800446e:	4621      	mov	r1, r4
 8004470:	3b01      	subs	r3, #1
 8004472:	4648      	mov	r0, r9
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	f7ff fa98 	bl	80039aa <quorem>
 800447a:	4639      	mov	r1, r7
 800447c:	9002      	str	r0, [sp, #8]
 800447e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004482:	4648      	mov	r0, r9
 8004484:	f000 fc5a 	bl	8004d3c <__mcmp>
 8004488:	462a      	mov	r2, r5
 800448a:	9008      	str	r0, [sp, #32]
 800448c:	4621      	mov	r1, r4
 800448e:	4658      	mov	r0, fp
 8004490:	f000 fc70 	bl	8004d74 <__mdiff>
 8004494:	68c2      	ldr	r2, [r0, #12]
 8004496:	4606      	mov	r6, r0
 8004498:	bb02      	cbnz	r2, 80044dc <_dtoa_r+0xa1c>
 800449a:	4601      	mov	r1, r0
 800449c:	4648      	mov	r0, r9
 800449e:	f000 fc4d 	bl	8004d3c <__mcmp>
 80044a2:	4602      	mov	r2, r0
 80044a4:	4631      	mov	r1, r6
 80044a6:	4658      	mov	r0, fp
 80044a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80044aa:	f000 fa0d 	bl	80048c8 <_Bfree>
 80044ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80044b2:	9e07      	ldr	r6, [sp, #28]
 80044b4:	ea43 0102 	orr.w	r1, r3, r2
 80044b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044ba:	4319      	orrs	r1, r3
 80044bc:	d110      	bne.n	80044e0 <_dtoa_r+0xa20>
 80044be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80044c2:	d029      	beq.n	8004518 <_dtoa_r+0xa58>
 80044c4:	9b08      	ldr	r3, [sp, #32]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	dd02      	ble.n	80044d0 <_dtoa_r+0xa10>
 80044ca:	9b02      	ldr	r3, [sp, #8]
 80044cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80044d0:	9b00      	ldr	r3, [sp, #0]
 80044d2:	f883 8000 	strb.w	r8, [r3]
 80044d6:	e63f      	b.n	8004158 <_dtoa_r+0x698>
 80044d8:	4628      	mov	r0, r5
 80044da:	e7bb      	b.n	8004454 <_dtoa_r+0x994>
 80044dc:	2201      	movs	r2, #1
 80044de:	e7e1      	b.n	80044a4 <_dtoa_r+0x9e4>
 80044e0:	9b08      	ldr	r3, [sp, #32]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	db04      	blt.n	80044f0 <_dtoa_r+0xa30>
 80044e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80044e8:	430b      	orrs	r3, r1
 80044ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80044ec:	430b      	orrs	r3, r1
 80044ee:	d120      	bne.n	8004532 <_dtoa_r+0xa72>
 80044f0:	2a00      	cmp	r2, #0
 80044f2:	dded      	ble.n	80044d0 <_dtoa_r+0xa10>
 80044f4:	4649      	mov	r1, r9
 80044f6:	2201      	movs	r2, #1
 80044f8:	4658      	mov	r0, fp
 80044fa:	f000 fbb3 	bl	8004c64 <__lshift>
 80044fe:	4621      	mov	r1, r4
 8004500:	4681      	mov	r9, r0
 8004502:	f000 fc1b 	bl	8004d3c <__mcmp>
 8004506:	2800      	cmp	r0, #0
 8004508:	dc03      	bgt.n	8004512 <_dtoa_r+0xa52>
 800450a:	d1e1      	bne.n	80044d0 <_dtoa_r+0xa10>
 800450c:	f018 0f01 	tst.w	r8, #1
 8004510:	d0de      	beq.n	80044d0 <_dtoa_r+0xa10>
 8004512:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004516:	d1d8      	bne.n	80044ca <_dtoa_r+0xa0a>
 8004518:	9a00      	ldr	r2, [sp, #0]
 800451a:	2339      	movs	r3, #57	@ 0x39
 800451c:	7013      	strb	r3, [r2, #0]
 800451e:	4633      	mov	r3, r6
 8004520:	461e      	mov	r6, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004528:	2a39      	cmp	r2, #57	@ 0x39
 800452a:	d052      	beq.n	80045d2 <_dtoa_r+0xb12>
 800452c:	3201      	adds	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e612      	b.n	8004158 <_dtoa_r+0x698>
 8004532:	2a00      	cmp	r2, #0
 8004534:	dd07      	ble.n	8004546 <_dtoa_r+0xa86>
 8004536:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800453a:	d0ed      	beq.n	8004518 <_dtoa_r+0xa58>
 800453c:	9a00      	ldr	r2, [sp, #0]
 800453e:	f108 0301 	add.w	r3, r8, #1
 8004542:	7013      	strb	r3, [r2, #0]
 8004544:	e608      	b.n	8004158 <_dtoa_r+0x698>
 8004546:	9b07      	ldr	r3, [sp, #28]
 8004548:	9a07      	ldr	r2, [sp, #28]
 800454a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800454e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004550:	4293      	cmp	r3, r2
 8004552:	d028      	beq.n	80045a6 <_dtoa_r+0xae6>
 8004554:	4649      	mov	r1, r9
 8004556:	2300      	movs	r3, #0
 8004558:	220a      	movs	r2, #10
 800455a:	4658      	mov	r0, fp
 800455c:	f000 f9d6 	bl	800490c <__multadd>
 8004560:	42af      	cmp	r7, r5
 8004562:	4681      	mov	r9, r0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	f04f 020a 	mov.w	r2, #10
 800456c:	4639      	mov	r1, r7
 800456e:	4658      	mov	r0, fp
 8004570:	d107      	bne.n	8004582 <_dtoa_r+0xac2>
 8004572:	f000 f9cb 	bl	800490c <__multadd>
 8004576:	4607      	mov	r7, r0
 8004578:	4605      	mov	r5, r0
 800457a:	9b07      	ldr	r3, [sp, #28]
 800457c:	3301      	adds	r3, #1
 800457e:	9307      	str	r3, [sp, #28]
 8004580:	e774      	b.n	800446c <_dtoa_r+0x9ac>
 8004582:	f000 f9c3 	bl	800490c <__multadd>
 8004586:	4629      	mov	r1, r5
 8004588:	4607      	mov	r7, r0
 800458a:	2300      	movs	r3, #0
 800458c:	220a      	movs	r2, #10
 800458e:	4658      	mov	r0, fp
 8004590:	f000 f9bc 	bl	800490c <__multadd>
 8004594:	4605      	mov	r5, r0
 8004596:	e7f0      	b.n	800457a <_dtoa_r+0xaba>
 8004598:	9b00      	ldr	r3, [sp, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	bfcc      	ite	gt
 800459e:	461e      	movgt	r6, r3
 80045a0:	2601      	movle	r6, #1
 80045a2:	4456      	add	r6, sl
 80045a4:	2700      	movs	r7, #0
 80045a6:	4649      	mov	r1, r9
 80045a8:	2201      	movs	r2, #1
 80045aa:	4658      	mov	r0, fp
 80045ac:	f000 fb5a 	bl	8004c64 <__lshift>
 80045b0:	4621      	mov	r1, r4
 80045b2:	4681      	mov	r9, r0
 80045b4:	f000 fbc2 	bl	8004d3c <__mcmp>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	dcb0      	bgt.n	800451e <_dtoa_r+0xa5e>
 80045bc:	d102      	bne.n	80045c4 <_dtoa_r+0xb04>
 80045be:	f018 0f01 	tst.w	r8, #1
 80045c2:	d1ac      	bne.n	800451e <_dtoa_r+0xa5e>
 80045c4:	4633      	mov	r3, r6
 80045c6:	461e      	mov	r6, r3
 80045c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80045cc:	2a30      	cmp	r2, #48	@ 0x30
 80045ce:	d0fa      	beq.n	80045c6 <_dtoa_r+0xb06>
 80045d0:	e5c2      	b.n	8004158 <_dtoa_r+0x698>
 80045d2:	459a      	cmp	sl, r3
 80045d4:	d1a4      	bne.n	8004520 <_dtoa_r+0xa60>
 80045d6:	9b04      	ldr	r3, [sp, #16]
 80045d8:	3301      	adds	r3, #1
 80045da:	9304      	str	r3, [sp, #16]
 80045dc:	2331      	movs	r3, #49	@ 0x31
 80045de:	f88a 3000 	strb.w	r3, [sl]
 80045e2:	e5b9      	b.n	8004158 <_dtoa_r+0x698>
 80045e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80045e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8004644 <_dtoa_r+0xb84>
 80045ea:	b11b      	cbz	r3, 80045f4 <_dtoa_r+0xb34>
 80045ec:	f10a 0308 	add.w	r3, sl, #8
 80045f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	4650      	mov	r0, sl
 80045f6:	b019      	add	sp, #100	@ 0x64
 80045f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045fe:	2b01      	cmp	r3, #1
 8004600:	f77f ae37 	ble.w	8004272 <_dtoa_r+0x7b2>
 8004604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004606:	930a      	str	r3, [sp, #40]	@ 0x28
 8004608:	2001      	movs	r0, #1
 800460a:	e655      	b.n	80042b8 <_dtoa_r+0x7f8>
 800460c:	9b00      	ldr	r3, [sp, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	f77f aed6 	ble.w	80043c0 <_dtoa_r+0x900>
 8004614:	4656      	mov	r6, sl
 8004616:	4621      	mov	r1, r4
 8004618:	4648      	mov	r0, r9
 800461a:	f7ff f9c6 	bl	80039aa <quorem>
 800461e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004622:	f806 8b01 	strb.w	r8, [r6], #1
 8004626:	9b00      	ldr	r3, [sp, #0]
 8004628:	eba6 020a 	sub.w	r2, r6, sl
 800462c:	4293      	cmp	r3, r2
 800462e:	ddb3      	ble.n	8004598 <_dtoa_r+0xad8>
 8004630:	4649      	mov	r1, r9
 8004632:	2300      	movs	r3, #0
 8004634:	220a      	movs	r2, #10
 8004636:	4658      	mov	r0, fp
 8004638:	f000 f968 	bl	800490c <__multadd>
 800463c:	4681      	mov	r9, r0
 800463e:	e7ea      	b.n	8004616 <_dtoa_r+0xb56>
 8004640:	08006840 	.word	0x08006840
 8004644:	080067c4 	.word	0x080067c4

08004648 <_free_r>:
 8004648:	b538      	push	{r3, r4, r5, lr}
 800464a:	4605      	mov	r5, r0
 800464c:	2900      	cmp	r1, #0
 800464e:	d041      	beq.n	80046d4 <_free_r+0x8c>
 8004650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004654:	1f0c      	subs	r4, r1, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	bfb8      	it	lt
 800465a:	18e4      	addlt	r4, r4, r3
 800465c:	f000 f8e8 	bl	8004830 <__malloc_lock>
 8004660:	4a1d      	ldr	r2, [pc, #116]	@ (80046d8 <_free_r+0x90>)
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	b933      	cbnz	r3, 8004674 <_free_r+0x2c>
 8004666:	6063      	str	r3, [r4, #4]
 8004668:	6014      	str	r4, [r2, #0]
 800466a:	4628      	mov	r0, r5
 800466c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004670:	f000 b8e4 	b.w	800483c <__malloc_unlock>
 8004674:	42a3      	cmp	r3, r4
 8004676:	d908      	bls.n	800468a <_free_r+0x42>
 8004678:	6820      	ldr	r0, [r4, #0]
 800467a:	1821      	adds	r1, r4, r0
 800467c:	428b      	cmp	r3, r1
 800467e:	bf01      	itttt	eq
 8004680:	6819      	ldreq	r1, [r3, #0]
 8004682:	685b      	ldreq	r3, [r3, #4]
 8004684:	1809      	addeq	r1, r1, r0
 8004686:	6021      	streq	r1, [r4, #0]
 8004688:	e7ed      	b.n	8004666 <_free_r+0x1e>
 800468a:	461a      	mov	r2, r3
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	b10b      	cbz	r3, 8004694 <_free_r+0x4c>
 8004690:	42a3      	cmp	r3, r4
 8004692:	d9fa      	bls.n	800468a <_free_r+0x42>
 8004694:	6811      	ldr	r1, [r2, #0]
 8004696:	1850      	adds	r0, r2, r1
 8004698:	42a0      	cmp	r0, r4
 800469a:	d10b      	bne.n	80046b4 <_free_r+0x6c>
 800469c:	6820      	ldr	r0, [r4, #0]
 800469e:	4401      	add	r1, r0
 80046a0:	1850      	adds	r0, r2, r1
 80046a2:	4283      	cmp	r3, r0
 80046a4:	6011      	str	r1, [r2, #0]
 80046a6:	d1e0      	bne.n	800466a <_free_r+0x22>
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	6053      	str	r3, [r2, #4]
 80046ae:	4408      	add	r0, r1
 80046b0:	6010      	str	r0, [r2, #0]
 80046b2:	e7da      	b.n	800466a <_free_r+0x22>
 80046b4:	d902      	bls.n	80046bc <_free_r+0x74>
 80046b6:	230c      	movs	r3, #12
 80046b8:	602b      	str	r3, [r5, #0]
 80046ba:	e7d6      	b.n	800466a <_free_r+0x22>
 80046bc:	6820      	ldr	r0, [r4, #0]
 80046be:	1821      	adds	r1, r4, r0
 80046c0:	428b      	cmp	r3, r1
 80046c2:	bf04      	itt	eq
 80046c4:	6819      	ldreq	r1, [r3, #0]
 80046c6:	685b      	ldreq	r3, [r3, #4]
 80046c8:	6063      	str	r3, [r4, #4]
 80046ca:	bf04      	itt	eq
 80046cc:	1809      	addeq	r1, r1, r0
 80046ce:	6021      	streq	r1, [r4, #0]
 80046d0:	6054      	str	r4, [r2, #4]
 80046d2:	e7ca      	b.n	800466a <_free_r+0x22>
 80046d4:	bd38      	pop	{r3, r4, r5, pc}
 80046d6:	bf00      	nop
 80046d8:	20000398 	.word	0x20000398

080046dc <malloc>:
 80046dc:	4b02      	ldr	r3, [pc, #8]	@ (80046e8 <malloc+0xc>)
 80046de:	4601      	mov	r1, r0
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	f000 b825 	b.w	8004730 <_malloc_r>
 80046e6:	bf00      	nop
 80046e8:	20000020 	.word	0x20000020

080046ec <sbrk_aligned>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	4e0f      	ldr	r6, [pc, #60]	@ (800472c <sbrk_aligned+0x40>)
 80046f0:	460c      	mov	r4, r1
 80046f2:	6831      	ldr	r1, [r6, #0]
 80046f4:	4605      	mov	r5, r0
 80046f6:	b911      	cbnz	r1, 80046fe <sbrk_aligned+0x12>
 80046f8:	f000 feaa 	bl	8005450 <_sbrk_r>
 80046fc:	6030      	str	r0, [r6, #0]
 80046fe:	4621      	mov	r1, r4
 8004700:	4628      	mov	r0, r5
 8004702:	f000 fea5 	bl	8005450 <_sbrk_r>
 8004706:	1c43      	adds	r3, r0, #1
 8004708:	d103      	bne.n	8004712 <sbrk_aligned+0x26>
 800470a:	f04f 34ff 	mov.w	r4, #4294967295
 800470e:	4620      	mov	r0, r4
 8004710:	bd70      	pop	{r4, r5, r6, pc}
 8004712:	1cc4      	adds	r4, r0, #3
 8004714:	f024 0403 	bic.w	r4, r4, #3
 8004718:	42a0      	cmp	r0, r4
 800471a:	d0f8      	beq.n	800470e <sbrk_aligned+0x22>
 800471c:	1a21      	subs	r1, r4, r0
 800471e:	4628      	mov	r0, r5
 8004720:	f000 fe96 	bl	8005450 <_sbrk_r>
 8004724:	3001      	adds	r0, #1
 8004726:	d1f2      	bne.n	800470e <sbrk_aligned+0x22>
 8004728:	e7ef      	b.n	800470a <sbrk_aligned+0x1e>
 800472a:	bf00      	nop
 800472c:	20000394 	.word	0x20000394

08004730 <_malloc_r>:
 8004730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004734:	1ccd      	adds	r5, r1, #3
 8004736:	f025 0503 	bic.w	r5, r5, #3
 800473a:	3508      	adds	r5, #8
 800473c:	2d0c      	cmp	r5, #12
 800473e:	bf38      	it	cc
 8004740:	250c      	movcc	r5, #12
 8004742:	2d00      	cmp	r5, #0
 8004744:	4606      	mov	r6, r0
 8004746:	db01      	blt.n	800474c <_malloc_r+0x1c>
 8004748:	42a9      	cmp	r1, r5
 800474a:	d904      	bls.n	8004756 <_malloc_r+0x26>
 800474c:	230c      	movs	r3, #12
 800474e:	6033      	str	r3, [r6, #0]
 8004750:	2000      	movs	r0, #0
 8004752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800482c <_malloc_r+0xfc>
 800475a:	f000 f869 	bl	8004830 <__malloc_lock>
 800475e:	f8d8 3000 	ldr.w	r3, [r8]
 8004762:	461c      	mov	r4, r3
 8004764:	bb44      	cbnz	r4, 80047b8 <_malloc_r+0x88>
 8004766:	4629      	mov	r1, r5
 8004768:	4630      	mov	r0, r6
 800476a:	f7ff ffbf 	bl	80046ec <sbrk_aligned>
 800476e:	1c43      	adds	r3, r0, #1
 8004770:	4604      	mov	r4, r0
 8004772:	d158      	bne.n	8004826 <_malloc_r+0xf6>
 8004774:	f8d8 4000 	ldr.w	r4, [r8]
 8004778:	4627      	mov	r7, r4
 800477a:	2f00      	cmp	r7, #0
 800477c:	d143      	bne.n	8004806 <_malloc_r+0xd6>
 800477e:	2c00      	cmp	r4, #0
 8004780:	d04b      	beq.n	800481a <_malloc_r+0xea>
 8004782:	6823      	ldr	r3, [r4, #0]
 8004784:	4639      	mov	r1, r7
 8004786:	4630      	mov	r0, r6
 8004788:	eb04 0903 	add.w	r9, r4, r3
 800478c:	f000 fe60 	bl	8005450 <_sbrk_r>
 8004790:	4581      	cmp	r9, r0
 8004792:	d142      	bne.n	800481a <_malloc_r+0xea>
 8004794:	6821      	ldr	r1, [r4, #0]
 8004796:	1a6d      	subs	r5, r5, r1
 8004798:	4629      	mov	r1, r5
 800479a:	4630      	mov	r0, r6
 800479c:	f7ff ffa6 	bl	80046ec <sbrk_aligned>
 80047a0:	3001      	adds	r0, #1
 80047a2:	d03a      	beq.n	800481a <_malloc_r+0xea>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	442b      	add	r3, r5
 80047a8:	6023      	str	r3, [r4, #0]
 80047aa:	f8d8 3000 	ldr.w	r3, [r8]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	bb62      	cbnz	r2, 800480c <_malloc_r+0xdc>
 80047b2:	f8c8 7000 	str.w	r7, [r8]
 80047b6:	e00f      	b.n	80047d8 <_malloc_r+0xa8>
 80047b8:	6822      	ldr	r2, [r4, #0]
 80047ba:	1b52      	subs	r2, r2, r5
 80047bc:	d420      	bmi.n	8004800 <_malloc_r+0xd0>
 80047be:	2a0b      	cmp	r2, #11
 80047c0:	d917      	bls.n	80047f2 <_malloc_r+0xc2>
 80047c2:	1961      	adds	r1, r4, r5
 80047c4:	42a3      	cmp	r3, r4
 80047c6:	6025      	str	r5, [r4, #0]
 80047c8:	bf18      	it	ne
 80047ca:	6059      	strne	r1, [r3, #4]
 80047cc:	6863      	ldr	r3, [r4, #4]
 80047ce:	bf08      	it	eq
 80047d0:	f8c8 1000 	streq.w	r1, [r8]
 80047d4:	5162      	str	r2, [r4, r5]
 80047d6:	604b      	str	r3, [r1, #4]
 80047d8:	4630      	mov	r0, r6
 80047da:	f000 f82f 	bl	800483c <__malloc_unlock>
 80047de:	f104 000b 	add.w	r0, r4, #11
 80047e2:	1d23      	adds	r3, r4, #4
 80047e4:	f020 0007 	bic.w	r0, r0, #7
 80047e8:	1ac2      	subs	r2, r0, r3
 80047ea:	bf1c      	itt	ne
 80047ec:	1a1b      	subne	r3, r3, r0
 80047ee:	50a3      	strne	r3, [r4, r2]
 80047f0:	e7af      	b.n	8004752 <_malloc_r+0x22>
 80047f2:	6862      	ldr	r2, [r4, #4]
 80047f4:	42a3      	cmp	r3, r4
 80047f6:	bf0c      	ite	eq
 80047f8:	f8c8 2000 	streq.w	r2, [r8]
 80047fc:	605a      	strne	r2, [r3, #4]
 80047fe:	e7eb      	b.n	80047d8 <_malloc_r+0xa8>
 8004800:	4623      	mov	r3, r4
 8004802:	6864      	ldr	r4, [r4, #4]
 8004804:	e7ae      	b.n	8004764 <_malloc_r+0x34>
 8004806:	463c      	mov	r4, r7
 8004808:	687f      	ldr	r7, [r7, #4]
 800480a:	e7b6      	b.n	800477a <_malloc_r+0x4a>
 800480c:	461a      	mov	r2, r3
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	42a3      	cmp	r3, r4
 8004812:	d1fb      	bne.n	800480c <_malloc_r+0xdc>
 8004814:	2300      	movs	r3, #0
 8004816:	6053      	str	r3, [r2, #4]
 8004818:	e7de      	b.n	80047d8 <_malloc_r+0xa8>
 800481a:	230c      	movs	r3, #12
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	4630      	mov	r0, r6
 8004820:	f000 f80c 	bl	800483c <__malloc_unlock>
 8004824:	e794      	b.n	8004750 <_malloc_r+0x20>
 8004826:	6005      	str	r5, [r0, #0]
 8004828:	e7d6      	b.n	80047d8 <_malloc_r+0xa8>
 800482a:	bf00      	nop
 800482c:	20000398 	.word	0x20000398

08004830 <__malloc_lock>:
 8004830:	4801      	ldr	r0, [pc, #4]	@ (8004838 <__malloc_lock+0x8>)
 8004832:	f7ff b8b8 	b.w	80039a6 <__retarget_lock_acquire_recursive>
 8004836:	bf00      	nop
 8004838:	20000390 	.word	0x20000390

0800483c <__malloc_unlock>:
 800483c:	4801      	ldr	r0, [pc, #4]	@ (8004844 <__malloc_unlock+0x8>)
 800483e:	f7ff b8b3 	b.w	80039a8 <__retarget_lock_release_recursive>
 8004842:	bf00      	nop
 8004844:	20000390 	.word	0x20000390

08004848 <_Balloc>:
 8004848:	b570      	push	{r4, r5, r6, lr}
 800484a:	69c6      	ldr	r6, [r0, #28]
 800484c:	4604      	mov	r4, r0
 800484e:	460d      	mov	r5, r1
 8004850:	b976      	cbnz	r6, 8004870 <_Balloc+0x28>
 8004852:	2010      	movs	r0, #16
 8004854:	f7ff ff42 	bl	80046dc <malloc>
 8004858:	4602      	mov	r2, r0
 800485a:	61e0      	str	r0, [r4, #28]
 800485c:	b920      	cbnz	r0, 8004868 <_Balloc+0x20>
 800485e:	4b18      	ldr	r3, [pc, #96]	@ (80048c0 <_Balloc+0x78>)
 8004860:	4818      	ldr	r0, [pc, #96]	@ (80048c4 <_Balloc+0x7c>)
 8004862:	216b      	movs	r1, #107	@ 0x6b
 8004864:	f000 fe12 	bl	800548c <__assert_func>
 8004868:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800486c:	6006      	str	r6, [r0, #0]
 800486e:	60c6      	str	r6, [r0, #12]
 8004870:	69e6      	ldr	r6, [r4, #28]
 8004872:	68f3      	ldr	r3, [r6, #12]
 8004874:	b183      	cbz	r3, 8004898 <_Balloc+0x50>
 8004876:	69e3      	ldr	r3, [r4, #28]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800487e:	b9b8      	cbnz	r0, 80048b0 <_Balloc+0x68>
 8004880:	2101      	movs	r1, #1
 8004882:	fa01 f605 	lsl.w	r6, r1, r5
 8004886:	1d72      	adds	r2, r6, #5
 8004888:	0092      	lsls	r2, r2, #2
 800488a:	4620      	mov	r0, r4
 800488c:	f000 fe1c 	bl	80054c8 <_calloc_r>
 8004890:	b160      	cbz	r0, 80048ac <_Balloc+0x64>
 8004892:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004896:	e00e      	b.n	80048b6 <_Balloc+0x6e>
 8004898:	2221      	movs	r2, #33	@ 0x21
 800489a:	2104      	movs	r1, #4
 800489c:	4620      	mov	r0, r4
 800489e:	f000 fe13 	bl	80054c8 <_calloc_r>
 80048a2:	69e3      	ldr	r3, [r4, #28]
 80048a4:	60f0      	str	r0, [r6, #12]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e4      	bne.n	8004876 <_Balloc+0x2e>
 80048ac:	2000      	movs	r0, #0
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	6802      	ldr	r2, [r0, #0]
 80048b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80048b6:	2300      	movs	r3, #0
 80048b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80048bc:	e7f7      	b.n	80048ae <_Balloc+0x66>
 80048be:	bf00      	nop
 80048c0:	080067d1 	.word	0x080067d1
 80048c4:	08006851 	.word	0x08006851

080048c8 <_Bfree>:
 80048c8:	b570      	push	{r4, r5, r6, lr}
 80048ca:	69c6      	ldr	r6, [r0, #28]
 80048cc:	4605      	mov	r5, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	b976      	cbnz	r6, 80048f0 <_Bfree+0x28>
 80048d2:	2010      	movs	r0, #16
 80048d4:	f7ff ff02 	bl	80046dc <malloc>
 80048d8:	4602      	mov	r2, r0
 80048da:	61e8      	str	r0, [r5, #28]
 80048dc:	b920      	cbnz	r0, 80048e8 <_Bfree+0x20>
 80048de:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <_Bfree+0x3c>)
 80048e0:	4809      	ldr	r0, [pc, #36]	@ (8004908 <_Bfree+0x40>)
 80048e2:	218f      	movs	r1, #143	@ 0x8f
 80048e4:	f000 fdd2 	bl	800548c <__assert_func>
 80048e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80048ec:	6006      	str	r6, [r0, #0]
 80048ee:	60c6      	str	r6, [r0, #12]
 80048f0:	b13c      	cbz	r4, 8004902 <_Bfree+0x3a>
 80048f2:	69eb      	ldr	r3, [r5, #28]
 80048f4:	6862      	ldr	r2, [r4, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048fc:	6021      	str	r1, [r4, #0]
 80048fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004902:	bd70      	pop	{r4, r5, r6, pc}
 8004904:	080067d1 	.word	0x080067d1
 8004908:	08006851 	.word	0x08006851

0800490c <__multadd>:
 800490c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004910:	690d      	ldr	r5, [r1, #16]
 8004912:	4607      	mov	r7, r0
 8004914:	460c      	mov	r4, r1
 8004916:	461e      	mov	r6, r3
 8004918:	f101 0c14 	add.w	ip, r1, #20
 800491c:	2000      	movs	r0, #0
 800491e:	f8dc 3000 	ldr.w	r3, [ip]
 8004922:	b299      	uxth	r1, r3
 8004924:	fb02 6101 	mla	r1, r2, r1, r6
 8004928:	0c1e      	lsrs	r6, r3, #16
 800492a:	0c0b      	lsrs	r3, r1, #16
 800492c:	fb02 3306 	mla	r3, r2, r6, r3
 8004930:	b289      	uxth	r1, r1
 8004932:	3001      	adds	r0, #1
 8004934:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004938:	4285      	cmp	r5, r0
 800493a:	f84c 1b04 	str.w	r1, [ip], #4
 800493e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004942:	dcec      	bgt.n	800491e <__multadd+0x12>
 8004944:	b30e      	cbz	r6, 800498a <__multadd+0x7e>
 8004946:	68a3      	ldr	r3, [r4, #8]
 8004948:	42ab      	cmp	r3, r5
 800494a:	dc19      	bgt.n	8004980 <__multadd+0x74>
 800494c:	6861      	ldr	r1, [r4, #4]
 800494e:	4638      	mov	r0, r7
 8004950:	3101      	adds	r1, #1
 8004952:	f7ff ff79 	bl	8004848 <_Balloc>
 8004956:	4680      	mov	r8, r0
 8004958:	b928      	cbnz	r0, 8004966 <__multadd+0x5a>
 800495a:	4602      	mov	r2, r0
 800495c:	4b0c      	ldr	r3, [pc, #48]	@ (8004990 <__multadd+0x84>)
 800495e:	480d      	ldr	r0, [pc, #52]	@ (8004994 <__multadd+0x88>)
 8004960:	21ba      	movs	r1, #186	@ 0xba
 8004962:	f000 fd93 	bl	800548c <__assert_func>
 8004966:	6922      	ldr	r2, [r4, #16]
 8004968:	3202      	adds	r2, #2
 800496a:	f104 010c 	add.w	r1, r4, #12
 800496e:	0092      	lsls	r2, r2, #2
 8004970:	300c      	adds	r0, #12
 8004972:	f000 fd7d 	bl	8005470 <memcpy>
 8004976:	4621      	mov	r1, r4
 8004978:	4638      	mov	r0, r7
 800497a:	f7ff ffa5 	bl	80048c8 <_Bfree>
 800497e:	4644      	mov	r4, r8
 8004980:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004984:	3501      	adds	r5, #1
 8004986:	615e      	str	r6, [r3, #20]
 8004988:	6125      	str	r5, [r4, #16]
 800498a:	4620      	mov	r0, r4
 800498c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004990:	08006840 	.word	0x08006840
 8004994:	08006851 	.word	0x08006851

08004998 <__hi0bits>:
 8004998:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800499c:	4603      	mov	r3, r0
 800499e:	bf36      	itet	cc
 80049a0:	0403      	lslcc	r3, r0, #16
 80049a2:	2000      	movcs	r0, #0
 80049a4:	2010      	movcc	r0, #16
 80049a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049aa:	bf3c      	itt	cc
 80049ac:	021b      	lslcc	r3, r3, #8
 80049ae:	3008      	addcc	r0, #8
 80049b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049b4:	bf3c      	itt	cc
 80049b6:	011b      	lslcc	r3, r3, #4
 80049b8:	3004      	addcc	r0, #4
 80049ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049be:	bf3c      	itt	cc
 80049c0:	009b      	lslcc	r3, r3, #2
 80049c2:	3002      	addcc	r0, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	db05      	blt.n	80049d4 <__hi0bits+0x3c>
 80049c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80049cc:	f100 0001 	add.w	r0, r0, #1
 80049d0:	bf08      	it	eq
 80049d2:	2020      	moveq	r0, #32
 80049d4:	4770      	bx	lr

080049d6 <__lo0bits>:
 80049d6:	6803      	ldr	r3, [r0, #0]
 80049d8:	4602      	mov	r2, r0
 80049da:	f013 0007 	ands.w	r0, r3, #7
 80049de:	d00b      	beq.n	80049f8 <__lo0bits+0x22>
 80049e0:	07d9      	lsls	r1, r3, #31
 80049e2:	d421      	bmi.n	8004a28 <__lo0bits+0x52>
 80049e4:	0798      	lsls	r0, r3, #30
 80049e6:	bf49      	itett	mi
 80049e8:	085b      	lsrmi	r3, r3, #1
 80049ea:	089b      	lsrpl	r3, r3, #2
 80049ec:	2001      	movmi	r0, #1
 80049ee:	6013      	strmi	r3, [r2, #0]
 80049f0:	bf5c      	itt	pl
 80049f2:	6013      	strpl	r3, [r2, #0]
 80049f4:	2002      	movpl	r0, #2
 80049f6:	4770      	bx	lr
 80049f8:	b299      	uxth	r1, r3
 80049fa:	b909      	cbnz	r1, 8004a00 <__lo0bits+0x2a>
 80049fc:	0c1b      	lsrs	r3, r3, #16
 80049fe:	2010      	movs	r0, #16
 8004a00:	b2d9      	uxtb	r1, r3
 8004a02:	b909      	cbnz	r1, 8004a08 <__lo0bits+0x32>
 8004a04:	3008      	adds	r0, #8
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	0719      	lsls	r1, r3, #28
 8004a0a:	bf04      	itt	eq
 8004a0c:	091b      	lsreq	r3, r3, #4
 8004a0e:	3004      	addeq	r0, #4
 8004a10:	0799      	lsls	r1, r3, #30
 8004a12:	bf04      	itt	eq
 8004a14:	089b      	lsreq	r3, r3, #2
 8004a16:	3002      	addeq	r0, #2
 8004a18:	07d9      	lsls	r1, r3, #31
 8004a1a:	d403      	bmi.n	8004a24 <__lo0bits+0x4e>
 8004a1c:	085b      	lsrs	r3, r3, #1
 8004a1e:	f100 0001 	add.w	r0, r0, #1
 8004a22:	d003      	beq.n	8004a2c <__lo0bits+0x56>
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4770      	bx	lr
 8004a28:	2000      	movs	r0, #0
 8004a2a:	4770      	bx	lr
 8004a2c:	2020      	movs	r0, #32
 8004a2e:	4770      	bx	lr

08004a30 <__i2b>:
 8004a30:	b510      	push	{r4, lr}
 8004a32:	460c      	mov	r4, r1
 8004a34:	2101      	movs	r1, #1
 8004a36:	f7ff ff07 	bl	8004848 <_Balloc>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	b928      	cbnz	r0, 8004a4a <__i2b+0x1a>
 8004a3e:	4b05      	ldr	r3, [pc, #20]	@ (8004a54 <__i2b+0x24>)
 8004a40:	4805      	ldr	r0, [pc, #20]	@ (8004a58 <__i2b+0x28>)
 8004a42:	f240 1145 	movw	r1, #325	@ 0x145
 8004a46:	f000 fd21 	bl	800548c <__assert_func>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	6144      	str	r4, [r0, #20]
 8004a4e:	6103      	str	r3, [r0, #16]
 8004a50:	bd10      	pop	{r4, pc}
 8004a52:	bf00      	nop
 8004a54:	08006840 	.word	0x08006840
 8004a58:	08006851 	.word	0x08006851

08004a5c <__multiply>:
 8004a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a60:	4614      	mov	r4, r2
 8004a62:	690a      	ldr	r2, [r1, #16]
 8004a64:	6923      	ldr	r3, [r4, #16]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	bfa8      	it	ge
 8004a6a:	4623      	movge	r3, r4
 8004a6c:	460f      	mov	r7, r1
 8004a6e:	bfa4      	itt	ge
 8004a70:	460c      	movge	r4, r1
 8004a72:	461f      	movge	r7, r3
 8004a74:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004a78:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	6861      	ldr	r1, [r4, #4]
 8004a80:	eb0a 0609 	add.w	r6, sl, r9
 8004a84:	42b3      	cmp	r3, r6
 8004a86:	b085      	sub	sp, #20
 8004a88:	bfb8      	it	lt
 8004a8a:	3101      	addlt	r1, #1
 8004a8c:	f7ff fedc 	bl	8004848 <_Balloc>
 8004a90:	b930      	cbnz	r0, 8004aa0 <__multiply+0x44>
 8004a92:	4602      	mov	r2, r0
 8004a94:	4b44      	ldr	r3, [pc, #272]	@ (8004ba8 <__multiply+0x14c>)
 8004a96:	4845      	ldr	r0, [pc, #276]	@ (8004bac <__multiply+0x150>)
 8004a98:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004a9c:	f000 fcf6 	bl	800548c <__assert_func>
 8004aa0:	f100 0514 	add.w	r5, r0, #20
 8004aa4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004aa8:	462b      	mov	r3, r5
 8004aaa:	2200      	movs	r2, #0
 8004aac:	4543      	cmp	r3, r8
 8004aae:	d321      	bcc.n	8004af4 <__multiply+0x98>
 8004ab0:	f107 0114 	add.w	r1, r7, #20
 8004ab4:	f104 0214 	add.w	r2, r4, #20
 8004ab8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004abc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004ac0:	9302      	str	r3, [sp, #8]
 8004ac2:	1b13      	subs	r3, r2, r4
 8004ac4:	3b15      	subs	r3, #21
 8004ac6:	f023 0303 	bic.w	r3, r3, #3
 8004aca:	3304      	adds	r3, #4
 8004acc:	f104 0715 	add.w	r7, r4, #21
 8004ad0:	42ba      	cmp	r2, r7
 8004ad2:	bf38      	it	cc
 8004ad4:	2304      	movcc	r3, #4
 8004ad6:	9301      	str	r3, [sp, #4]
 8004ad8:	9b02      	ldr	r3, [sp, #8]
 8004ada:	9103      	str	r1, [sp, #12]
 8004adc:	428b      	cmp	r3, r1
 8004ade:	d80c      	bhi.n	8004afa <__multiply+0x9e>
 8004ae0:	2e00      	cmp	r6, #0
 8004ae2:	dd03      	ble.n	8004aec <__multiply+0x90>
 8004ae4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d05b      	beq.n	8004ba4 <__multiply+0x148>
 8004aec:	6106      	str	r6, [r0, #16]
 8004aee:	b005      	add	sp, #20
 8004af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004af4:	f843 2b04 	str.w	r2, [r3], #4
 8004af8:	e7d8      	b.n	8004aac <__multiply+0x50>
 8004afa:	f8b1 a000 	ldrh.w	sl, [r1]
 8004afe:	f1ba 0f00 	cmp.w	sl, #0
 8004b02:	d024      	beq.n	8004b4e <__multiply+0xf2>
 8004b04:	f104 0e14 	add.w	lr, r4, #20
 8004b08:	46a9      	mov	r9, r5
 8004b0a:	f04f 0c00 	mov.w	ip, #0
 8004b0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004b12:	f8d9 3000 	ldr.w	r3, [r9]
 8004b16:	fa1f fb87 	uxth.w	fp, r7
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	fb0a 330b 	mla	r3, sl, fp, r3
 8004b20:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8004b24:	f8d9 7000 	ldr.w	r7, [r9]
 8004b28:	4463      	add	r3, ip
 8004b2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004b2e:	fb0a c70b 	mla	r7, sl, fp, ip
 8004b32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004b3c:	4572      	cmp	r2, lr
 8004b3e:	f849 3b04 	str.w	r3, [r9], #4
 8004b42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004b46:	d8e2      	bhi.n	8004b0e <__multiply+0xb2>
 8004b48:	9b01      	ldr	r3, [sp, #4]
 8004b4a:	f845 c003 	str.w	ip, [r5, r3]
 8004b4e:	9b03      	ldr	r3, [sp, #12]
 8004b50:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004b54:	3104      	adds	r1, #4
 8004b56:	f1b9 0f00 	cmp.w	r9, #0
 8004b5a:	d021      	beq.n	8004ba0 <__multiply+0x144>
 8004b5c:	682b      	ldr	r3, [r5, #0]
 8004b5e:	f104 0c14 	add.w	ip, r4, #20
 8004b62:	46ae      	mov	lr, r5
 8004b64:	f04f 0a00 	mov.w	sl, #0
 8004b68:	f8bc b000 	ldrh.w	fp, [ip]
 8004b6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004b70:	fb09 770b 	mla	r7, r9, fp, r7
 8004b74:	4457      	add	r7, sl
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004b7c:	f84e 3b04 	str.w	r3, [lr], #4
 8004b80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b88:	f8be 3000 	ldrh.w	r3, [lr]
 8004b8c:	fb09 330a 	mla	r3, r9, sl, r3
 8004b90:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004b94:	4562      	cmp	r2, ip
 8004b96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b9a:	d8e5      	bhi.n	8004b68 <__multiply+0x10c>
 8004b9c:	9f01      	ldr	r7, [sp, #4]
 8004b9e:	51eb      	str	r3, [r5, r7]
 8004ba0:	3504      	adds	r5, #4
 8004ba2:	e799      	b.n	8004ad8 <__multiply+0x7c>
 8004ba4:	3e01      	subs	r6, #1
 8004ba6:	e79b      	b.n	8004ae0 <__multiply+0x84>
 8004ba8:	08006840 	.word	0x08006840
 8004bac:	08006851 	.word	0x08006851

08004bb0 <__pow5mult>:
 8004bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bb4:	4615      	mov	r5, r2
 8004bb6:	f012 0203 	ands.w	r2, r2, #3
 8004bba:	4607      	mov	r7, r0
 8004bbc:	460e      	mov	r6, r1
 8004bbe:	d007      	beq.n	8004bd0 <__pow5mult+0x20>
 8004bc0:	4c25      	ldr	r4, [pc, #148]	@ (8004c58 <__pow5mult+0xa8>)
 8004bc2:	3a01      	subs	r2, #1
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004bca:	f7ff fe9f 	bl	800490c <__multadd>
 8004bce:	4606      	mov	r6, r0
 8004bd0:	10ad      	asrs	r5, r5, #2
 8004bd2:	d03d      	beq.n	8004c50 <__pow5mult+0xa0>
 8004bd4:	69fc      	ldr	r4, [r7, #28]
 8004bd6:	b97c      	cbnz	r4, 8004bf8 <__pow5mult+0x48>
 8004bd8:	2010      	movs	r0, #16
 8004bda:	f7ff fd7f 	bl	80046dc <malloc>
 8004bde:	4602      	mov	r2, r0
 8004be0:	61f8      	str	r0, [r7, #28]
 8004be2:	b928      	cbnz	r0, 8004bf0 <__pow5mult+0x40>
 8004be4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c5c <__pow5mult+0xac>)
 8004be6:	481e      	ldr	r0, [pc, #120]	@ (8004c60 <__pow5mult+0xb0>)
 8004be8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004bec:	f000 fc4e 	bl	800548c <__assert_func>
 8004bf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004bf4:	6004      	str	r4, [r0, #0]
 8004bf6:	60c4      	str	r4, [r0, #12]
 8004bf8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004bfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004c00:	b94c      	cbnz	r4, 8004c16 <__pow5mult+0x66>
 8004c02:	f240 2171 	movw	r1, #625	@ 0x271
 8004c06:	4638      	mov	r0, r7
 8004c08:	f7ff ff12 	bl	8004a30 <__i2b>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004c12:	4604      	mov	r4, r0
 8004c14:	6003      	str	r3, [r0, #0]
 8004c16:	f04f 0900 	mov.w	r9, #0
 8004c1a:	07eb      	lsls	r3, r5, #31
 8004c1c:	d50a      	bpl.n	8004c34 <__pow5mult+0x84>
 8004c1e:	4631      	mov	r1, r6
 8004c20:	4622      	mov	r2, r4
 8004c22:	4638      	mov	r0, r7
 8004c24:	f7ff ff1a 	bl	8004a5c <__multiply>
 8004c28:	4631      	mov	r1, r6
 8004c2a:	4680      	mov	r8, r0
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	f7ff fe4b 	bl	80048c8 <_Bfree>
 8004c32:	4646      	mov	r6, r8
 8004c34:	106d      	asrs	r5, r5, #1
 8004c36:	d00b      	beq.n	8004c50 <__pow5mult+0xa0>
 8004c38:	6820      	ldr	r0, [r4, #0]
 8004c3a:	b938      	cbnz	r0, 8004c4c <__pow5mult+0x9c>
 8004c3c:	4622      	mov	r2, r4
 8004c3e:	4621      	mov	r1, r4
 8004c40:	4638      	mov	r0, r7
 8004c42:	f7ff ff0b 	bl	8004a5c <__multiply>
 8004c46:	6020      	str	r0, [r4, #0]
 8004c48:	f8c0 9000 	str.w	r9, [r0]
 8004c4c:	4604      	mov	r4, r0
 8004c4e:	e7e4      	b.n	8004c1a <__pow5mult+0x6a>
 8004c50:	4630      	mov	r0, r6
 8004c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c56:	bf00      	nop
 8004c58:	080068ac 	.word	0x080068ac
 8004c5c:	080067d1 	.word	0x080067d1
 8004c60:	08006851 	.word	0x08006851

08004c64 <__lshift>:
 8004c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c68:	460c      	mov	r4, r1
 8004c6a:	6849      	ldr	r1, [r1, #4]
 8004c6c:	6923      	ldr	r3, [r4, #16]
 8004c6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004c72:	68a3      	ldr	r3, [r4, #8]
 8004c74:	4607      	mov	r7, r0
 8004c76:	4691      	mov	r9, r2
 8004c78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c7c:	f108 0601 	add.w	r6, r8, #1
 8004c80:	42b3      	cmp	r3, r6
 8004c82:	db0b      	blt.n	8004c9c <__lshift+0x38>
 8004c84:	4638      	mov	r0, r7
 8004c86:	f7ff fddf 	bl	8004848 <_Balloc>
 8004c8a:	4605      	mov	r5, r0
 8004c8c:	b948      	cbnz	r0, 8004ca2 <__lshift+0x3e>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	4b28      	ldr	r3, [pc, #160]	@ (8004d34 <__lshift+0xd0>)
 8004c92:	4829      	ldr	r0, [pc, #164]	@ (8004d38 <__lshift+0xd4>)
 8004c94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004c98:	f000 fbf8 	bl	800548c <__assert_func>
 8004c9c:	3101      	adds	r1, #1
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	e7ee      	b.n	8004c80 <__lshift+0x1c>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f100 0114 	add.w	r1, r0, #20
 8004ca8:	f100 0210 	add.w	r2, r0, #16
 8004cac:	4618      	mov	r0, r3
 8004cae:	4553      	cmp	r3, sl
 8004cb0:	db33      	blt.n	8004d1a <__lshift+0xb6>
 8004cb2:	6920      	ldr	r0, [r4, #16]
 8004cb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004cb8:	f104 0314 	add.w	r3, r4, #20
 8004cbc:	f019 091f 	ands.w	r9, r9, #31
 8004cc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004cc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004cc8:	d02b      	beq.n	8004d22 <__lshift+0xbe>
 8004cca:	f1c9 0e20 	rsb	lr, r9, #32
 8004cce:	468a      	mov	sl, r1
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	fa00 f009 	lsl.w	r0, r0, r9
 8004cd8:	4310      	orrs	r0, r2
 8004cda:	f84a 0b04 	str.w	r0, [sl], #4
 8004cde:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce2:	459c      	cmp	ip, r3
 8004ce4:	fa22 f20e 	lsr.w	r2, r2, lr
 8004ce8:	d8f3      	bhi.n	8004cd2 <__lshift+0x6e>
 8004cea:	ebac 0304 	sub.w	r3, ip, r4
 8004cee:	3b15      	subs	r3, #21
 8004cf0:	f023 0303 	bic.w	r3, r3, #3
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	f104 0015 	add.w	r0, r4, #21
 8004cfa:	4584      	cmp	ip, r0
 8004cfc:	bf38      	it	cc
 8004cfe:	2304      	movcc	r3, #4
 8004d00:	50ca      	str	r2, [r1, r3]
 8004d02:	b10a      	cbz	r2, 8004d08 <__lshift+0xa4>
 8004d04:	f108 0602 	add.w	r6, r8, #2
 8004d08:	3e01      	subs	r6, #1
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	612e      	str	r6, [r5, #16]
 8004d0e:	4621      	mov	r1, r4
 8004d10:	f7ff fdda 	bl	80048c8 <_Bfree>
 8004d14:	4628      	mov	r0, r5
 8004d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004d1e:	3301      	adds	r3, #1
 8004d20:	e7c5      	b.n	8004cae <__lshift+0x4a>
 8004d22:	3904      	subs	r1, #4
 8004d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d28:	f841 2f04 	str.w	r2, [r1, #4]!
 8004d2c:	459c      	cmp	ip, r3
 8004d2e:	d8f9      	bhi.n	8004d24 <__lshift+0xc0>
 8004d30:	e7ea      	b.n	8004d08 <__lshift+0xa4>
 8004d32:	bf00      	nop
 8004d34:	08006840 	.word	0x08006840
 8004d38:	08006851 	.word	0x08006851

08004d3c <__mcmp>:
 8004d3c:	690a      	ldr	r2, [r1, #16]
 8004d3e:	4603      	mov	r3, r0
 8004d40:	6900      	ldr	r0, [r0, #16]
 8004d42:	1a80      	subs	r0, r0, r2
 8004d44:	b530      	push	{r4, r5, lr}
 8004d46:	d10e      	bne.n	8004d66 <__mcmp+0x2a>
 8004d48:	3314      	adds	r3, #20
 8004d4a:	3114      	adds	r1, #20
 8004d4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004d50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004d54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004d58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004d5c:	4295      	cmp	r5, r2
 8004d5e:	d003      	beq.n	8004d68 <__mcmp+0x2c>
 8004d60:	d205      	bcs.n	8004d6e <__mcmp+0x32>
 8004d62:	f04f 30ff 	mov.w	r0, #4294967295
 8004d66:	bd30      	pop	{r4, r5, pc}
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	d3f3      	bcc.n	8004d54 <__mcmp+0x18>
 8004d6c:	e7fb      	b.n	8004d66 <__mcmp+0x2a>
 8004d6e:	2001      	movs	r0, #1
 8004d70:	e7f9      	b.n	8004d66 <__mcmp+0x2a>
	...

08004d74 <__mdiff>:
 8004d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d78:	4689      	mov	r9, r1
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	4611      	mov	r1, r2
 8004d7e:	4648      	mov	r0, r9
 8004d80:	4614      	mov	r4, r2
 8004d82:	f7ff ffdb 	bl	8004d3c <__mcmp>
 8004d86:	1e05      	subs	r5, r0, #0
 8004d88:	d112      	bne.n	8004db0 <__mdiff+0x3c>
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	4630      	mov	r0, r6
 8004d8e:	f7ff fd5b 	bl	8004848 <_Balloc>
 8004d92:	4602      	mov	r2, r0
 8004d94:	b928      	cbnz	r0, 8004da2 <__mdiff+0x2e>
 8004d96:	4b3f      	ldr	r3, [pc, #252]	@ (8004e94 <__mdiff+0x120>)
 8004d98:	f240 2137 	movw	r1, #567	@ 0x237
 8004d9c:	483e      	ldr	r0, [pc, #248]	@ (8004e98 <__mdiff+0x124>)
 8004d9e:	f000 fb75 	bl	800548c <__assert_func>
 8004da2:	2301      	movs	r3, #1
 8004da4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004da8:	4610      	mov	r0, r2
 8004daa:	b003      	add	sp, #12
 8004dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db0:	bfbc      	itt	lt
 8004db2:	464b      	movlt	r3, r9
 8004db4:	46a1      	movlt	r9, r4
 8004db6:	4630      	mov	r0, r6
 8004db8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004dbc:	bfba      	itte	lt
 8004dbe:	461c      	movlt	r4, r3
 8004dc0:	2501      	movlt	r5, #1
 8004dc2:	2500      	movge	r5, #0
 8004dc4:	f7ff fd40 	bl	8004848 <_Balloc>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	b918      	cbnz	r0, 8004dd4 <__mdiff+0x60>
 8004dcc:	4b31      	ldr	r3, [pc, #196]	@ (8004e94 <__mdiff+0x120>)
 8004dce:	f240 2145 	movw	r1, #581	@ 0x245
 8004dd2:	e7e3      	b.n	8004d9c <__mdiff+0x28>
 8004dd4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004dd8:	6926      	ldr	r6, [r4, #16]
 8004dda:	60c5      	str	r5, [r0, #12]
 8004ddc:	f109 0310 	add.w	r3, r9, #16
 8004de0:	f109 0514 	add.w	r5, r9, #20
 8004de4:	f104 0e14 	add.w	lr, r4, #20
 8004de8:	f100 0b14 	add.w	fp, r0, #20
 8004dec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004df0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004df4:	9301      	str	r3, [sp, #4]
 8004df6:	46d9      	mov	r9, fp
 8004df8:	f04f 0c00 	mov.w	ip, #0
 8004dfc:	9b01      	ldr	r3, [sp, #4]
 8004dfe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004e02:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	fa1f f38a 	uxth.w	r3, sl
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	b283      	uxth	r3, r0
 8004e10:	1acb      	subs	r3, r1, r3
 8004e12:	0c00      	lsrs	r0, r0, #16
 8004e14:	4463      	add	r3, ip
 8004e16:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004e1a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004e24:	4576      	cmp	r6, lr
 8004e26:	f849 3b04 	str.w	r3, [r9], #4
 8004e2a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004e2e:	d8e5      	bhi.n	8004dfc <__mdiff+0x88>
 8004e30:	1b33      	subs	r3, r6, r4
 8004e32:	3b15      	subs	r3, #21
 8004e34:	f023 0303 	bic.w	r3, r3, #3
 8004e38:	3415      	adds	r4, #21
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	42a6      	cmp	r6, r4
 8004e3e:	bf38      	it	cc
 8004e40:	2304      	movcc	r3, #4
 8004e42:	441d      	add	r5, r3
 8004e44:	445b      	add	r3, fp
 8004e46:	461e      	mov	r6, r3
 8004e48:	462c      	mov	r4, r5
 8004e4a:	4544      	cmp	r4, r8
 8004e4c:	d30e      	bcc.n	8004e6c <__mdiff+0xf8>
 8004e4e:	f108 0103 	add.w	r1, r8, #3
 8004e52:	1b49      	subs	r1, r1, r5
 8004e54:	f021 0103 	bic.w	r1, r1, #3
 8004e58:	3d03      	subs	r5, #3
 8004e5a:	45a8      	cmp	r8, r5
 8004e5c:	bf38      	it	cc
 8004e5e:	2100      	movcc	r1, #0
 8004e60:	440b      	add	r3, r1
 8004e62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004e66:	b191      	cbz	r1, 8004e8e <__mdiff+0x11a>
 8004e68:	6117      	str	r7, [r2, #16]
 8004e6a:	e79d      	b.n	8004da8 <__mdiff+0x34>
 8004e6c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004e70:	46e6      	mov	lr, ip
 8004e72:	0c08      	lsrs	r0, r1, #16
 8004e74:	fa1c fc81 	uxtah	ip, ip, r1
 8004e78:	4471      	add	r1, lr
 8004e7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004e7e:	b289      	uxth	r1, r1
 8004e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004e84:	f846 1b04 	str.w	r1, [r6], #4
 8004e88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004e8c:	e7dd      	b.n	8004e4a <__mdiff+0xd6>
 8004e8e:	3f01      	subs	r7, #1
 8004e90:	e7e7      	b.n	8004e62 <__mdiff+0xee>
 8004e92:	bf00      	nop
 8004e94:	08006840 	.word	0x08006840
 8004e98:	08006851 	.word	0x08006851

08004e9c <__d2b>:
 8004e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ea0:	460f      	mov	r7, r1
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	ec59 8b10 	vmov	r8, r9, d0
 8004ea8:	4616      	mov	r6, r2
 8004eaa:	f7ff fccd 	bl	8004848 <_Balloc>
 8004eae:	4604      	mov	r4, r0
 8004eb0:	b930      	cbnz	r0, 8004ec0 <__d2b+0x24>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	4b23      	ldr	r3, [pc, #140]	@ (8004f44 <__d2b+0xa8>)
 8004eb6:	4824      	ldr	r0, [pc, #144]	@ (8004f48 <__d2b+0xac>)
 8004eb8:	f240 310f 	movw	r1, #783	@ 0x30f
 8004ebc:	f000 fae6 	bl	800548c <__assert_func>
 8004ec0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004ec4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ec8:	b10d      	cbz	r5, 8004ece <__d2b+0x32>
 8004eca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ece:	9301      	str	r3, [sp, #4]
 8004ed0:	f1b8 0300 	subs.w	r3, r8, #0
 8004ed4:	d023      	beq.n	8004f1e <__d2b+0x82>
 8004ed6:	4668      	mov	r0, sp
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	f7ff fd7c 	bl	80049d6 <__lo0bits>
 8004ede:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004ee2:	b1d0      	cbz	r0, 8004f1a <__d2b+0x7e>
 8004ee4:	f1c0 0320 	rsb	r3, r0, #32
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	430b      	orrs	r3, r1
 8004eee:	40c2      	lsrs	r2, r0
 8004ef0:	6163      	str	r3, [r4, #20]
 8004ef2:	9201      	str	r2, [sp, #4]
 8004ef4:	9b01      	ldr	r3, [sp, #4]
 8004ef6:	61a3      	str	r3, [r4, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bf0c      	ite	eq
 8004efc:	2201      	moveq	r2, #1
 8004efe:	2202      	movne	r2, #2
 8004f00:	6122      	str	r2, [r4, #16]
 8004f02:	b1a5      	cbz	r5, 8004f2e <__d2b+0x92>
 8004f04:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004f08:	4405      	add	r5, r0
 8004f0a:	603d      	str	r5, [r7, #0]
 8004f0c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004f10:	6030      	str	r0, [r6, #0]
 8004f12:	4620      	mov	r0, r4
 8004f14:	b003      	add	sp, #12
 8004f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004f1a:	6161      	str	r1, [r4, #20]
 8004f1c:	e7ea      	b.n	8004ef4 <__d2b+0x58>
 8004f1e:	a801      	add	r0, sp, #4
 8004f20:	f7ff fd59 	bl	80049d6 <__lo0bits>
 8004f24:	9b01      	ldr	r3, [sp, #4]
 8004f26:	6163      	str	r3, [r4, #20]
 8004f28:	3020      	adds	r0, #32
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	e7e8      	b.n	8004f00 <__d2b+0x64>
 8004f2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004f32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004f36:	6038      	str	r0, [r7, #0]
 8004f38:	6918      	ldr	r0, [r3, #16]
 8004f3a:	f7ff fd2d 	bl	8004998 <__hi0bits>
 8004f3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004f42:	e7e5      	b.n	8004f10 <__d2b+0x74>
 8004f44:	08006840 	.word	0x08006840
 8004f48:	08006851 	.word	0x08006851

08004f4c <__sfputc_r>:
 8004f4c:	6893      	ldr	r3, [r2, #8]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	b410      	push	{r4}
 8004f54:	6093      	str	r3, [r2, #8]
 8004f56:	da08      	bge.n	8004f6a <__sfputc_r+0x1e>
 8004f58:	6994      	ldr	r4, [r2, #24]
 8004f5a:	42a3      	cmp	r3, r4
 8004f5c:	db01      	blt.n	8004f62 <__sfputc_r+0x16>
 8004f5e:	290a      	cmp	r1, #10
 8004f60:	d103      	bne.n	8004f6a <__sfputc_r+0x1e>
 8004f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f66:	f000 b9df 	b.w	8005328 <__swbuf_r>
 8004f6a:	6813      	ldr	r3, [r2, #0]
 8004f6c:	1c58      	adds	r0, r3, #1
 8004f6e:	6010      	str	r0, [r2, #0]
 8004f70:	7019      	strb	r1, [r3, #0]
 8004f72:	4608      	mov	r0, r1
 8004f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <__sfputs_r>:
 8004f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7c:	4606      	mov	r6, r0
 8004f7e:	460f      	mov	r7, r1
 8004f80:	4614      	mov	r4, r2
 8004f82:	18d5      	adds	r5, r2, r3
 8004f84:	42ac      	cmp	r4, r5
 8004f86:	d101      	bne.n	8004f8c <__sfputs_r+0x12>
 8004f88:	2000      	movs	r0, #0
 8004f8a:	e007      	b.n	8004f9c <__sfputs_r+0x22>
 8004f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f90:	463a      	mov	r2, r7
 8004f92:	4630      	mov	r0, r6
 8004f94:	f7ff ffda 	bl	8004f4c <__sfputc_r>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d1f3      	bne.n	8004f84 <__sfputs_r+0xa>
 8004f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004fa0 <_vfiprintf_r>:
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa4:	460d      	mov	r5, r1
 8004fa6:	b09d      	sub	sp, #116	@ 0x74
 8004fa8:	4614      	mov	r4, r2
 8004faa:	4698      	mov	r8, r3
 8004fac:	4606      	mov	r6, r0
 8004fae:	b118      	cbz	r0, 8004fb8 <_vfiprintf_r+0x18>
 8004fb0:	6a03      	ldr	r3, [r0, #32]
 8004fb2:	b90b      	cbnz	r3, 8004fb8 <_vfiprintf_r+0x18>
 8004fb4:	f7fe fbee 	bl	8003794 <__sinit>
 8004fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fba:	07d9      	lsls	r1, r3, #31
 8004fbc:	d405      	bmi.n	8004fca <_vfiprintf_r+0x2a>
 8004fbe:	89ab      	ldrh	r3, [r5, #12]
 8004fc0:	059a      	lsls	r2, r3, #22
 8004fc2:	d402      	bmi.n	8004fca <_vfiprintf_r+0x2a>
 8004fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fc6:	f7fe fcee 	bl	80039a6 <__retarget_lock_acquire_recursive>
 8004fca:	89ab      	ldrh	r3, [r5, #12]
 8004fcc:	071b      	lsls	r3, r3, #28
 8004fce:	d501      	bpl.n	8004fd4 <_vfiprintf_r+0x34>
 8004fd0:	692b      	ldr	r3, [r5, #16]
 8004fd2:	b99b      	cbnz	r3, 8004ffc <_vfiprintf_r+0x5c>
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	4630      	mov	r0, r6
 8004fd8:	f000 f9e4 	bl	80053a4 <__swsetup_r>
 8004fdc:	b170      	cbz	r0, 8004ffc <_vfiprintf_r+0x5c>
 8004fde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fe0:	07dc      	lsls	r4, r3, #31
 8004fe2:	d504      	bpl.n	8004fee <_vfiprintf_r+0x4e>
 8004fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fe8:	b01d      	add	sp, #116	@ 0x74
 8004fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fee:	89ab      	ldrh	r3, [r5, #12]
 8004ff0:	0598      	lsls	r0, r3, #22
 8004ff2:	d4f7      	bmi.n	8004fe4 <_vfiprintf_r+0x44>
 8004ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ff6:	f7fe fcd7 	bl	80039a8 <__retarget_lock_release_recursive>
 8004ffa:	e7f3      	b.n	8004fe4 <_vfiprintf_r+0x44>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005000:	2320      	movs	r3, #32
 8005002:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005006:	f8cd 800c 	str.w	r8, [sp, #12]
 800500a:	2330      	movs	r3, #48	@ 0x30
 800500c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051bc <_vfiprintf_r+0x21c>
 8005010:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005014:	f04f 0901 	mov.w	r9, #1
 8005018:	4623      	mov	r3, r4
 800501a:	469a      	mov	sl, r3
 800501c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005020:	b10a      	cbz	r2, 8005026 <_vfiprintf_r+0x86>
 8005022:	2a25      	cmp	r2, #37	@ 0x25
 8005024:	d1f9      	bne.n	800501a <_vfiprintf_r+0x7a>
 8005026:	ebba 0b04 	subs.w	fp, sl, r4
 800502a:	d00b      	beq.n	8005044 <_vfiprintf_r+0xa4>
 800502c:	465b      	mov	r3, fp
 800502e:	4622      	mov	r2, r4
 8005030:	4629      	mov	r1, r5
 8005032:	4630      	mov	r0, r6
 8005034:	f7ff ffa1 	bl	8004f7a <__sfputs_r>
 8005038:	3001      	adds	r0, #1
 800503a:	f000 80a7 	beq.w	800518c <_vfiprintf_r+0x1ec>
 800503e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005040:	445a      	add	r2, fp
 8005042:	9209      	str	r2, [sp, #36]	@ 0x24
 8005044:	f89a 3000 	ldrb.w	r3, [sl]
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 809f 	beq.w	800518c <_vfiprintf_r+0x1ec>
 800504e:	2300      	movs	r3, #0
 8005050:	f04f 32ff 	mov.w	r2, #4294967295
 8005054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005058:	f10a 0a01 	add.w	sl, sl, #1
 800505c:	9304      	str	r3, [sp, #16]
 800505e:	9307      	str	r3, [sp, #28]
 8005060:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005064:	931a      	str	r3, [sp, #104]	@ 0x68
 8005066:	4654      	mov	r4, sl
 8005068:	2205      	movs	r2, #5
 800506a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506e:	4853      	ldr	r0, [pc, #332]	@ (80051bc <_vfiprintf_r+0x21c>)
 8005070:	f7fb f8b6 	bl	80001e0 <memchr>
 8005074:	9a04      	ldr	r2, [sp, #16]
 8005076:	b9d8      	cbnz	r0, 80050b0 <_vfiprintf_r+0x110>
 8005078:	06d1      	lsls	r1, r2, #27
 800507a:	bf44      	itt	mi
 800507c:	2320      	movmi	r3, #32
 800507e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005082:	0713      	lsls	r3, r2, #28
 8005084:	bf44      	itt	mi
 8005086:	232b      	movmi	r3, #43	@ 0x2b
 8005088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800508c:	f89a 3000 	ldrb.w	r3, [sl]
 8005090:	2b2a      	cmp	r3, #42	@ 0x2a
 8005092:	d015      	beq.n	80050c0 <_vfiprintf_r+0x120>
 8005094:	9a07      	ldr	r2, [sp, #28]
 8005096:	4654      	mov	r4, sl
 8005098:	2000      	movs	r0, #0
 800509a:	f04f 0c0a 	mov.w	ip, #10
 800509e:	4621      	mov	r1, r4
 80050a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050a4:	3b30      	subs	r3, #48	@ 0x30
 80050a6:	2b09      	cmp	r3, #9
 80050a8:	d94b      	bls.n	8005142 <_vfiprintf_r+0x1a2>
 80050aa:	b1b0      	cbz	r0, 80050da <_vfiprintf_r+0x13a>
 80050ac:	9207      	str	r2, [sp, #28]
 80050ae:	e014      	b.n	80050da <_vfiprintf_r+0x13a>
 80050b0:	eba0 0308 	sub.w	r3, r0, r8
 80050b4:	fa09 f303 	lsl.w	r3, r9, r3
 80050b8:	4313      	orrs	r3, r2
 80050ba:	9304      	str	r3, [sp, #16]
 80050bc:	46a2      	mov	sl, r4
 80050be:	e7d2      	b.n	8005066 <_vfiprintf_r+0xc6>
 80050c0:	9b03      	ldr	r3, [sp, #12]
 80050c2:	1d19      	adds	r1, r3, #4
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	9103      	str	r1, [sp, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bfbb      	ittet	lt
 80050cc:	425b      	neglt	r3, r3
 80050ce:	f042 0202 	orrlt.w	r2, r2, #2
 80050d2:	9307      	strge	r3, [sp, #28]
 80050d4:	9307      	strlt	r3, [sp, #28]
 80050d6:	bfb8      	it	lt
 80050d8:	9204      	strlt	r2, [sp, #16]
 80050da:	7823      	ldrb	r3, [r4, #0]
 80050dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80050de:	d10a      	bne.n	80050f6 <_vfiprintf_r+0x156>
 80050e0:	7863      	ldrb	r3, [r4, #1]
 80050e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80050e4:	d132      	bne.n	800514c <_vfiprintf_r+0x1ac>
 80050e6:	9b03      	ldr	r3, [sp, #12]
 80050e8:	1d1a      	adds	r2, r3, #4
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	9203      	str	r2, [sp, #12]
 80050ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050f2:	3402      	adds	r4, #2
 80050f4:	9305      	str	r3, [sp, #20]
 80050f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80051cc <_vfiprintf_r+0x22c>
 80050fa:	7821      	ldrb	r1, [r4, #0]
 80050fc:	2203      	movs	r2, #3
 80050fe:	4650      	mov	r0, sl
 8005100:	f7fb f86e 	bl	80001e0 <memchr>
 8005104:	b138      	cbz	r0, 8005116 <_vfiprintf_r+0x176>
 8005106:	9b04      	ldr	r3, [sp, #16]
 8005108:	eba0 000a 	sub.w	r0, r0, sl
 800510c:	2240      	movs	r2, #64	@ 0x40
 800510e:	4082      	lsls	r2, r0
 8005110:	4313      	orrs	r3, r2
 8005112:	3401      	adds	r4, #1
 8005114:	9304      	str	r3, [sp, #16]
 8005116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800511a:	4829      	ldr	r0, [pc, #164]	@ (80051c0 <_vfiprintf_r+0x220>)
 800511c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005120:	2206      	movs	r2, #6
 8005122:	f7fb f85d 	bl	80001e0 <memchr>
 8005126:	2800      	cmp	r0, #0
 8005128:	d03f      	beq.n	80051aa <_vfiprintf_r+0x20a>
 800512a:	4b26      	ldr	r3, [pc, #152]	@ (80051c4 <_vfiprintf_r+0x224>)
 800512c:	bb1b      	cbnz	r3, 8005176 <_vfiprintf_r+0x1d6>
 800512e:	9b03      	ldr	r3, [sp, #12]
 8005130:	3307      	adds	r3, #7
 8005132:	f023 0307 	bic.w	r3, r3, #7
 8005136:	3308      	adds	r3, #8
 8005138:	9303      	str	r3, [sp, #12]
 800513a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800513c:	443b      	add	r3, r7
 800513e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005140:	e76a      	b.n	8005018 <_vfiprintf_r+0x78>
 8005142:	fb0c 3202 	mla	r2, ip, r2, r3
 8005146:	460c      	mov	r4, r1
 8005148:	2001      	movs	r0, #1
 800514a:	e7a8      	b.n	800509e <_vfiprintf_r+0xfe>
 800514c:	2300      	movs	r3, #0
 800514e:	3401      	adds	r4, #1
 8005150:	9305      	str	r3, [sp, #20]
 8005152:	4619      	mov	r1, r3
 8005154:	f04f 0c0a 	mov.w	ip, #10
 8005158:	4620      	mov	r0, r4
 800515a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800515e:	3a30      	subs	r2, #48	@ 0x30
 8005160:	2a09      	cmp	r2, #9
 8005162:	d903      	bls.n	800516c <_vfiprintf_r+0x1cc>
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0c6      	beq.n	80050f6 <_vfiprintf_r+0x156>
 8005168:	9105      	str	r1, [sp, #20]
 800516a:	e7c4      	b.n	80050f6 <_vfiprintf_r+0x156>
 800516c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005170:	4604      	mov	r4, r0
 8005172:	2301      	movs	r3, #1
 8005174:	e7f0      	b.n	8005158 <_vfiprintf_r+0x1b8>
 8005176:	ab03      	add	r3, sp, #12
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	462a      	mov	r2, r5
 800517c:	4b12      	ldr	r3, [pc, #72]	@ (80051c8 <_vfiprintf_r+0x228>)
 800517e:	a904      	add	r1, sp, #16
 8005180:	4630      	mov	r0, r6
 8005182:	f7fd fec3 	bl	8002f0c <_printf_float>
 8005186:	4607      	mov	r7, r0
 8005188:	1c78      	adds	r0, r7, #1
 800518a:	d1d6      	bne.n	800513a <_vfiprintf_r+0x19a>
 800518c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800518e:	07d9      	lsls	r1, r3, #31
 8005190:	d405      	bmi.n	800519e <_vfiprintf_r+0x1fe>
 8005192:	89ab      	ldrh	r3, [r5, #12]
 8005194:	059a      	lsls	r2, r3, #22
 8005196:	d402      	bmi.n	800519e <_vfiprintf_r+0x1fe>
 8005198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800519a:	f7fe fc05 	bl	80039a8 <__retarget_lock_release_recursive>
 800519e:	89ab      	ldrh	r3, [r5, #12]
 80051a0:	065b      	lsls	r3, r3, #25
 80051a2:	f53f af1f 	bmi.w	8004fe4 <_vfiprintf_r+0x44>
 80051a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051a8:	e71e      	b.n	8004fe8 <_vfiprintf_r+0x48>
 80051aa:	ab03      	add	r3, sp, #12
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	462a      	mov	r2, r5
 80051b0:	4b05      	ldr	r3, [pc, #20]	@ (80051c8 <_vfiprintf_r+0x228>)
 80051b2:	a904      	add	r1, sp, #16
 80051b4:	4630      	mov	r0, r6
 80051b6:	f7fe f941 	bl	800343c <_printf_i>
 80051ba:	e7e4      	b.n	8005186 <_vfiprintf_r+0x1e6>
 80051bc:	080069a8 	.word	0x080069a8
 80051c0:	080069b2 	.word	0x080069b2
 80051c4:	08002f0d 	.word	0x08002f0d
 80051c8:	08004f7b 	.word	0x08004f7b
 80051cc:	080069ae 	.word	0x080069ae

080051d0 <__sflush_r>:
 80051d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051d8:	0716      	lsls	r6, r2, #28
 80051da:	4605      	mov	r5, r0
 80051dc:	460c      	mov	r4, r1
 80051de:	d454      	bmi.n	800528a <__sflush_r+0xba>
 80051e0:	684b      	ldr	r3, [r1, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	dc02      	bgt.n	80051ec <__sflush_r+0x1c>
 80051e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	dd48      	ble.n	800527e <__sflush_r+0xae>
 80051ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051ee:	2e00      	cmp	r6, #0
 80051f0:	d045      	beq.n	800527e <__sflush_r+0xae>
 80051f2:	2300      	movs	r3, #0
 80051f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80051f8:	682f      	ldr	r7, [r5, #0]
 80051fa:	6a21      	ldr	r1, [r4, #32]
 80051fc:	602b      	str	r3, [r5, #0]
 80051fe:	d030      	beq.n	8005262 <__sflush_r+0x92>
 8005200:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	0759      	lsls	r1, r3, #29
 8005206:	d505      	bpl.n	8005214 <__sflush_r+0x44>
 8005208:	6863      	ldr	r3, [r4, #4]
 800520a:	1ad2      	subs	r2, r2, r3
 800520c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800520e:	b10b      	cbz	r3, 8005214 <__sflush_r+0x44>
 8005210:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005212:	1ad2      	subs	r2, r2, r3
 8005214:	2300      	movs	r3, #0
 8005216:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005218:	6a21      	ldr	r1, [r4, #32]
 800521a:	4628      	mov	r0, r5
 800521c:	47b0      	blx	r6
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	89a3      	ldrh	r3, [r4, #12]
 8005222:	d106      	bne.n	8005232 <__sflush_r+0x62>
 8005224:	6829      	ldr	r1, [r5, #0]
 8005226:	291d      	cmp	r1, #29
 8005228:	d82b      	bhi.n	8005282 <__sflush_r+0xb2>
 800522a:	4a2a      	ldr	r2, [pc, #168]	@ (80052d4 <__sflush_r+0x104>)
 800522c:	410a      	asrs	r2, r1
 800522e:	07d6      	lsls	r6, r2, #31
 8005230:	d427      	bmi.n	8005282 <__sflush_r+0xb2>
 8005232:	2200      	movs	r2, #0
 8005234:	6062      	str	r2, [r4, #4]
 8005236:	04d9      	lsls	r1, r3, #19
 8005238:	6922      	ldr	r2, [r4, #16]
 800523a:	6022      	str	r2, [r4, #0]
 800523c:	d504      	bpl.n	8005248 <__sflush_r+0x78>
 800523e:	1c42      	adds	r2, r0, #1
 8005240:	d101      	bne.n	8005246 <__sflush_r+0x76>
 8005242:	682b      	ldr	r3, [r5, #0]
 8005244:	b903      	cbnz	r3, 8005248 <__sflush_r+0x78>
 8005246:	6560      	str	r0, [r4, #84]	@ 0x54
 8005248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800524a:	602f      	str	r7, [r5, #0]
 800524c:	b1b9      	cbz	r1, 800527e <__sflush_r+0xae>
 800524e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005252:	4299      	cmp	r1, r3
 8005254:	d002      	beq.n	800525c <__sflush_r+0x8c>
 8005256:	4628      	mov	r0, r5
 8005258:	f7ff f9f6 	bl	8004648 <_free_r>
 800525c:	2300      	movs	r3, #0
 800525e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005260:	e00d      	b.n	800527e <__sflush_r+0xae>
 8005262:	2301      	movs	r3, #1
 8005264:	4628      	mov	r0, r5
 8005266:	47b0      	blx	r6
 8005268:	4602      	mov	r2, r0
 800526a:	1c50      	adds	r0, r2, #1
 800526c:	d1c9      	bne.n	8005202 <__sflush_r+0x32>
 800526e:	682b      	ldr	r3, [r5, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0c6      	beq.n	8005202 <__sflush_r+0x32>
 8005274:	2b1d      	cmp	r3, #29
 8005276:	d001      	beq.n	800527c <__sflush_r+0xac>
 8005278:	2b16      	cmp	r3, #22
 800527a:	d11e      	bne.n	80052ba <__sflush_r+0xea>
 800527c:	602f      	str	r7, [r5, #0]
 800527e:	2000      	movs	r0, #0
 8005280:	e022      	b.n	80052c8 <__sflush_r+0xf8>
 8005282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005286:	b21b      	sxth	r3, r3
 8005288:	e01b      	b.n	80052c2 <__sflush_r+0xf2>
 800528a:	690f      	ldr	r7, [r1, #16]
 800528c:	2f00      	cmp	r7, #0
 800528e:	d0f6      	beq.n	800527e <__sflush_r+0xae>
 8005290:	0793      	lsls	r3, r2, #30
 8005292:	680e      	ldr	r6, [r1, #0]
 8005294:	bf08      	it	eq
 8005296:	694b      	ldreq	r3, [r1, #20]
 8005298:	600f      	str	r7, [r1, #0]
 800529a:	bf18      	it	ne
 800529c:	2300      	movne	r3, #0
 800529e:	eba6 0807 	sub.w	r8, r6, r7
 80052a2:	608b      	str	r3, [r1, #8]
 80052a4:	f1b8 0f00 	cmp.w	r8, #0
 80052a8:	dde9      	ble.n	800527e <__sflush_r+0xae>
 80052aa:	6a21      	ldr	r1, [r4, #32]
 80052ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80052ae:	4643      	mov	r3, r8
 80052b0:	463a      	mov	r2, r7
 80052b2:	4628      	mov	r0, r5
 80052b4:	47b0      	blx	r6
 80052b6:	2800      	cmp	r0, #0
 80052b8:	dc08      	bgt.n	80052cc <__sflush_r+0xfc>
 80052ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052c2:	81a3      	strh	r3, [r4, #12]
 80052c4:	f04f 30ff 	mov.w	r0, #4294967295
 80052c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052cc:	4407      	add	r7, r0
 80052ce:	eba8 0800 	sub.w	r8, r8, r0
 80052d2:	e7e7      	b.n	80052a4 <__sflush_r+0xd4>
 80052d4:	dfbffffe 	.word	0xdfbffffe

080052d8 <_fflush_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	690b      	ldr	r3, [r1, #16]
 80052dc:	4605      	mov	r5, r0
 80052de:	460c      	mov	r4, r1
 80052e0:	b913      	cbnz	r3, 80052e8 <_fflush_r+0x10>
 80052e2:	2500      	movs	r5, #0
 80052e4:	4628      	mov	r0, r5
 80052e6:	bd38      	pop	{r3, r4, r5, pc}
 80052e8:	b118      	cbz	r0, 80052f2 <_fflush_r+0x1a>
 80052ea:	6a03      	ldr	r3, [r0, #32]
 80052ec:	b90b      	cbnz	r3, 80052f2 <_fflush_r+0x1a>
 80052ee:	f7fe fa51 	bl	8003794 <__sinit>
 80052f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f3      	beq.n	80052e2 <_fflush_r+0xa>
 80052fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052fc:	07d0      	lsls	r0, r2, #31
 80052fe:	d404      	bmi.n	800530a <_fflush_r+0x32>
 8005300:	0599      	lsls	r1, r3, #22
 8005302:	d402      	bmi.n	800530a <_fflush_r+0x32>
 8005304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005306:	f7fe fb4e 	bl	80039a6 <__retarget_lock_acquire_recursive>
 800530a:	4628      	mov	r0, r5
 800530c:	4621      	mov	r1, r4
 800530e:	f7ff ff5f 	bl	80051d0 <__sflush_r>
 8005312:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005314:	07da      	lsls	r2, r3, #31
 8005316:	4605      	mov	r5, r0
 8005318:	d4e4      	bmi.n	80052e4 <_fflush_r+0xc>
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	059b      	lsls	r3, r3, #22
 800531e:	d4e1      	bmi.n	80052e4 <_fflush_r+0xc>
 8005320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005322:	f7fe fb41 	bl	80039a8 <__retarget_lock_release_recursive>
 8005326:	e7dd      	b.n	80052e4 <_fflush_r+0xc>

08005328 <__swbuf_r>:
 8005328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532a:	460e      	mov	r6, r1
 800532c:	4614      	mov	r4, r2
 800532e:	4605      	mov	r5, r0
 8005330:	b118      	cbz	r0, 800533a <__swbuf_r+0x12>
 8005332:	6a03      	ldr	r3, [r0, #32]
 8005334:	b90b      	cbnz	r3, 800533a <__swbuf_r+0x12>
 8005336:	f7fe fa2d 	bl	8003794 <__sinit>
 800533a:	69a3      	ldr	r3, [r4, #24]
 800533c:	60a3      	str	r3, [r4, #8]
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	071a      	lsls	r2, r3, #28
 8005342:	d501      	bpl.n	8005348 <__swbuf_r+0x20>
 8005344:	6923      	ldr	r3, [r4, #16]
 8005346:	b943      	cbnz	r3, 800535a <__swbuf_r+0x32>
 8005348:	4621      	mov	r1, r4
 800534a:	4628      	mov	r0, r5
 800534c:	f000 f82a 	bl	80053a4 <__swsetup_r>
 8005350:	b118      	cbz	r0, 800535a <__swbuf_r+0x32>
 8005352:	f04f 37ff 	mov.w	r7, #4294967295
 8005356:	4638      	mov	r0, r7
 8005358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	6922      	ldr	r2, [r4, #16]
 800535e:	1a98      	subs	r0, r3, r2
 8005360:	6963      	ldr	r3, [r4, #20]
 8005362:	b2f6      	uxtb	r6, r6
 8005364:	4283      	cmp	r3, r0
 8005366:	4637      	mov	r7, r6
 8005368:	dc05      	bgt.n	8005376 <__swbuf_r+0x4e>
 800536a:	4621      	mov	r1, r4
 800536c:	4628      	mov	r0, r5
 800536e:	f7ff ffb3 	bl	80052d8 <_fflush_r>
 8005372:	2800      	cmp	r0, #0
 8005374:	d1ed      	bne.n	8005352 <__swbuf_r+0x2a>
 8005376:	68a3      	ldr	r3, [r4, #8]
 8005378:	3b01      	subs	r3, #1
 800537a:	60a3      	str	r3, [r4, #8]
 800537c:	6823      	ldr	r3, [r4, #0]
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	6022      	str	r2, [r4, #0]
 8005382:	701e      	strb	r6, [r3, #0]
 8005384:	6962      	ldr	r2, [r4, #20]
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	429a      	cmp	r2, r3
 800538a:	d004      	beq.n	8005396 <__swbuf_r+0x6e>
 800538c:	89a3      	ldrh	r3, [r4, #12]
 800538e:	07db      	lsls	r3, r3, #31
 8005390:	d5e1      	bpl.n	8005356 <__swbuf_r+0x2e>
 8005392:	2e0a      	cmp	r6, #10
 8005394:	d1df      	bne.n	8005356 <__swbuf_r+0x2e>
 8005396:	4621      	mov	r1, r4
 8005398:	4628      	mov	r0, r5
 800539a:	f7ff ff9d 	bl	80052d8 <_fflush_r>
 800539e:	2800      	cmp	r0, #0
 80053a0:	d0d9      	beq.n	8005356 <__swbuf_r+0x2e>
 80053a2:	e7d6      	b.n	8005352 <__swbuf_r+0x2a>

080053a4 <__swsetup_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4b29      	ldr	r3, [pc, #164]	@ (800544c <__swsetup_r+0xa8>)
 80053a8:	4605      	mov	r5, r0
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	460c      	mov	r4, r1
 80053ae:	b118      	cbz	r0, 80053b8 <__swsetup_r+0x14>
 80053b0:	6a03      	ldr	r3, [r0, #32]
 80053b2:	b90b      	cbnz	r3, 80053b8 <__swsetup_r+0x14>
 80053b4:	f7fe f9ee 	bl	8003794 <__sinit>
 80053b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053bc:	0719      	lsls	r1, r3, #28
 80053be:	d422      	bmi.n	8005406 <__swsetup_r+0x62>
 80053c0:	06da      	lsls	r2, r3, #27
 80053c2:	d407      	bmi.n	80053d4 <__swsetup_r+0x30>
 80053c4:	2209      	movs	r2, #9
 80053c6:	602a      	str	r2, [r5, #0]
 80053c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053cc:	81a3      	strh	r3, [r4, #12]
 80053ce:	f04f 30ff 	mov.w	r0, #4294967295
 80053d2:	e033      	b.n	800543c <__swsetup_r+0x98>
 80053d4:	0758      	lsls	r0, r3, #29
 80053d6:	d512      	bpl.n	80053fe <__swsetup_r+0x5a>
 80053d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053da:	b141      	cbz	r1, 80053ee <__swsetup_r+0x4a>
 80053dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053e0:	4299      	cmp	r1, r3
 80053e2:	d002      	beq.n	80053ea <__swsetup_r+0x46>
 80053e4:	4628      	mov	r0, r5
 80053e6:	f7ff f92f 	bl	8004648 <_free_r>
 80053ea:	2300      	movs	r3, #0
 80053ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80053f4:	81a3      	strh	r3, [r4, #12]
 80053f6:	2300      	movs	r3, #0
 80053f8:	6063      	str	r3, [r4, #4]
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	89a3      	ldrh	r3, [r4, #12]
 8005400:	f043 0308 	orr.w	r3, r3, #8
 8005404:	81a3      	strh	r3, [r4, #12]
 8005406:	6923      	ldr	r3, [r4, #16]
 8005408:	b94b      	cbnz	r3, 800541e <__swsetup_r+0x7a>
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005414:	d003      	beq.n	800541e <__swsetup_r+0x7a>
 8005416:	4621      	mov	r1, r4
 8005418:	4628      	mov	r0, r5
 800541a:	f000 f8c1 	bl	80055a0 <__smakebuf_r>
 800541e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005422:	f013 0201 	ands.w	r2, r3, #1
 8005426:	d00a      	beq.n	800543e <__swsetup_r+0x9a>
 8005428:	2200      	movs	r2, #0
 800542a:	60a2      	str	r2, [r4, #8]
 800542c:	6962      	ldr	r2, [r4, #20]
 800542e:	4252      	negs	r2, r2
 8005430:	61a2      	str	r2, [r4, #24]
 8005432:	6922      	ldr	r2, [r4, #16]
 8005434:	b942      	cbnz	r2, 8005448 <__swsetup_r+0xa4>
 8005436:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800543a:	d1c5      	bne.n	80053c8 <__swsetup_r+0x24>
 800543c:	bd38      	pop	{r3, r4, r5, pc}
 800543e:	0799      	lsls	r1, r3, #30
 8005440:	bf58      	it	pl
 8005442:	6962      	ldrpl	r2, [r4, #20]
 8005444:	60a2      	str	r2, [r4, #8]
 8005446:	e7f4      	b.n	8005432 <__swsetup_r+0x8e>
 8005448:	2000      	movs	r0, #0
 800544a:	e7f7      	b.n	800543c <__swsetup_r+0x98>
 800544c:	20000020 	.word	0x20000020

08005450 <_sbrk_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	4d06      	ldr	r5, [pc, #24]	@ (800546c <_sbrk_r+0x1c>)
 8005454:	2300      	movs	r3, #0
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	f7fc f84a 	bl	80014f4 <_sbrk>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_sbrk_r+0x1a>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_sbrk_r+0x1a>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	2000038c 	.word	0x2000038c

08005470 <memcpy>:
 8005470:	440a      	add	r2, r1
 8005472:	4291      	cmp	r1, r2
 8005474:	f100 33ff 	add.w	r3, r0, #4294967295
 8005478:	d100      	bne.n	800547c <memcpy+0xc>
 800547a:	4770      	bx	lr
 800547c:	b510      	push	{r4, lr}
 800547e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005486:	4291      	cmp	r1, r2
 8005488:	d1f9      	bne.n	800547e <memcpy+0xe>
 800548a:	bd10      	pop	{r4, pc}

0800548c <__assert_func>:
 800548c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800548e:	4614      	mov	r4, r2
 8005490:	461a      	mov	r2, r3
 8005492:	4b09      	ldr	r3, [pc, #36]	@ (80054b8 <__assert_func+0x2c>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4605      	mov	r5, r0
 8005498:	68d8      	ldr	r0, [r3, #12]
 800549a:	b954      	cbnz	r4, 80054b2 <__assert_func+0x26>
 800549c:	4b07      	ldr	r3, [pc, #28]	@ (80054bc <__assert_func+0x30>)
 800549e:	461c      	mov	r4, r3
 80054a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054a4:	9100      	str	r1, [sp, #0]
 80054a6:	462b      	mov	r3, r5
 80054a8:	4905      	ldr	r1, [pc, #20]	@ (80054c0 <__assert_func+0x34>)
 80054aa:	f000 f841 	bl	8005530 <fiprintf>
 80054ae:	f000 f8d5 	bl	800565c <abort>
 80054b2:	4b04      	ldr	r3, [pc, #16]	@ (80054c4 <__assert_func+0x38>)
 80054b4:	e7f4      	b.n	80054a0 <__assert_func+0x14>
 80054b6:	bf00      	nop
 80054b8:	20000020 	.word	0x20000020
 80054bc:	080069fe 	.word	0x080069fe
 80054c0:	080069d0 	.word	0x080069d0
 80054c4:	080069c3 	.word	0x080069c3

080054c8 <_calloc_r>:
 80054c8:	b570      	push	{r4, r5, r6, lr}
 80054ca:	fba1 5402 	umull	r5, r4, r1, r2
 80054ce:	b93c      	cbnz	r4, 80054e0 <_calloc_r+0x18>
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7ff f92d 	bl	8004730 <_malloc_r>
 80054d6:	4606      	mov	r6, r0
 80054d8:	b928      	cbnz	r0, 80054e6 <_calloc_r+0x1e>
 80054da:	2600      	movs	r6, #0
 80054dc:	4630      	mov	r0, r6
 80054de:	bd70      	pop	{r4, r5, r6, pc}
 80054e0:	220c      	movs	r2, #12
 80054e2:	6002      	str	r2, [r0, #0]
 80054e4:	e7f9      	b.n	80054da <_calloc_r+0x12>
 80054e6:	462a      	mov	r2, r5
 80054e8:	4621      	mov	r1, r4
 80054ea:	f7fe f9de 	bl	80038aa <memset>
 80054ee:	e7f5      	b.n	80054dc <_calloc_r+0x14>

080054f0 <__ascii_mbtowc>:
 80054f0:	b082      	sub	sp, #8
 80054f2:	b901      	cbnz	r1, 80054f6 <__ascii_mbtowc+0x6>
 80054f4:	a901      	add	r1, sp, #4
 80054f6:	b142      	cbz	r2, 800550a <__ascii_mbtowc+0x1a>
 80054f8:	b14b      	cbz	r3, 800550e <__ascii_mbtowc+0x1e>
 80054fa:	7813      	ldrb	r3, [r2, #0]
 80054fc:	600b      	str	r3, [r1, #0]
 80054fe:	7812      	ldrb	r2, [r2, #0]
 8005500:	1e10      	subs	r0, r2, #0
 8005502:	bf18      	it	ne
 8005504:	2001      	movne	r0, #1
 8005506:	b002      	add	sp, #8
 8005508:	4770      	bx	lr
 800550a:	4610      	mov	r0, r2
 800550c:	e7fb      	b.n	8005506 <__ascii_mbtowc+0x16>
 800550e:	f06f 0001 	mvn.w	r0, #1
 8005512:	e7f8      	b.n	8005506 <__ascii_mbtowc+0x16>

08005514 <__ascii_wctomb>:
 8005514:	4603      	mov	r3, r0
 8005516:	4608      	mov	r0, r1
 8005518:	b141      	cbz	r1, 800552c <__ascii_wctomb+0x18>
 800551a:	2aff      	cmp	r2, #255	@ 0xff
 800551c:	d904      	bls.n	8005528 <__ascii_wctomb+0x14>
 800551e:	228a      	movs	r2, #138	@ 0x8a
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	f04f 30ff 	mov.w	r0, #4294967295
 8005526:	4770      	bx	lr
 8005528:	700a      	strb	r2, [r1, #0]
 800552a:	2001      	movs	r0, #1
 800552c:	4770      	bx	lr
	...

08005530 <fiprintf>:
 8005530:	b40e      	push	{r1, r2, r3}
 8005532:	b503      	push	{r0, r1, lr}
 8005534:	4601      	mov	r1, r0
 8005536:	ab03      	add	r3, sp, #12
 8005538:	4805      	ldr	r0, [pc, #20]	@ (8005550 <fiprintf+0x20>)
 800553a:	f853 2b04 	ldr.w	r2, [r3], #4
 800553e:	6800      	ldr	r0, [r0, #0]
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	f7ff fd2d 	bl	8004fa0 <_vfiprintf_r>
 8005546:	b002      	add	sp, #8
 8005548:	f85d eb04 	ldr.w	lr, [sp], #4
 800554c:	b003      	add	sp, #12
 800554e:	4770      	bx	lr
 8005550:	20000020 	.word	0x20000020

08005554 <__swhatbuf_r>:
 8005554:	b570      	push	{r4, r5, r6, lr}
 8005556:	460c      	mov	r4, r1
 8005558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800555c:	2900      	cmp	r1, #0
 800555e:	b096      	sub	sp, #88	@ 0x58
 8005560:	4615      	mov	r5, r2
 8005562:	461e      	mov	r6, r3
 8005564:	da0d      	bge.n	8005582 <__swhatbuf_r+0x2e>
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800556c:	f04f 0100 	mov.w	r1, #0
 8005570:	bf14      	ite	ne
 8005572:	2340      	movne	r3, #64	@ 0x40
 8005574:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005578:	2000      	movs	r0, #0
 800557a:	6031      	str	r1, [r6, #0]
 800557c:	602b      	str	r3, [r5, #0]
 800557e:	b016      	add	sp, #88	@ 0x58
 8005580:	bd70      	pop	{r4, r5, r6, pc}
 8005582:	466a      	mov	r2, sp
 8005584:	f000 f848 	bl	8005618 <_fstat_r>
 8005588:	2800      	cmp	r0, #0
 800558a:	dbec      	blt.n	8005566 <__swhatbuf_r+0x12>
 800558c:	9901      	ldr	r1, [sp, #4]
 800558e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005592:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005596:	4259      	negs	r1, r3
 8005598:	4159      	adcs	r1, r3
 800559a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800559e:	e7eb      	b.n	8005578 <__swhatbuf_r+0x24>

080055a0 <__smakebuf_r>:
 80055a0:	898b      	ldrh	r3, [r1, #12]
 80055a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055a4:	079d      	lsls	r5, r3, #30
 80055a6:	4606      	mov	r6, r0
 80055a8:	460c      	mov	r4, r1
 80055aa:	d507      	bpl.n	80055bc <__smakebuf_r+0x1c>
 80055ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	6123      	str	r3, [r4, #16]
 80055b4:	2301      	movs	r3, #1
 80055b6:	6163      	str	r3, [r4, #20]
 80055b8:	b003      	add	sp, #12
 80055ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055bc:	ab01      	add	r3, sp, #4
 80055be:	466a      	mov	r2, sp
 80055c0:	f7ff ffc8 	bl	8005554 <__swhatbuf_r>
 80055c4:	9f00      	ldr	r7, [sp, #0]
 80055c6:	4605      	mov	r5, r0
 80055c8:	4639      	mov	r1, r7
 80055ca:	4630      	mov	r0, r6
 80055cc:	f7ff f8b0 	bl	8004730 <_malloc_r>
 80055d0:	b948      	cbnz	r0, 80055e6 <__smakebuf_r+0x46>
 80055d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055d6:	059a      	lsls	r2, r3, #22
 80055d8:	d4ee      	bmi.n	80055b8 <__smakebuf_r+0x18>
 80055da:	f023 0303 	bic.w	r3, r3, #3
 80055de:	f043 0302 	orr.w	r3, r3, #2
 80055e2:	81a3      	strh	r3, [r4, #12]
 80055e4:	e7e2      	b.n	80055ac <__smakebuf_r+0xc>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	6020      	str	r0, [r4, #0]
 80055ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055ee:	81a3      	strh	r3, [r4, #12]
 80055f0:	9b01      	ldr	r3, [sp, #4]
 80055f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055f6:	b15b      	cbz	r3, 8005610 <__smakebuf_r+0x70>
 80055f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055fc:	4630      	mov	r0, r6
 80055fe:	f000 f81d 	bl	800563c <_isatty_r>
 8005602:	b128      	cbz	r0, 8005610 <__smakebuf_r+0x70>
 8005604:	89a3      	ldrh	r3, [r4, #12]
 8005606:	f023 0303 	bic.w	r3, r3, #3
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	81a3      	strh	r3, [r4, #12]
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	431d      	orrs	r5, r3
 8005614:	81a5      	strh	r5, [r4, #12]
 8005616:	e7cf      	b.n	80055b8 <__smakebuf_r+0x18>

08005618 <_fstat_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d07      	ldr	r5, [pc, #28]	@ (8005638 <_fstat_r+0x20>)
 800561c:	2300      	movs	r3, #0
 800561e:	4604      	mov	r4, r0
 8005620:	4608      	mov	r0, r1
 8005622:	4611      	mov	r1, r2
 8005624:	602b      	str	r3, [r5, #0]
 8005626:	f7fb ff3c 	bl	80014a2 <_fstat>
 800562a:	1c43      	adds	r3, r0, #1
 800562c:	d102      	bne.n	8005634 <_fstat_r+0x1c>
 800562e:	682b      	ldr	r3, [r5, #0]
 8005630:	b103      	cbz	r3, 8005634 <_fstat_r+0x1c>
 8005632:	6023      	str	r3, [r4, #0]
 8005634:	bd38      	pop	{r3, r4, r5, pc}
 8005636:	bf00      	nop
 8005638:	2000038c 	.word	0x2000038c

0800563c <_isatty_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d06      	ldr	r5, [pc, #24]	@ (8005658 <_isatty_r+0x1c>)
 8005640:	2300      	movs	r3, #0
 8005642:	4604      	mov	r4, r0
 8005644:	4608      	mov	r0, r1
 8005646:	602b      	str	r3, [r5, #0]
 8005648:	f7fb ff3b 	bl	80014c2 <_isatty>
 800564c:	1c43      	adds	r3, r0, #1
 800564e:	d102      	bne.n	8005656 <_isatty_r+0x1a>
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	b103      	cbz	r3, 8005656 <_isatty_r+0x1a>
 8005654:	6023      	str	r3, [r4, #0]
 8005656:	bd38      	pop	{r3, r4, r5, pc}
 8005658:	2000038c 	.word	0x2000038c

0800565c <abort>:
 800565c:	b508      	push	{r3, lr}
 800565e:	2006      	movs	r0, #6
 8005660:	f000 f82c 	bl	80056bc <raise>
 8005664:	2001      	movs	r0, #1
 8005666:	f7fb fee8 	bl	800143a <_exit>

0800566a <_raise_r>:
 800566a:	291f      	cmp	r1, #31
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	4605      	mov	r5, r0
 8005670:	460c      	mov	r4, r1
 8005672:	d904      	bls.n	800567e <_raise_r+0x14>
 8005674:	2316      	movs	r3, #22
 8005676:	6003      	str	r3, [r0, #0]
 8005678:	f04f 30ff 	mov.w	r0, #4294967295
 800567c:	bd38      	pop	{r3, r4, r5, pc}
 800567e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005680:	b112      	cbz	r2, 8005688 <_raise_r+0x1e>
 8005682:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005686:	b94b      	cbnz	r3, 800569c <_raise_r+0x32>
 8005688:	4628      	mov	r0, r5
 800568a:	f000 f831 	bl	80056f0 <_getpid_r>
 800568e:	4622      	mov	r2, r4
 8005690:	4601      	mov	r1, r0
 8005692:	4628      	mov	r0, r5
 8005694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005698:	f000 b818 	b.w	80056cc <_kill_r>
 800569c:	2b01      	cmp	r3, #1
 800569e:	d00a      	beq.n	80056b6 <_raise_r+0x4c>
 80056a0:	1c59      	adds	r1, r3, #1
 80056a2:	d103      	bne.n	80056ac <_raise_r+0x42>
 80056a4:	2316      	movs	r3, #22
 80056a6:	6003      	str	r3, [r0, #0]
 80056a8:	2001      	movs	r0, #1
 80056aa:	e7e7      	b.n	800567c <_raise_r+0x12>
 80056ac:	2100      	movs	r1, #0
 80056ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80056b2:	4620      	mov	r0, r4
 80056b4:	4798      	blx	r3
 80056b6:	2000      	movs	r0, #0
 80056b8:	e7e0      	b.n	800567c <_raise_r+0x12>
	...

080056bc <raise>:
 80056bc:	4b02      	ldr	r3, [pc, #8]	@ (80056c8 <raise+0xc>)
 80056be:	4601      	mov	r1, r0
 80056c0:	6818      	ldr	r0, [r3, #0]
 80056c2:	f7ff bfd2 	b.w	800566a <_raise_r>
 80056c6:	bf00      	nop
 80056c8:	20000020 	.word	0x20000020

080056cc <_kill_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	4d07      	ldr	r5, [pc, #28]	@ (80056ec <_kill_r+0x20>)
 80056d0:	2300      	movs	r3, #0
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	602b      	str	r3, [r5, #0]
 80056da:	f7fb fe9e 	bl	800141a <_kill>
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	d102      	bne.n	80056e8 <_kill_r+0x1c>
 80056e2:	682b      	ldr	r3, [r5, #0]
 80056e4:	b103      	cbz	r3, 80056e8 <_kill_r+0x1c>
 80056e6:	6023      	str	r3, [r4, #0]
 80056e8:	bd38      	pop	{r3, r4, r5, pc}
 80056ea:	bf00      	nop
 80056ec:	2000038c 	.word	0x2000038c

080056f0 <_getpid_r>:
 80056f0:	f7fb be8b 	b.w	800140a <_getpid>
 80056f4:	0000      	movs	r0, r0
	...

080056f8 <sin>:
 80056f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056fa:	ec53 2b10 	vmov	r2, r3, d0
 80056fe:	4826      	ldr	r0, [pc, #152]	@ (8005798 <sin+0xa0>)
 8005700:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005704:	4281      	cmp	r1, r0
 8005706:	d807      	bhi.n	8005718 <sin+0x20>
 8005708:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005790 <sin+0x98>
 800570c:	2000      	movs	r0, #0
 800570e:	b005      	add	sp, #20
 8005710:	f85d eb04 	ldr.w	lr, [sp], #4
 8005714:	f000 b90c 	b.w	8005930 <__kernel_sin>
 8005718:	4820      	ldr	r0, [pc, #128]	@ (800579c <sin+0xa4>)
 800571a:	4281      	cmp	r1, r0
 800571c:	d908      	bls.n	8005730 <sin+0x38>
 800571e:	4610      	mov	r0, r2
 8005720:	4619      	mov	r1, r3
 8005722:	f7fa fdb9 	bl	8000298 <__aeabi_dsub>
 8005726:	ec41 0b10 	vmov	d0, r0, r1
 800572a:	b005      	add	sp, #20
 800572c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005730:	4668      	mov	r0, sp
 8005732:	f000 f9b9 	bl	8005aa8 <__ieee754_rem_pio2>
 8005736:	f000 0003 	and.w	r0, r0, #3
 800573a:	2801      	cmp	r0, #1
 800573c:	d00c      	beq.n	8005758 <sin+0x60>
 800573e:	2802      	cmp	r0, #2
 8005740:	d011      	beq.n	8005766 <sin+0x6e>
 8005742:	b9e8      	cbnz	r0, 8005780 <sin+0x88>
 8005744:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005748:	ed9d 0b00 	vldr	d0, [sp]
 800574c:	2001      	movs	r0, #1
 800574e:	f000 f8ef 	bl	8005930 <__kernel_sin>
 8005752:	ec51 0b10 	vmov	r0, r1, d0
 8005756:	e7e6      	b.n	8005726 <sin+0x2e>
 8005758:	ed9d 1b02 	vldr	d1, [sp, #8]
 800575c:	ed9d 0b00 	vldr	d0, [sp]
 8005760:	f000 f81e 	bl	80057a0 <__kernel_cos>
 8005764:	e7f5      	b.n	8005752 <sin+0x5a>
 8005766:	ed9d 1b02 	vldr	d1, [sp, #8]
 800576a:	ed9d 0b00 	vldr	d0, [sp]
 800576e:	2001      	movs	r0, #1
 8005770:	f000 f8de 	bl	8005930 <__kernel_sin>
 8005774:	ec53 2b10 	vmov	r2, r3, d0
 8005778:	4610      	mov	r0, r2
 800577a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800577e:	e7d2      	b.n	8005726 <sin+0x2e>
 8005780:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005784:	ed9d 0b00 	vldr	d0, [sp]
 8005788:	f000 f80a 	bl	80057a0 <__kernel_cos>
 800578c:	e7f2      	b.n	8005774 <sin+0x7c>
 800578e:	bf00      	nop
	...
 8005798:	3fe921fb 	.word	0x3fe921fb
 800579c:	7fefffff 	.word	0x7fefffff

080057a0 <__kernel_cos>:
 80057a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a4:	ec57 6b10 	vmov	r6, r7, d0
 80057a8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80057ac:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80057b0:	ed8d 1b00 	vstr	d1, [sp]
 80057b4:	d206      	bcs.n	80057c4 <__kernel_cos+0x24>
 80057b6:	4630      	mov	r0, r6
 80057b8:	4639      	mov	r1, r7
 80057ba:	f7fb f9d5 	bl	8000b68 <__aeabi_d2iz>
 80057be:	2800      	cmp	r0, #0
 80057c0:	f000 8088 	beq.w	80058d4 <__kernel_cos+0x134>
 80057c4:	4632      	mov	r2, r6
 80057c6:	463b      	mov	r3, r7
 80057c8:	4630      	mov	r0, r6
 80057ca:	4639      	mov	r1, r7
 80057cc:	f7fa ff1c 	bl	8000608 <__aeabi_dmul>
 80057d0:	4b51      	ldr	r3, [pc, #324]	@ (8005918 <__kernel_cos+0x178>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	4604      	mov	r4, r0
 80057d6:	460d      	mov	r5, r1
 80057d8:	f7fa ff16 	bl	8000608 <__aeabi_dmul>
 80057dc:	a340      	add	r3, pc, #256	@ (adr r3, 80058e0 <__kernel_cos+0x140>)
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e2:	4682      	mov	sl, r0
 80057e4:	468b      	mov	fp, r1
 80057e6:	4620      	mov	r0, r4
 80057e8:	4629      	mov	r1, r5
 80057ea:	f7fa ff0d 	bl	8000608 <__aeabi_dmul>
 80057ee:	a33e      	add	r3, pc, #248	@ (adr r3, 80058e8 <__kernel_cos+0x148>)
 80057f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f4:	f7fa fd52 	bl	800029c <__adddf3>
 80057f8:	4622      	mov	r2, r4
 80057fa:	462b      	mov	r3, r5
 80057fc:	f7fa ff04 	bl	8000608 <__aeabi_dmul>
 8005800:	a33b      	add	r3, pc, #236	@ (adr r3, 80058f0 <__kernel_cos+0x150>)
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	f7fa fd47 	bl	8000298 <__aeabi_dsub>
 800580a:	4622      	mov	r2, r4
 800580c:	462b      	mov	r3, r5
 800580e:	f7fa fefb 	bl	8000608 <__aeabi_dmul>
 8005812:	a339      	add	r3, pc, #228	@ (adr r3, 80058f8 <__kernel_cos+0x158>)
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	f7fa fd40 	bl	800029c <__adddf3>
 800581c:	4622      	mov	r2, r4
 800581e:	462b      	mov	r3, r5
 8005820:	f7fa fef2 	bl	8000608 <__aeabi_dmul>
 8005824:	a336      	add	r3, pc, #216	@ (adr r3, 8005900 <__kernel_cos+0x160>)
 8005826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582a:	f7fa fd35 	bl	8000298 <__aeabi_dsub>
 800582e:	4622      	mov	r2, r4
 8005830:	462b      	mov	r3, r5
 8005832:	f7fa fee9 	bl	8000608 <__aeabi_dmul>
 8005836:	a334      	add	r3, pc, #208	@ (adr r3, 8005908 <__kernel_cos+0x168>)
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	f7fa fd2e 	bl	800029c <__adddf3>
 8005840:	4622      	mov	r2, r4
 8005842:	462b      	mov	r3, r5
 8005844:	f7fa fee0 	bl	8000608 <__aeabi_dmul>
 8005848:	4622      	mov	r2, r4
 800584a:	462b      	mov	r3, r5
 800584c:	f7fa fedc 	bl	8000608 <__aeabi_dmul>
 8005850:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005854:	4604      	mov	r4, r0
 8005856:	460d      	mov	r5, r1
 8005858:	4630      	mov	r0, r6
 800585a:	4639      	mov	r1, r7
 800585c:	f7fa fed4 	bl	8000608 <__aeabi_dmul>
 8005860:	460b      	mov	r3, r1
 8005862:	4602      	mov	r2, r0
 8005864:	4629      	mov	r1, r5
 8005866:	4620      	mov	r0, r4
 8005868:	f7fa fd16 	bl	8000298 <__aeabi_dsub>
 800586c:	4b2b      	ldr	r3, [pc, #172]	@ (800591c <__kernel_cos+0x17c>)
 800586e:	4598      	cmp	r8, r3
 8005870:	4606      	mov	r6, r0
 8005872:	460f      	mov	r7, r1
 8005874:	d810      	bhi.n	8005898 <__kernel_cos+0xf8>
 8005876:	4602      	mov	r2, r0
 8005878:	460b      	mov	r3, r1
 800587a:	4650      	mov	r0, sl
 800587c:	4659      	mov	r1, fp
 800587e:	f7fa fd0b 	bl	8000298 <__aeabi_dsub>
 8005882:	460b      	mov	r3, r1
 8005884:	4926      	ldr	r1, [pc, #152]	@ (8005920 <__kernel_cos+0x180>)
 8005886:	4602      	mov	r2, r0
 8005888:	2000      	movs	r0, #0
 800588a:	f7fa fd05 	bl	8000298 <__aeabi_dsub>
 800588e:	ec41 0b10 	vmov	d0, r0, r1
 8005892:	b003      	add	sp, #12
 8005894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005898:	4b22      	ldr	r3, [pc, #136]	@ (8005924 <__kernel_cos+0x184>)
 800589a:	4921      	ldr	r1, [pc, #132]	@ (8005920 <__kernel_cos+0x180>)
 800589c:	4598      	cmp	r8, r3
 800589e:	bf8c      	ite	hi
 80058a0:	4d21      	ldrhi	r5, [pc, #132]	@ (8005928 <__kernel_cos+0x188>)
 80058a2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80058a6:	2400      	movs	r4, #0
 80058a8:	4622      	mov	r2, r4
 80058aa:	462b      	mov	r3, r5
 80058ac:	2000      	movs	r0, #0
 80058ae:	f7fa fcf3 	bl	8000298 <__aeabi_dsub>
 80058b2:	4622      	mov	r2, r4
 80058b4:	4680      	mov	r8, r0
 80058b6:	4689      	mov	r9, r1
 80058b8:	462b      	mov	r3, r5
 80058ba:	4650      	mov	r0, sl
 80058bc:	4659      	mov	r1, fp
 80058be:	f7fa fceb 	bl	8000298 <__aeabi_dsub>
 80058c2:	4632      	mov	r2, r6
 80058c4:	463b      	mov	r3, r7
 80058c6:	f7fa fce7 	bl	8000298 <__aeabi_dsub>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4640      	mov	r0, r8
 80058d0:	4649      	mov	r1, r9
 80058d2:	e7da      	b.n	800588a <__kernel_cos+0xea>
 80058d4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8005910 <__kernel_cos+0x170>
 80058d8:	e7db      	b.n	8005892 <__kernel_cos+0xf2>
 80058da:	bf00      	nop
 80058dc:	f3af 8000 	nop.w
 80058e0:	be8838d4 	.word	0xbe8838d4
 80058e4:	bda8fae9 	.word	0xbda8fae9
 80058e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80058ec:	3e21ee9e 	.word	0x3e21ee9e
 80058f0:	809c52ad 	.word	0x809c52ad
 80058f4:	3e927e4f 	.word	0x3e927e4f
 80058f8:	19cb1590 	.word	0x19cb1590
 80058fc:	3efa01a0 	.word	0x3efa01a0
 8005900:	16c15177 	.word	0x16c15177
 8005904:	3f56c16c 	.word	0x3f56c16c
 8005908:	5555554c 	.word	0x5555554c
 800590c:	3fa55555 	.word	0x3fa55555
 8005910:	00000000 	.word	0x00000000
 8005914:	3ff00000 	.word	0x3ff00000
 8005918:	3fe00000 	.word	0x3fe00000
 800591c:	3fd33332 	.word	0x3fd33332
 8005920:	3ff00000 	.word	0x3ff00000
 8005924:	3fe90000 	.word	0x3fe90000
 8005928:	3fd20000 	.word	0x3fd20000
 800592c:	00000000 	.word	0x00000000

08005930 <__kernel_sin>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	ec55 4b10 	vmov	r4, r5, d0
 8005938:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800593c:	b085      	sub	sp, #20
 800593e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8005942:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005946:	4680      	mov	r8, r0
 8005948:	d205      	bcs.n	8005956 <__kernel_sin+0x26>
 800594a:	4620      	mov	r0, r4
 800594c:	4629      	mov	r1, r5
 800594e:	f7fb f90b 	bl	8000b68 <__aeabi_d2iz>
 8005952:	2800      	cmp	r0, #0
 8005954:	d052      	beq.n	80059fc <__kernel_sin+0xcc>
 8005956:	4622      	mov	r2, r4
 8005958:	462b      	mov	r3, r5
 800595a:	4620      	mov	r0, r4
 800595c:	4629      	mov	r1, r5
 800595e:	f7fa fe53 	bl	8000608 <__aeabi_dmul>
 8005962:	4682      	mov	sl, r0
 8005964:	468b      	mov	fp, r1
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4620      	mov	r0, r4
 800596c:	4629      	mov	r1, r5
 800596e:	f7fa fe4b 	bl	8000608 <__aeabi_dmul>
 8005972:	a342      	add	r3, pc, #264	@ (adr r3, 8005a7c <__kernel_sin+0x14c>)
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	e9cd 0100 	strd	r0, r1, [sp]
 800597c:	4650      	mov	r0, sl
 800597e:	4659      	mov	r1, fp
 8005980:	f7fa fe42 	bl	8000608 <__aeabi_dmul>
 8005984:	a33f      	add	r3, pc, #252	@ (adr r3, 8005a84 <__kernel_sin+0x154>)
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	f7fa fc85 	bl	8000298 <__aeabi_dsub>
 800598e:	4652      	mov	r2, sl
 8005990:	465b      	mov	r3, fp
 8005992:	f7fa fe39 	bl	8000608 <__aeabi_dmul>
 8005996:	a33d      	add	r3, pc, #244	@ (adr r3, 8005a8c <__kernel_sin+0x15c>)
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	f7fa fc7e 	bl	800029c <__adddf3>
 80059a0:	4652      	mov	r2, sl
 80059a2:	465b      	mov	r3, fp
 80059a4:	f7fa fe30 	bl	8000608 <__aeabi_dmul>
 80059a8:	a33a      	add	r3, pc, #232	@ (adr r3, 8005a94 <__kernel_sin+0x164>)
 80059aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ae:	f7fa fc73 	bl	8000298 <__aeabi_dsub>
 80059b2:	4652      	mov	r2, sl
 80059b4:	465b      	mov	r3, fp
 80059b6:	f7fa fe27 	bl	8000608 <__aeabi_dmul>
 80059ba:	a338      	add	r3, pc, #224	@ (adr r3, 8005a9c <__kernel_sin+0x16c>)
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	f7fa fc6c 	bl	800029c <__adddf3>
 80059c4:	4606      	mov	r6, r0
 80059c6:	460f      	mov	r7, r1
 80059c8:	f1b8 0f00 	cmp.w	r8, #0
 80059cc:	d11b      	bne.n	8005a06 <__kernel_sin+0xd6>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4650      	mov	r0, sl
 80059d4:	4659      	mov	r1, fp
 80059d6:	f7fa fe17 	bl	8000608 <__aeabi_dmul>
 80059da:	a325      	add	r3, pc, #148	@ (adr r3, 8005a70 <__kernel_sin+0x140>)
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f7fa fc5a 	bl	8000298 <__aeabi_dsub>
 80059e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059e8:	f7fa fe0e 	bl	8000608 <__aeabi_dmul>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4620      	mov	r0, r4
 80059f2:	4629      	mov	r1, r5
 80059f4:	f7fa fc52 	bl	800029c <__adddf3>
 80059f8:	4604      	mov	r4, r0
 80059fa:	460d      	mov	r5, r1
 80059fc:	ec45 4b10 	vmov	d0, r4, r5
 8005a00:	b005      	add	sp, #20
 8005a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a78 <__kernel_sin+0x148>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f7fa fdfb 	bl	8000608 <__aeabi_dmul>
 8005a12:	4632      	mov	r2, r6
 8005a14:	4680      	mov	r8, r0
 8005a16:	4689      	mov	r9, r1
 8005a18:	463b      	mov	r3, r7
 8005a1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a1e:	f7fa fdf3 	bl	8000608 <__aeabi_dmul>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4640      	mov	r0, r8
 8005a28:	4649      	mov	r1, r9
 8005a2a:	f7fa fc35 	bl	8000298 <__aeabi_dsub>
 8005a2e:	4652      	mov	r2, sl
 8005a30:	465b      	mov	r3, fp
 8005a32:	f7fa fde9 	bl	8000608 <__aeabi_dmul>
 8005a36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a3a:	f7fa fc2d 	bl	8000298 <__aeabi_dsub>
 8005a3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005a70 <__kernel_sin+0x140>)
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	4606      	mov	r6, r0
 8005a46:	460f      	mov	r7, r1
 8005a48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a4c:	f7fa fddc 	bl	8000608 <__aeabi_dmul>
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4630      	mov	r0, r6
 8005a56:	4639      	mov	r1, r7
 8005a58:	f7fa fc20 	bl	800029c <__adddf3>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	460b      	mov	r3, r1
 8005a60:	4620      	mov	r0, r4
 8005a62:	4629      	mov	r1, r5
 8005a64:	f7fa fc18 	bl	8000298 <__aeabi_dsub>
 8005a68:	e7c6      	b.n	80059f8 <__kernel_sin+0xc8>
 8005a6a:	bf00      	nop
 8005a6c:	f3af 8000 	nop.w
 8005a70:	55555549 	.word	0x55555549
 8005a74:	3fc55555 	.word	0x3fc55555
 8005a78:	3fe00000 	.word	0x3fe00000
 8005a7c:	5acfd57c 	.word	0x5acfd57c
 8005a80:	3de5d93a 	.word	0x3de5d93a
 8005a84:	8a2b9ceb 	.word	0x8a2b9ceb
 8005a88:	3e5ae5e6 	.word	0x3e5ae5e6
 8005a8c:	57b1fe7d 	.word	0x57b1fe7d
 8005a90:	3ec71de3 	.word	0x3ec71de3
 8005a94:	19c161d5 	.word	0x19c161d5
 8005a98:	3f2a01a0 	.word	0x3f2a01a0
 8005a9c:	1110f8a6 	.word	0x1110f8a6
 8005aa0:	3f811111 	.word	0x3f811111
 8005aa4:	00000000 	.word	0x00000000

08005aa8 <__ieee754_rem_pio2>:
 8005aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aac:	ec57 6b10 	vmov	r6, r7, d0
 8005ab0:	4bc5      	ldr	r3, [pc, #788]	@ (8005dc8 <__ieee754_rem_pio2+0x320>)
 8005ab2:	b08d      	sub	sp, #52	@ 0x34
 8005ab4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8005ab8:	4598      	cmp	r8, r3
 8005aba:	4604      	mov	r4, r0
 8005abc:	9704      	str	r7, [sp, #16]
 8005abe:	d807      	bhi.n	8005ad0 <__ieee754_rem_pio2+0x28>
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	ed80 0b00 	vstr	d0, [r0]
 8005ac8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005acc:	2500      	movs	r5, #0
 8005ace:	e028      	b.n	8005b22 <__ieee754_rem_pio2+0x7a>
 8005ad0:	4bbe      	ldr	r3, [pc, #760]	@ (8005dcc <__ieee754_rem_pio2+0x324>)
 8005ad2:	4598      	cmp	r8, r3
 8005ad4:	d878      	bhi.n	8005bc8 <__ieee754_rem_pio2+0x120>
 8005ad6:	9b04      	ldr	r3, [sp, #16]
 8005ad8:	4dbd      	ldr	r5, [pc, #756]	@ (8005dd0 <__ieee754_rem_pio2+0x328>)
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	4630      	mov	r0, r6
 8005ade:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005d90 <__ieee754_rem_pio2+0x2e8>)
 8005ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae4:	4639      	mov	r1, r7
 8005ae6:	dd38      	ble.n	8005b5a <__ieee754_rem_pio2+0xb2>
 8005ae8:	f7fa fbd6 	bl	8000298 <__aeabi_dsub>
 8005aec:	45a8      	cmp	r8, r5
 8005aee:	4606      	mov	r6, r0
 8005af0:	460f      	mov	r7, r1
 8005af2:	d01a      	beq.n	8005b2a <__ieee754_rem_pio2+0x82>
 8005af4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005d98 <__ieee754_rem_pio2+0x2f0>)
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f7fa fbcd 	bl	8000298 <__aeabi_dsub>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	4680      	mov	r8, r0
 8005b04:	4689      	mov	r9, r1
 8005b06:	4630      	mov	r0, r6
 8005b08:	4639      	mov	r1, r7
 8005b0a:	f7fa fbc5 	bl	8000298 <__aeabi_dsub>
 8005b0e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005d98 <__ieee754_rem_pio2+0x2f0>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f7fa fbc0 	bl	8000298 <__aeabi_dsub>
 8005b18:	e9c4 8900 	strd	r8, r9, [r4]
 8005b1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005b20:	2501      	movs	r5, #1
 8005b22:	4628      	mov	r0, r5
 8005b24:	b00d      	add	sp, #52	@ 0x34
 8005b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2a:	a39d      	add	r3, pc, #628	@ (adr r3, 8005da0 <__ieee754_rem_pio2+0x2f8>)
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	f7fa fbb2 	bl	8000298 <__aeabi_dsub>
 8005b34:	a39c      	add	r3, pc, #624	@ (adr r3, 8005da8 <__ieee754_rem_pio2+0x300>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	4606      	mov	r6, r0
 8005b3c:	460f      	mov	r7, r1
 8005b3e:	f7fa fbab 	bl	8000298 <__aeabi_dsub>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4680      	mov	r8, r0
 8005b48:	4689      	mov	r9, r1
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	4639      	mov	r1, r7
 8005b4e:	f7fa fba3 	bl	8000298 <__aeabi_dsub>
 8005b52:	a395      	add	r3, pc, #596	@ (adr r3, 8005da8 <__ieee754_rem_pio2+0x300>)
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	e7dc      	b.n	8005b14 <__ieee754_rem_pio2+0x6c>
 8005b5a:	f7fa fb9f 	bl	800029c <__adddf3>
 8005b5e:	45a8      	cmp	r8, r5
 8005b60:	4606      	mov	r6, r0
 8005b62:	460f      	mov	r7, r1
 8005b64:	d018      	beq.n	8005b98 <__ieee754_rem_pio2+0xf0>
 8005b66:	a38c      	add	r3, pc, #560	@ (adr r3, 8005d98 <__ieee754_rem_pio2+0x2f0>)
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	f7fa fb96 	bl	800029c <__adddf3>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4680      	mov	r8, r0
 8005b76:	4689      	mov	r9, r1
 8005b78:	4630      	mov	r0, r6
 8005b7a:	4639      	mov	r1, r7
 8005b7c:	f7fa fb8c 	bl	8000298 <__aeabi_dsub>
 8005b80:	a385      	add	r3, pc, #532	@ (adr r3, 8005d98 <__ieee754_rem_pio2+0x2f0>)
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	f7fa fb89 	bl	800029c <__adddf3>
 8005b8a:	f04f 35ff 	mov.w	r5, #4294967295
 8005b8e:	e9c4 8900 	strd	r8, r9, [r4]
 8005b92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005b96:	e7c4      	b.n	8005b22 <__ieee754_rem_pio2+0x7a>
 8005b98:	a381      	add	r3, pc, #516	@ (adr r3, 8005da0 <__ieee754_rem_pio2+0x2f8>)
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	f7fa fb7d 	bl	800029c <__adddf3>
 8005ba2:	a381      	add	r3, pc, #516	@ (adr r3, 8005da8 <__ieee754_rem_pio2+0x300>)
 8005ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba8:	4606      	mov	r6, r0
 8005baa:	460f      	mov	r7, r1
 8005bac:	f7fa fb76 	bl	800029c <__adddf3>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4680      	mov	r8, r0
 8005bb6:	4689      	mov	r9, r1
 8005bb8:	4630      	mov	r0, r6
 8005bba:	4639      	mov	r1, r7
 8005bbc:	f7fa fb6c 	bl	8000298 <__aeabi_dsub>
 8005bc0:	a379      	add	r3, pc, #484	@ (adr r3, 8005da8 <__ieee754_rem_pio2+0x300>)
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	e7de      	b.n	8005b86 <__ieee754_rem_pio2+0xde>
 8005bc8:	4b82      	ldr	r3, [pc, #520]	@ (8005dd4 <__ieee754_rem_pio2+0x32c>)
 8005bca:	4598      	cmp	r8, r3
 8005bcc:	f200 80d1 	bhi.w	8005d72 <__ieee754_rem_pio2+0x2ca>
 8005bd0:	f000 f966 	bl	8005ea0 <fabs>
 8005bd4:	ec57 6b10 	vmov	r6, r7, d0
 8005bd8:	a375      	add	r3, pc, #468	@ (adr r3, 8005db0 <__ieee754_rem_pio2+0x308>)
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	4630      	mov	r0, r6
 8005be0:	4639      	mov	r1, r7
 8005be2:	f7fa fd11 	bl	8000608 <__aeabi_dmul>
 8005be6:	4b7c      	ldr	r3, [pc, #496]	@ (8005dd8 <__ieee754_rem_pio2+0x330>)
 8005be8:	2200      	movs	r2, #0
 8005bea:	f7fa fb57 	bl	800029c <__adddf3>
 8005bee:	f7fa ffbb 	bl	8000b68 <__aeabi_d2iz>
 8005bf2:	4605      	mov	r5, r0
 8005bf4:	f7fa fc9e 	bl	8000534 <__aeabi_i2d>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c00:	a363      	add	r3, pc, #396	@ (adr r3, 8005d90 <__ieee754_rem_pio2+0x2e8>)
 8005c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c06:	f7fa fcff 	bl	8000608 <__aeabi_dmul>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4630      	mov	r0, r6
 8005c10:	4639      	mov	r1, r7
 8005c12:	f7fa fb41 	bl	8000298 <__aeabi_dsub>
 8005c16:	a360      	add	r3, pc, #384	@ (adr r3, 8005d98 <__ieee754_rem_pio2+0x2f0>)
 8005c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1c:	4682      	mov	sl, r0
 8005c1e:	468b      	mov	fp, r1
 8005c20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c24:	f7fa fcf0 	bl	8000608 <__aeabi_dmul>
 8005c28:	2d1f      	cmp	r5, #31
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	460f      	mov	r7, r1
 8005c2e:	dc0c      	bgt.n	8005c4a <__ieee754_rem_pio2+0x1a2>
 8005c30:	4b6a      	ldr	r3, [pc, #424]	@ (8005ddc <__ieee754_rem_pio2+0x334>)
 8005c32:	1e6a      	subs	r2, r5, #1
 8005c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c38:	4543      	cmp	r3, r8
 8005c3a:	d006      	beq.n	8005c4a <__ieee754_rem_pio2+0x1a2>
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	463b      	mov	r3, r7
 8005c40:	4650      	mov	r0, sl
 8005c42:	4659      	mov	r1, fp
 8005c44:	f7fa fb28 	bl	8000298 <__aeabi_dsub>
 8005c48:	e00e      	b.n	8005c68 <__ieee754_rem_pio2+0x1c0>
 8005c4a:	463b      	mov	r3, r7
 8005c4c:	4632      	mov	r2, r6
 8005c4e:	4650      	mov	r0, sl
 8005c50:	4659      	mov	r1, fp
 8005c52:	f7fa fb21 	bl	8000298 <__aeabi_dsub>
 8005c56:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005c5a:	9305      	str	r3, [sp, #20]
 8005c5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005c60:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005c64:	2b10      	cmp	r3, #16
 8005c66:	dc02      	bgt.n	8005c6e <__ieee754_rem_pio2+0x1c6>
 8005c68:	e9c4 0100 	strd	r0, r1, [r4]
 8005c6c:	e039      	b.n	8005ce2 <__ieee754_rem_pio2+0x23a>
 8005c6e:	a34c      	add	r3, pc, #304	@ (adr r3, 8005da0 <__ieee754_rem_pio2+0x2f8>)
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c78:	f7fa fcc6 	bl	8000608 <__aeabi_dmul>
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	460f      	mov	r7, r1
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4650      	mov	r0, sl
 8005c86:	4659      	mov	r1, fp
 8005c88:	f7fa fb06 	bl	8000298 <__aeabi_dsub>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4680      	mov	r8, r0
 8005c92:	4689      	mov	r9, r1
 8005c94:	4650      	mov	r0, sl
 8005c96:	4659      	mov	r1, fp
 8005c98:	f7fa fafe 	bl	8000298 <__aeabi_dsub>
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	f7fa fafa 	bl	8000298 <__aeabi_dsub>
 8005ca4:	a340      	add	r3, pc, #256	@ (adr r3, 8005da8 <__ieee754_rem_pio2+0x300>)
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	4606      	mov	r6, r0
 8005cac:	460f      	mov	r7, r1
 8005cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cb2:	f7fa fca9 	bl	8000608 <__aeabi_dmul>
 8005cb6:	4632      	mov	r2, r6
 8005cb8:	463b      	mov	r3, r7
 8005cba:	f7fa faed 	bl	8000298 <__aeabi_dsub>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	460f      	mov	r7, r1
 8005cc6:	4640      	mov	r0, r8
 8005cc8:	4649      	mov	r1, r9
 8005cca:	f7fa fae5 	bl	8000298 <__aeabi_dsub>
 8005cce:	9a05      	ldr	r2, [sp, #20]
 8005cd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b31      	cmp	r3, #49	@ 0x31
 8005cd8:	dc20      	bgt.n	8005d1c <__ieee754_rem_pio2+0x274>
 8005cda:	e9c4 0100 	strd	r0, r1, [r4]
 8005cde:	46c2      	mov	sl, r8
 8005ce0:	46cb      	mov	fp, r9
 8005ce2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005ce6:	4650      	mov	r0, sl
 8005ce8:	4642      	mov	r2, r8
 8005cea:	464b      	mov	r3, r9
 8005cec:	4659      	mov	r1, fp
 8005cee:	f7fa fad3 	bl	8000298 <__aeabi_dsub>
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	4632      	mov	r2, r6
 8005cf6:	f7fa facf 	bl	8000298 <__aeabi_dsub>
 8005cfa:	9b04      	ldr	r3, [sp, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005d02:	f6bf af0e 	bge.w	8005b22 <__ieee754_rem_pio2+0x7a>
 8005d06:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005d0a:	6063      	str	r3, [r4, #4]
 8005d0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005d10:	f8c4 8000 	str.w	r8, [r4]
 8005d14:	60a0      	str	r0, [r4, #8]
 8005d16:	60e3      	str	r3, [r4, #12]
 8005d18:	426d      	negs	r5, r5
 8005d1a:	e702      	b.n	8005b22 <__ieee754_rem_pio2+0x7a>
 8005d1c:	a326      	add	r3, pc, #152	@ (adr r3, 8005db8 <__ieee754_rem_pio2+0x310>)
 8005d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d26:	f7fa fc6f 	bl	8000608 <__aeabi_dmul>
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	460f      	mov	r7, r1
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4640      	mov	r0, r8
 8005d34:	4649      	mov	r1, r9
 8005d36:	f7fa faaf 	bl	8000298 <__aeabi_dsub>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4682      	mov	sl, r0
 8005d40:	468b      	mov	fp, r1
 8005d42:	4640      	mov	r0, r8
 8005d44:	4649      	mov	r1, r9
 8005d46:	f7fa faa7 	bl	8000298 <__aeabi_dsub>
 8005d4a:	4632      	mov	r2, r6
 8005d4c:	463b      	mov	r3, r7
 8005d4e:	f7fa faa3 	bl	8000298 <__aeabi_dsub>
 8005d52:	a31b      	add	r3, pc, #108	@ (adr r3, 8005dc0 <__ieee754_rem_pio2+0x318>)
 8005d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d58:	4606      	mov	r6, r0
 8005d5a:	460f      	mov	r7, r1
 8005d5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d60:	f7fa fc52 	bl	8000608 <__aeabi_dmul>
 8005d64:	4632      	mov	r2, r6
 8005d66:	463b      	mov	r3, r7
 8005d68:	f7fa fa96 	bl	8000298 <__aeabi_dsub>
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	460f      	mov	r7, r1
 8005d70:	e764      	b.n	8005c3c <__ieee754_rem_pio2+0x194>
 8005d72:	4b1b      	ldr	r3, [pc, #108]	@ (8005de0 <__ieee754_rem_pio2+0x338>)
 8005d74:	4598      	cmp	r8, r3
 8005d76:	d935      	bls.n	8005de4 <__ieee754_rem_pio2+0x33c>
 8005d78:	4632      	mov	r2, r6
 8005d7a:	463b      	mov	r3, r7
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	4639      	mov	r1, r7
 8005d80:	f7fa fa8a 	bl	8000298 <__aeabi_dsub>
 8005d84:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005d88:	e9c4 0100 	strd	r0, r1, [r4]
 8005d8c:	e69e      	b.n	8005acc <__ieee754_rem_pio2+0x24>
 8005d8e:	bf00      	nop
 8005d90:	54400000 	.word	0x54400000
 8005d94:	3ff921fb 	.word	0x3ff921fb
 8005d98:	1a626331 	.word	0x1a626331
 8005d9c:	3dd0b461 	.word	0x3dd0b461
 8005da0:	1a600000 	.word	0x1a600000
 8005da4:	3dd0b461 	.word	0x3dd0b461
 8005da8:	2e037073 	.word	0x2e037073
 8005dac:	3ba3198a 	.word	0x3ba3198a
 8005db0:	6dc9c883 	.word	0x6dc9c883
 8005db4:	3fe45f30 	.word	0x3fe45f30
 8005db8:	2e000000 	.word	0x2e000000
 8005dbc:	3ba3198a 	.word	0x3ba3198a
 8005dc0:	252049c1 	.word	0x252049c1
 8005dc4:	397b839a 	.word	0x397b839a
 8005dc8:	3fe921fb 	.word	0x3fe921fb
 8005dcc:	4002d97b 	.word	0x4002d97b
 8005dd0:	3ff921fb 	.word	0x3ff921fb
 8005dd4:	413921fb 	.word	0x413921fb
 8005dd8:	3fe00000 	.word	0x3fe00000
 8005ddc:	08006b00 	.word	0x08006b00
 8005de0:	7fefffff 	.word	0x7fefffff
 8005de4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005de8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8005dec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005df0:	4630      	mov	r0, r6
 8005df2:	460f      	mov	r7, r1
 8005df4:	f7fa feb8 	bl	8000b68 <__aeabi_d2iz>
 8005df8:	f7fa fb9c 	bl	8000534 <__aeabi_i2d>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4630      	mov	r0, r6
 8005e02:	4639      	mov	r1, r7
 8005e04:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005e08:	f7fa fa46 	bl	8000298 <__aeabi_dsub>
 8005e0c:	4b22      	ldr	r3, [pc, #136]	@ (8005e98 <__ieee754_rem_pio2+0x3f0>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f7fa fbfa 	bl	8000608 <__aeabi_dmul>
 8005e14:	460f      	mov	r7, r1
 8005e16:	4606      	mov	r6, r0
 8005e18:	f7fa fea6 	bl	8000b68 <__aeabi_d2iz>
 8005e1c:	f7fa fb8a 	bl	8000534 <__aeabi_i2d>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4630      	mov	r0, r6
 8005e26:	4639      	mov	r1, r7
 8005e28:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005e2c:	f7fa fa34 	bl	8000298 <__aeabi_dsub>
 8005e30:	4b19      	ldr	r3, [pc, #100]	@ (8005e98 <__ieee754_rem_pio2+0x3f0>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	f7fa fbe8 	bl	8000608 <__aeabi_dmul>
 8005e38:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005e3c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005e40:	f04f 0803 	mov.w	r8, #3
 8005e44:	2600      	movs	r6, #0
 8005e46:	2700      	movs	r7, #0
 8005e48:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005e4c:	4632      	mov	r2, r6
 8005e4e:	463b      	mov	r3, r7
 8005e50:	46c2      	mov	sl, r8
 8005e52:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e56:	f7fa fe3f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	d1f4      	bne.n	8005e48 <__ieee754_rem_pio2+0x3a0>
 8005e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8005e9c <__ieee754_rem_pio2+0x3f4>)
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	2302      	movs	r3, #2
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	462a      	mov	r2, r5
 8005e68:	4653      	mov	r3, sl
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	a806      	add	r0, sp, #24
 8005e6e:	f000 f81f 	bl	8005eb0 <__kernel_rem_pio2>
 8005e72:	9b04      	ldr	r3, [sp, #16]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	4605      	mov	r5, r0
 8005e78:	f6bf ae53 	bge.w	8005b22 <__ieee754_rem_pio2+0x7a>
 8005e7c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005e80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e84:	e9c4 2300 	strd	r2, r3, [r4]
 8005e88:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005e8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e90:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005e94:	e740      	b.n	8005d18 <__ieee754_rem_pio2+0x270>
 8005e96:	bf00      	nop
 8005e98:	41700000 	.word	0x41700000
 8005e9c:	08006b80 	.word	0x08006b80

08005ea0 <fabs>:
 8005ea0:	ec51 0b10 	vmov	r0, r1, d0
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005eaa:	ec43 2b10 	vmov	d0, r2, r3
 8005eae:	4770      	bx	lr

08005eb0 <__kernel_rem_pio2>:
 8005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	ed2d 8b02 	vpush	{d8}
 8005eb8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005ebc:	f112 0f14 	cmn.w	r2, #20
 8005ec0:	9306      	str	r3, [sp, #24]
 8005ec2:	9104      	str	r1, [sp, #16]
 8005ec4:	4bbe      	ldr	r3, [pc, #760]	@ (80061c0 <__kernel_rem_pio2+0x310>)
 8005ec6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005ec8:	9008      	str	r0, [sp, #32]
 8005eca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	9b06      	ldr	r3, [sp, #24]
 8005ed2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ed6:	bfa8      	it	ge
 8005ed8:	1ed4      	subge	r4, r2, #3
 8005eda:	9305      	str	r3, [sp, #20]
 8005edc:	bfb2      	itee	lt
 8005ede:	2400      	movlt	r4, #0
 8005ee0:	2318      	movge	r3, #24
 8005ee2:	fb94 f4f3 	sdivge	r4, r4, r3
 8005ee6:	f06f 0317 	mvn.w	r3, #23
 8005eea:	fb04 3303 	mla	r3, r4, r3, r3
 8005eee:	eb03 0b02 	add.w	fp, r3, r2
 8005ef2:	9b00      	ldr	r3, [sp, #0]
 8005ef4:	9a05      	ldr	r2, [sp, #20]
 8005ef6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80061b0 <__kernel_rem_pio2+0x300>
 8005efa:	eb03 0802 	add.w	r8, r3, r2
 8005efe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005f00:	1aa7      	subs	r7, r4, r2
 8005f02:	ae20      	add	r6, sp, #128	@ 0x80
 8005f04:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005f08:	2500      	movs	r5, #0
 8005f0a:	4545      	cmp	r5, r8
 8005f0c:	dd13      	ble.n	8005f36 <__kernel_rem_pio2+0x86>
 8005f0e:	9b06      	ldr	r3, [sp, #24]
 8005f10:	aa20      	add	r2, sp, #128	@ 0x80
 8005f12:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005f16:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8005f1a:	f04f 0800 	mov.w	r8, #0
 8005f1e:	9b00      	ldr	r3, [sp, #0]
 8005f20:	4598      	cmp	r8, r3
 8005f22:	dc31      	bgt.n	8005f88 <__kernel_rem_pio2+0xd8>
 8005f24:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80061b0 <__kernel_rem_pio2+0x300>
 8005f28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005f30:	462f      	mov	r7, r5
 8005f32:	2600      	movs	r6, #0
 8005f34:	e01b      	b.n	8005f6e <__kernel_rem_pio2+0xbe>
 8005f36:	42ef      	cmn	r7, r5
 8005f38:	d407      	bmi.n	8005f4a <__kernel_rem_pio2+0x9a>
 8005f3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005f3e:	f7fa faf9 	bl	8000534 <__aeabi_i2d>
 8005f42:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005f46:	3501      	adds	r5, #1
 8005f48:	e7df      	b.n	8005f0a <__kernel_rem_pio2+0x5a>
 8005f4a:	ec51 0b18 	vmov	r0, r1, d8
 8005f4e:	e7f8      	b.n	8005f42 <__kernel_rem_pio2+0x92>
 8005f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f54:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005f58:	f7fa fb56 	bl	8000608 <__aeabi_dmul>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f64:	f7fa f99a 	bl	800029c <__adddf3>
 8005f68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f6c:	3601      	adds	r6, #1
 8005f6e:	9b05      	ldr	r3, [sp, #20]
 8005f70:	429e      	cmp	r6, r3
 8005f72:	f1a7 0708 	sub.w	r7, r7, #8
 8005f76:	ddeb      	ble.n	8005f50 <__kernel_rem_pio2+0xa0>
 8005f78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f7c:	f108 0801 	add.w	r8, r8, #1
 8005f80:	ecaa 7b02 	vstmia	sl!, {d7}
 8005f84:	3508      	adds	r5, #8
 8005f86:	e7ca      	b.n	8005f1e <__kernel_rem_pio2+0x6e>
 8005f88:	9b00      	ldr	r3, [sp, #0]
 8005f8a:	f8dd 8000 	ldr.w	r8, [sp]
 8005f8e:	aa0c      	add	r2, sp, #48	@ 0x30
 8005f90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005f94:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005f98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f9e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005fa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fa4:	ab98      	add	r3, sp, #608	@ 0x260
 8005fa6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005faa:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8005fae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005fb2:	ac0c      	add	r4, sp, #48	@ 0x30
 8005fb4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005fb6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005fba:	46a1      	mov	r9, r4
 8005fbc:	46c2      	mov	sl, r8
 8005fbe:	f1ba 0f00 	cmp.w	sl, #0
 8005fc2:	f1a5 0508 	sub.w	r5, r5, #8
 8005fc6:	dc77      	bgt.n	80060b8 <__kernel_rem_pio2+0x208>
 8005fc8:	4658      	mov	r0, fp
 8005fca:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005fce:	f000 fac7 	bl	8006560 <scalbn>
 8005fd2:	ec57 6b10 	vmov	r6, r7, d0
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005fdc:	4630      	mov	r0, r6
 8005fde:	4639      	mov	r1, r7
 8005fe0:	f7fa fb12 	bl	8000608 <__aeabi_dmul>
 8005fe4:	ec41 0b10 	vmov	d0, r0, r1
 8005fe8:	f000 fb3a 	bl	8006660 <floor>
 8005fec:	4b75      	ldr	r3, [pc, #468]	@ (80061c4 <__kernel_rem_pio2+0x314>)
 8005fee:	ec51 0b10 	vmov	r0, r1, d0
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f7fa fb08 	bl	8000608 <__aeabi_dmul>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	4639      	mov	r1, r7
 8006000:	f7fa f94a 	bl	8000298 <__aeabi_dsub>
 8006004:	460f      	mov	r7, r1
 8006006:	4606      	mov	r6, r0
 8006008:	f7fa fdae 	bl	8000b68 <__aeabi_d2iz>
 800600c:	9002      	str	r0, [sp, #8]
 800600e:	f7fa fa91 	bl	8000534 <__aeabi_i2d>
 8006012:	4602      	mov	r2, r0
 8006014:	460b      	mov	r3, r1
 8006016:	4630      	mov	r0, r6
 8006018:	4639      	mov	r1, r7
 800601a:	f7fa f93d 	bl	8000298 <__aeabi_dsub>
 800601e:	f1bb 0f00 	cmp.w	fp, #0
 8006022:	4606      	mov	r6, r0
 8006024:	460f      	mov	r7, r1
 8006026:	dd6c      	ble.n	8006102 <__kernel_rem_pio2+0x252>
 8006028:	f108 31ff 	add.w	r1, r8, #4294967295
 800602c:	ab0c      	add	r3, sp, #48	@ 0x30
 800602e:	9d02      	ldr	r5, [sp, #8]
 8006030:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006034:	f1cb 0018 	rsb	r0, fp, #24
 8006038:	fa43 f200 	asr.w	r2, r3, r0
 800603c:	4415      	add	r5, r2
 800603e:	4082      	lsls	r2, r0
 8006040:	1a9b      	subs	r3, r3, r2
 8006042:	aa0c      	add	r2, sp, #48	@ 0x30
 8006044:	9502      	str	r5, [sp, #8]
 8006046:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800604a:	f1cb 0217 	rsb	r2, fp, #23
 800604e:	fa43 f902 	asr.w	r9, r3, r2
 8006052:	f1b9 0f00 	cmp.w	r9, #0
 8006056:	dd64      	ble.n	8006122 <__kernel_rem_pio2+0x272>
 8006058:	9b02      	ldr	r3, [sp, #8]
 800605a:	2200      	movs	r2, #0
 800605c:	3301      	adds	r3, #1
 800605e:	9302      	str	r3, [sp, #8]
 8006060:	4615      	mov	r5, r2
 8006062:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006066:	4590      	cmp	r8, r2
 8006068:	f300 80b8 	bgt.w	80061dc <__kernel_rem_pio2+0x32c>
 800606c:	f1bb 0f00 	cmp.w	fp, #0
 8006070:	dd07      	ble.n	8006082 <__kernel_rem_pio2+0x1d2>
 8006072:	f1bb 0f01 	cmp.w	fp, #1
 8006076:	f000 80bf 	beq.w	80061f8 <__kernel_rem_pio2+0x348>
 800607a:	f1bb 0f02 	cmp.w	fp, #2
 800607e:	f000 80c6 	beq.w	800620e <__kernel_rem_pio2+0x35e>
 8006082:	f1b9 0f02 	cmp.w	r9, #2
 8006086:	d14c      	bne.n	8006122 <__kernel_rem_pio2+0x272>
 8006088:	4632      	mov	r2, r6
 800608a:	463b      	mov	r3, r7
 800608c:	494e      	ldr	r1, [pc, #312]	@ (80061c8 <__kernel_rem_pio2+0x318>)
 800608e:	2000      	movs	r0, #0
 8006090:	f7fa f902 	bl	8000298 <__aeabi_dsub>
 8006094:	4606      	mov	r6, r0
 8006096:	460f      	mov	r7, r1
 8006098:	2d00      	cmp	r5, #0
 800609a:	d042      	beq.n	8006122 <__kernel_rem_pio2+0x272>
 800609c:	4658      	mov	r0, fp
 800609e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80061b8 <__kernel_rem_pio2+0x308>
 80060a2:	f000 fa5d 	bl	8006560 <scalbn>
 80060a6:	4630      	mov	r0, r6
 80060a8:	4639      	mov	r1, r7
 80060aa:	ec53 2b10 	vmov	r2, r3, d0
 80060ae:	f7fa f8f3 	bl	8000298 <__aeabi_dsub>
 80060b2:	4606      	mov	r6, r0
 80060b4:	460f      	mov	r7, r1
 80060b6:	e034      	b.n	8006122 <__kernel_rem_pio2+0x272>
 80060b8:	4b44      	ldr	r3, [pc, #272]	@ (80061cc <__kernel_rem_pio2+0x31c>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060c0:	f7fa faa2 	bl	8000608 <__aeabi_dmul>
 80060c4:	f7fa fd50 	bl	8000b68 <__aeabi_d2iz>
 80060c8:	f7fa fa34 	bl	8000534 <__aeabi_i2d>
 80060cc:	4b40      	ldr	r3, [pc, #256]	@ (80061d0 <__kernel_rem_pio2+0x320>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	4606      	mov	r6, r0
 80060d2:	460f      	mov	r7, r1
 80060d4:	f7fa fa98 	bl	8000608 <__aeabi_dmul>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060e0:	f7fa f8da 	bl	8000298 <__aeabi_dsub>
 80060e4:	f7fa fd40 	bl	8000b68 <__aeabi_d2iz>
 80060e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80060ec:	f849 0b04 	str.w	r0, [r9], #4
 80060f0:	4639      	mov	r1, r7
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7fa f8d2 	bl	800029c <__adddf3>
 80060f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006100:	e75d      	b.n	8005fbe <__kernel_rem_pio2+0x10e>
 8006102:	d107      	bne.n	8006114 <__kernel_rem_pio2+0x264>
 8006104:	f108 33ff 	add.w	r3, r8, #4294967295
 8006108:	aa0c      	add	r2, sp, #48	@ 0x30
 800610a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800610e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006112:	e79e      	b.n	8006052 <__kernel_rem_pio2+0x1a2>
 8006114:	4b2f      	ldr	r3, [pc, #188]	@ (80061d4 <__kernel_rem_pio2+0x324>)
 8006116:	2200      	movs	r2, #0
 8006118:	f7fa fcfc 	bl	8000b14 <__aeabi_dcmpge>
 800611c:	2800      	cmp	r0, #0
 800611e:	d143      	bne.n	80061a8 <__kernel_rem_pio2+0x2f8>
 8006120:	4681      	mov	r9, r0
 8006122:	2200      	movs	r2, #0
 8006124:	2300      	movs	r3, #0
 8006126:	4630      	mov	r0, r6
 8006128:	4639      	mov	r1, r7
 800612a:	f7fa fcd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800612e:	2800      	cmp	r0, #0
 8006130:	f000 80bf 	beq.w	80062b2 <__kernel_rem_pio2+0x402>
 8006134:	f108 33ff 	add.w	r3, r8, #4294967295
 8006138:	2200      	movs	r2, #0
 800613a:	9900      	ldr	r1, [sp, #0]
 800613c:	428b      	cmp	r3, r1
 800613e:	da6e      	bge.n	800621e <__kernel_rem_pio2+0x36e>
 8006140:	2a00      	cmp	r2, #0
 8006142:	f000 8089 	beq.w	8006258 <__kernel_rem_pio2+0x3a8>
 8006146:	f108 38ff 	add.w	r8, r8, #4294967295
 800614a:	ab0c      	add	r3, sp, #48	@ 0x30
 800614c:	f1ab 0b18 	sub.w	fp, fp, #24
 8006150:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d0f6      	beq.n	8006146 <__kernel_rem_pio2+0x296>
 8006158:	4658      	mov	r0, fp
 800615a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80061b8 <__kernel_rem_pio2+0x308>
 800615e:	f000 f9ff 	bl	8006560 <scalbn>
 8006162:	f108 0301 	add.w	r3, r8, #1
 8006166:	00da      	lsls	r2, r3, #3
 8006168:	9205      	str	r2, [sp, #20]
 800616a:	ec55 4b10 	vmov	r4, r5, d0
 800616e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006170:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80061cc <__kernel_rem_pio2+0x31c>
 8006174:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006178:	4646      	mov	r6, r8
 800617a:	f04f 0a00 	mov.w	sl, #0
 800617e:	2e00      	cmp	r6, #0
 8006180:	f280 80cf 	bge.w	8006322 <__kernel_rem_pio2+0x472>
 8006184:	4644      	mov	r4, r8
 8006186:	2c00      	cmp	r4, #0
 8006188:	f2c0 80fd 	blt.w	8006386 <__kernel_rem_pio2+0x4d6>
 800618c:	4b12      	ldr	r3, [pc, #72]	@ (80061d8 <__kernel_rem_pio2+0x328>)
 800618e:	461f      	mov	r7, r3
 8006190:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006192:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006196:	9306      	str	r3, [sp, #24]
 8006198:	f04f 0a00 	mov.w	sl, #0
 800619c:	f04f 0b00 	mov.w	fp, #0
 80061a0:	2600      	movs	r6, #0
 80061a2:	eba8 0504 	sub.w	r5, r8, r4
 80061a6:	e0e2      	b.n	800636e <__kernel_rem_pio2+0x4be>
 80061a8:	f04f 0902 	mov.w	r9, #2
 80061ac:	e754      	b.n	8006058 <__kernel_rem_pio2+0x1a8>
 80061ae:	bf00      	nop
	...
 80061bc:	3ff00000 	.word	0x3ff00000
 80061c0:	08006cc8 	.word	0x08006cc8
 80061c4:	40200000 	.word	0x40200000
 80061c8:	3ff00000 	.word	0x3ff00000
 80061cc:	3e700000 	.word	0x3e700000
 80061d0:	41700000 	.word	0x41700000
 80061d4:	3fe00000 	.word	0x3fe00000
 80061d8:	08006c88 	.word	0x08006c88
 80061dc:	f854 3b04 	ldr.w	r3, [r4], #4
 80061e0:	b945      	cbnz	r5, 80061f4 <__kernel_rem_pio2+0x344>
 80061e2:	b123      	cbz	r3, 80061ee <__kernel_rem_pio2+0x33e>
 80061e4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80061e8:	f844 3c04 	str.w	r3, [r4, #-4]
 80061ec:	2301      	movs	r3, #1
 80061ee:	3201      	adds	r2, #1
 80061f0:	461d      	mov	r5, r3
 80061f2:	e738      	b.n	8006066 <__kernel_rem_pio2+0x1b6>
 80061f4:	1acb      	subs	r3, r1, r3
 80061f6:	e7f7      	b.n	80061e8 <__kernel_rem_pio2+0x338>
 80061f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80061fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80061fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006202:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006206:	a90c      	add	r1, sp, #48	@ 0x30
 8006208:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800620c:	e739      	b.n	8006082 <__kernel_rem_pio2+0x1d2>
 800620e:	f108 32ff 	add.w	r2, r8, #4294967295
 8006212:	ab0c      	add	r3, sp, #48	@ 0x30
 8006214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006218:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800621c:	e7f3      	b.n	8006206 <__kernel_rem_pio2+0x356>
 800621e:	a90c      	add	r1, sp, #48	@ 0x30
 8006220:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006224:	3b01      	subs	r3, #1
 8006226:	430a      	orrs	r2, r1
 8006228:	e787      	b.n	800613a <__kernel_rem_pio2+0x28a>
 800622a:	3401      	adds	r4, #1
 800622c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006230:	2a00      	cmp	r2, #0
 8006232:	d0fa      	beq.n	800622a <__kernel_rem_pio2+0x37a>
 8006234:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006236:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800623a:	eb0d 0503 	add.w	r5, sp, r3
 800623e:	9b06      	ldr	r3, [sp, #24]
 8006240:	aa20      	add	r2, sp, #128	@ 0x80
 8006242:	4443      	add	r3, r8
 8006244:	f108 0701 	add.w	r7, r8, #1
 8006248:	3d98      	subs	r5, #152	@ 0x98
 800624a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800624e:	4444      	add	r4, r8
 8006250:	42bc      	cmp	r4, r7
 8006252:	da04      	bge.n	800625e <__kernel_rem_pio2+0x3ae>
 8006254:	46a0      	mov	r8, r4
 8006256:	e6a2      	b.n	8005f9e <__kernel_rem_pio2+0xee>
 8006258:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800625a:	2401      	movs	r4, #1
 800625c:	e7e6      	b.n	800622c <__kernel_rem_pio2+0x37c>
 800625e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006260:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006264:	f7fa f966 	bl	8000534 <__aeabi_i2d>
 8006268:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006530 <__kernel_rem_pio2+0x680>
 800626c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006270:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006274:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006278:	46b2      	mov	sl, r6
 800627a:	f04f 0800 	mov.w	r8, #0
 800627e:	9b05      	ldr	r3, [sp, #20]
 8006280:	4598      	cmp	r8, r3
 8006282:	dd05      	ble.n	8006290 <__kernel_rem_pio2+0x3e0>
 8006284:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006288:	3701      	adds	r7, #1
 800628a:	eca5 7b02 	vstmia	r5!, {d7}
 800628e:	e7df      	b.n	8006250 <__kernel_rem_pio2+0x3a0>
 8006290:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006294:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006298:	f7fa f9b6 	bl	8000608 <__aeabi_dmul>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062a4:	f7f9 fffa 	bl	800029c <__adddf3>
 80062a8:	f108 0801 	add.w	r8, r8, #1
 80062ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062b0:	e7e5      	b.n	800627e <__kernel_rem_pio2+0x3ce>
 80062b2:	f1cb 0000 	rsb	r0, fp, #0
 80062b6:	ec47 6b10 	vmov	d0, r6, r7
 80062ba:	f000 f951 	bl	8006560 <scalbn>
 80062be:	ec55 4b10 	vmov	r4, r5, d0
 80062c2:	4b9d      	ldr	r3, [pc, #628]	@ (8006538 <__kernel_rem_pio2+0x688>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	4620      	mov	r0, r4
 80062c8:	4629      	mov	r1, r5
 80062ca:	f7fa fc23 	bl	8000b14 <__aeabi_dcmpge>
 80062ce:	b300      	cbz	r0, 8006312 <__kernel_rem_pio2+0x462>
 80062d0:	4b9a      	ldr	r3, [pc, #616]	@ (800653c <__kernel_rem_pio2+0x68c>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	4620      	mov	r0, r4
 80062d6:	4629      	mov	r1, r5
 80062d8:	f7fa f996 	bl	8000608 <__aeabi_dmul>
 80062dc:	f7fa fc44 	bl	8000b68 <__aeabi_d2iz>
 80062e0:	4606      	mov	r6, r0
 80062e2:	f7fa f927 	bl	8000534 <__aeabi_i2d>
 80062e6:	4b94      	ldr	r3, [pc, #592]	@ (8006538 <__kernel_rem_pio2+0x688>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	f7fa f98d 	bl	8000608 <__aeabi_dmul>
 80062ee:	460b      	mov	r3, r1
 80062f0:	4602      	mov	r2, r0
 80062f2:	4629      	mov	r1, r5
 80062f4:	4620      	mov	r0, r4
 80062f6:	f7f9 ffcf 	bl	8000298 <__aeabi_dsub>
 80062fa:	f7fa fc35 	bl	8000b68 <__aeabi_d2iz>
 80062fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8006300:	f10b 0b18 	add.w	fp, fp, #24
 8006304:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006308:	f108 0801 	add.w	r8, r8, #1
 800630c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006310:	e722      	b.n	8006158 <__kernel_rem_pio2+0x2a8>
 8006312:	4620      	mov	r0, r4
 8006314:	4629      	mov	r1, r5
 8006316:	f7fa fc27 	bl	8000b68 <__aeabi_d2iz>
 800631a:	ab0c      	add	r3, sp, #48	@ 0x30
 800631c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006320:	e71a      	b.n	8006158 <__kernel_rem_pio2+0x2a8>
 8006322:	ab0c      	add	r3, sp, #48	@ 0x30
 8006324:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006328:	f7fa f904 	bl	8000534 <__aeabi_i2d>
 800632c:	4622      	mov	r2, r4
 800632e:	462b      	mov	r3, r5
 8006330:	f7fa f96a 	bl	8000608 <__aeabi_dmul>
 8006334:	4652      	mov	r2, sl
 8006336:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800633a:	465b      	mov	r3, fp
 800633c:	4620      	mov	r0, r4
 800633e:	4629      	mov	r1, r5
 8006340:	f7fa f962 	bl	8000608 <__aeabi_dmul>
 8006344:	3e01      	subs	r6, #1
 8006346:	4604      	mov	r4, r0
 8006348:	460d      	mov	r5, r1
 800634a:	e718      	b.n	800617e <__kernel_rem_pio2+0x2ce>
 800634c:	9906      	ldr	r1, [sp, #24]
 800634e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006352:	9106      	str	r1, [sp, #24]
 8006354:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006358:	f7fa f956 	bl	8000608 <__aeabi_dmul>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4650      	mov	r0, sl
 8006362:	4659      	mov	r1, fp
 8006364:	f7f9 ff9a 	bl	800029c <__adddf3>
 8006368:	3601      	adds	r6, #1
 800636a:	4682      	mov	sl, r0
 800636c:	468b      	mov	fp, r1
 800636e:	9b00      	ldr	r3, [sp, #0]
 8006370:	429e      	cmp	r6, r3
 8006372:	dc01      	bgt.n	8006378 <__kernel_rem_pio2+0x4c8>
 8006374:	42b5      	cmp	r5, r6
 8006376:	dae9      	bge.n	800634c <__kernel_rem_pio2+0x49c>
 8006378:	ab48      	add	r3, sp, #288	@ 0x120
 800637a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800637e:	e9c5 ab00 	strd	sl, fp, [r5]
 8006382:	3c01      	subs	r4, #1
 8006384:	e6ff      	b.n	8006186 <__kernel_rem_pio2+0x2d6>
 8006386:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006388:	2b02      	cmp	r3, #2
 800638a:	dc0b      	bgt.n	80063a4 <__kernel_rem_pio2+0x4f4>
 800638c:	2b00      	cmp	r3, #0
 800638e:	dc39      	bgt.n	8006404 <__kernel_rem_pio2+0x554>
 8006390:	d05d      	beq.n	800644e <__kernel_rem_pio2+0x59e>
 8006392:	9b02      	ldr	r3, [sp, #8]
 8006394:	f003 0007 	and.w	r0, r3, #7
 8006398:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800639c:	ecbd 8b02 	vpop	{d8}
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d1f3      	bne.n	8006392 <__kernel_rem_pio2+0x4e2>
 80063aa:	9b05      	ldr	r3, [sp, #20]
 80063ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80063b0:	eb0d 0403 	add.w	r4, sp, r3
 80063b4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80063b8:	4625      	mov	r5, r4
 80063ba:	46c2      	mov	sl, r8
 80063bc:	f1ba 0f00 	cmp.w	sl, #0
 80063c0:	f1a5 0508 	sub.w	r5, r5, #8
 80063c4:	dc6b      	bgt.n	800649e <__kernel_rem_pio2+0x5ee>
 80063c6:	4645      	mov	r5, r8
 80063c8:	2d01      	cmp	r5, #1
 80063ca:	f1a4 0408 	sub.w	r4, r4, #8
 80063ce:	f300 8087 	bgt.w	80064e0 <__kernel_rem_pio2+0x630>
 80063d2:	9c05      	ldr	r4, [sp, #20]
 80063d4:	ab48      	add	r3, sp, #288	@ 0x120
 80063d6:	441c      	add	r4, r3
 80063d8:	2000      	movs	r0, #0
 80063da:	2100      	movs	r1, #0
 80063dc:	f1b8 0f01 	cmp.w	r8, #1
 80063e0:	f300 809c 	bgt.w	800651c <__kernel_rem_pio2+0x66c>
 80063e4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80063e8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80063ec:	f1b9 0f00 	cmp.w	r9, #0
 80063f0:	f040 80a6 	bne.w	8006540 <__kernel_rem_pio2+0x690>
 80063f4:	9b04      	ldr	r3, [sp, #16]
 80063f6:	e9c3 7800 	strd	r7, r8, [r3]
 80063fa:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80063fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006402:	e7c6      	b.n	8006392 <__kernel_rem_pio2+0x4e2>
 8006404:	9d05      	ldr	r5, [sp, #20]
 8006406:	ab48      	add	r3, sp, #288	@ 0x120
 8006408:	441d      	add	r5, r3
 800640a:	4644      	mov	r4, r8
 800640c:	2000      	movs	r0, #0
 800640e:	2100      	movs	r1, #0
 8006410:	2c00      	cmp	r4, #0
 8006412:	da35      	bge.n	8006480 <__kernel_rem_pio2+0x5d0>
 8006414:	f1b9 0f00 	cmp.w	r9, #0
 8006418:	d038      	beq.n	800648c <__kernel_rem_pio2+0x5dc>
 800641a:	4602      	mov	r2, r0
 800641c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006420:	9c04      	ldr	r4, [sp, #16]
 8006422:	e9c4 2300 	strd	r2, r3, [r4]
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800642e:	f7f9 ff33 	bl	8000298 <__aeabi_dsub>
 8006432:	ad4a      	add	r5, sp, #296	@ 0x128
 8006434:	2401      	movs	r4, #1
 8006436:	45a0      	cmp	r8, r4
 8006438:	da2b      	bge.n	8006492 <__kernel_rem_pio2+0x5e2>
 800643a:	f1b9 0f00 	cmp.w	r9, #0
 800643e:	d002      	beq.n	8006446 <__kernel_rem_pio2+0x596>
 8006440:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006444:	4619      	mov	r1, r3
 8006446:	9b04      	ldr	r3, [sp, #16]
 8006448:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800644c:	e7a1      	b.n	8006392 <__kernel_rem_pio2+0x4e2>
 800644e:	9c05      	ldr	r4, [sp, #20]
 8006450:	ab48      	add	r3, sp, #288	@ 0x120
 8006452:	441c      	add	r4, r3
 8006454:	2000      	movs	r0, #0
 8006456:	2100      	movs	r1, #0
 8006458:	f1b8 0f00 	cmp.w	r8, #0
 800645c:	da09      	bge.n	8006472 <__kernel_rem_pio2+0x5c2>
 800645e:	f1b9 0f00 	cmp.w	r9, #0
 8006462:	d002      	beq.n	800646a <__kernel_rem_pio2+0x5ba>
 8006464:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006468:	4619      	mov	r1, r3
 800646a:	9b04      	ldr	r3, [sp, #16]
 800646c:	e9c3 0100 	strd	r0, r1, [r3]
 8006470:	e78f      	b.n	8006392 <__kernel_rem_pio2+0x4e2>
 8006472:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006476:	f7f9 ff11 	bl	800029c <__adddf3>
 800647a:	f108 38ff 	add.w	r8, r8, #4294967295
 800647e:	e7eb      	b.n	8006458 <__kernel_rem_pio2+0x5a8>
 8006480:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006484:	f7f9 ff0a 	bl	800029c <__adddf3>
 8006488:	3c01      	subs	r4, #1
 800648a:	e7c1      	b.n	8006410 <__kernel_rem_pio2+0x560>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	e7c6      	b.n	8006420 <__kernel_rem_pio2+0x570>
 8006492:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006496:	f7f9 ff01 	bl	800029c <__adddf3>
 800649a:	3401      	adds	r4, #1
 800649c:	e7cb      	b.n	8006436 <__kernel_rem_pio2+0x586>
 800649e:	ed95 7b00 	vldr	d7, [r5]
 80064a2:	ed8d 7b00 	vstr	d7, [sp]
 80064a6:	ed95 7b02 	vldr	d7, [r5, #8]
 80064aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064ae:	ec53 2b17 	vmov	r2, r3, d7
 80064b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80064b6:	f7f9 fef1 	bl	800029c <__adddf3>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4606      	mov	r6, r0
 80064c0:	460f      	mov	r7, r1
 80064c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064c6:	f7f9 fee7 	bl	8000298 <__aeabi_dsub>
 80064ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064ce:	f7f9 fee5 	bl	800029c <__adddf3>
 80064d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80064da:	e9c5 6700 	strd	r6, r7, [r5]
 80064de:	e76d      	b.n	80063bc <__kernel_rem_pio2+0x50c>
 80064e0:	ed94 7b00 	vldr	d7, [r4]
 80064e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80064e8:	ec51 0b17 	vmov	r0, r1, d7
 80064ec:	4652      	mov	r2, sl
 80064ee:	465b      	mov	r3, fp
 80064f0:	ed8d 7b00 	vstr	d7, [sp]
 80064f4:	f7f9 fed2 	bl	800029c <__adddf3>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4606      	mov	r6, r0
 80064fe:	460f      	mov	r7, r1
 8006500:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006504:	f7f9 fec8 	bl	8000298 <__aeabi_dsub>
 8006508:	4652      	mov	r2, sl
 800650a:	465b      	mov	r3, fp
 800650c:	f7f9 fec6 	bl	800029c <__adddf3>
 8006510:	3d01      	subs	r5, #1
 8006512:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006516:	e9c4 6700 	strd	r6, r7, [r4]
 800651a:	e755      	b.n	80063c8 <__kernel_rem_pio2+0x518>
 800651c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006520:	f7f9 febc 	bl	800029c <__adddf3>
 8006524:	f108 38ff 	add.w	r8, r8, #4294967295
 8006528:	e758      	b.n	80063dc <__kernel_rem_pio2+0x52c>
 800652a:	bf00      	nop
 800652c:	f3af 8000 	nop.w
	...
 8006538:	41700000 	.word	0x41700000
 800653c:	3e700000 	.word	0x3e700000
 8006540:	9b04      	ldr	r3, [sp, #16]
 8006542:	9a04      	ldr	r2, [sp, #16]
 8006544:	601f      	str	r7, [r3, #0]
 8006546:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800654a:	605c      	str	r4, [r3, #4]
 800654c:	609d      	str	r5, [r3, #8]
 800654e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006552:	60d3      	str	r3, [r2, #12]
 8006554:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006558:	6110      	str	r0, [r2, #16]
 800655a:	6153      	str	r3, [r2, #20]
 800655c:	e719      	b.n	8006392 <__kernel_rem_pio2+0x4e2>
 800655e:	bf00      	nop

08006560 <scalbn>:
 8006560:	b570      	push	{r4, r5, r6, lr}
 8006562:	ec55 4b10 	vmov	r4, r5, d0
 8006566:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800656a:	4606      	mov	r6, r0
 800656c:	462b      	mov	r3, r5
 800656e:	b991      	cbnz	r1, 8006596 <scalbn+0x36>
 8006570:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006574:	4323      	orrs	r3, r4
 8006576:	d03d      	beq.n	80065f4 <scalbn+0x94>
 8006578:	4b35      	ldr	r3, [pc, #212]	@ (8006650 <scalbn+0xf0>)
 800657a:	4620      	mov	r0, r4
 800657c:	4629      	mov	r1, r5
 800657e:	2200      	movs	r2, #0
 8006580:	f7fa f842 	bl	8000608 <__aeabi_dmul>
 8006584:	4b33      	ldr	r3, [pc, #204]	@ (8006654 <scalbn+0xf4>)
 8006586:	429e      	cmp	r6, r3
 8006588:	4604      	mov	r4, r0
 800658a:	460d      	mov	r5, r1
 800658c:	da0f      	bge.n	80065ae <scalbn+0x4e>
 800658e:	a328      	add	r3, pc, #160	@ (adr r3, 8006630 <scalbn+0xd0>)
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	e01e      	b.n	80065d4 <scalbn+0x74>
 8006596:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800659a:	4291      	cmp	r1, r2
 800659c:	d10b      	bne.n	80065b6 <scalbn+0x56>
 800659e:	4622      	mov	r2, r4
 80065a0:	4620      	mov	r0, r4
 80065a2:	4629      	mov	r1, r5
 80065a4:	f7f9 fe7a 	bl	800029c <__adddf3>
 80065a8:	4604      	mov	r4, r0
 80065aa:	460d      	mov	r5, r1
 80065ac:	e022      	b.n	80065f4 <scalbn+0x94>
 80065ae:	460b      	mov	r3, r1
 80065b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80065b4:	3936      	subs	r1, #54	@ 0x36
 80065b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80065ba:	4296      	cmp	r6, r2
 80065bc:	dd0d      	ble.n	80065da <scalbn+0x7a>
 80065be:	2d00      	cmp	r5, #0
 80065c0:	a11d      	add	r1, pc, #116	@ (adr r1, 8006638 <scalbn+0xd8>)
 80065c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065c6:	da02      	bge.n	80065ce <scalbn+0x6e>
 80065c8:	a11d      	add	r1, pc, #116	@ (adr r1, 8006640 <scalbn+0xe0>)
 80065ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065ce:	a31a      	add	r3, pc, #104	@ (adr r3, 8006638 <scalbn+0xd8>)
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	f7fa f818 	bl	8000608 <__aeabi_dmul>
 80065d8:	e7e6      	b.n	80065a8 <scalbn+0x48>
 80065da:	1872      	adds	r2, r6, r1
 80065dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80065e0:	428a      	cmp	r2, r1
 80065e2:	dcec      	bgt.n	80065be <scalbn+0x5e>
 80065e4:	2a00      	cmp	r2, #0
 80065e6:	dd08      	ble.n	80065fa <scalbn+0x9a>
 80065e8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80065ec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80065f0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065f4:	ec45 4b10 	vmov	d0, r4, r5
 80065f8:	bd70      	pop	{r4, r5, r6, pc}
 80065fa:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80065fe:	da08      	bge.n	8006612 <scalbn+0xb2>
 8006600:	2d00      	cmp	r5, #0
 8006602:	a10b      	add	r1, pc, #44	@ (adr r1, 8006630 <scalbn+0xd0>)
 8006604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006608:	dac1      	bge.n	800658e <scalbn+0x2e>
 800660a:	a10f      	add	r1, pc, #60	@ (adr r1, 8006648 <scalbn+0xe8>)
 800660c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006610:	e7bd      	b.n	800658e <scalbn+0x2e>
 8006612:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006616:	3236      	adds	r2, #54	@ 0x36
 8006618:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800661c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006620:	4620      	mov	r0, r4
 8006622:	4b0d      	ldr	r3, [pc, #52]	@ (8006658 <scalbn+0xf8>)
 8006624:	4629      	mov	r1, r5
 8006626:	2200      	movs	r2, #0
 8006628:	e7d4      	b.n	80065d4 <scalbn+0x74>
 800662a:	bf00      	nop
 800662c:	f3af 8000 	nop.w
 8006630:	c2f8f359 	.word	0xc2f8f359
 8006634:	01a56e1f 	.word	0x01a56e1f
 8006638:	8800759c 	.word	0x8800759c
 800663c:	7e37e43c 	.word	0x7e37e43c
 8006640:	8800759c 	.word	0x8800759c
 8006644:	fe37e43c 	.word	0xfe37e43c
 8006648:	c2f8f359 	.word	0xc2f8f359
 800664c:	81a56e1f 	.word	0x81a56e1f
 8006650:	43500000 	.word	0x43500000
 8006654:	ffff3cb0 	.word	0xffff3cb0
 8006658:	3c900000 	.word	0x3c900000
 800665c:	00000000 	.word	0x00000000

08006660 <floor>:
 8006660:	ec51 0b10 	vmov	r0, r1, d0
 8006664:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800666c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006670:	2e13      	cmp	r6, #19
 8006672:	460c      	mov	r4, r1
 8006674:	4605      	mov	r5, r0
 8006676:	4680      	mov	r8, r0
 8006678:	dc34      	bgt.n	80066e4 <floor+0x84>
 800667a:	2e00      	cmp	r6, #0
 800667c:	da17      	bge.n	80066ae <floor+0x4e>
 800667e:	a332      	add	r3, pc, #200	@ (adr r3, 8006748 <floor+0xe8>)
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f7f9 fe0a 	bl	800029c <__adddf3>
 8006688:	2200      	movs	r2, #0
 800668a:	2300      	movs	r3, #0
 800668c:	f7fa fa4c 	bl	8000b28 <__aeabi_dcmpgt>
 8006690:	b150      	cbz	r0, 80066a8 <floor+0x48>
 8006692:	2c00      	cmp	r4, #0
 8006694:	da55      	bge.n	8006742 <floor+0xe2>
 8006696:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800669a:	432c      	orrs	r4, r5
 800669c:	2500      	movs	r5, #0
 800669e:	42ac      	cmp	r4, r5
 80066a0:	4c2b      	ldr	r4, [pc, #172]	@ (8006750 <floor+0xf0>)
 80066a2:	bf08      	it	eq
 80066a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80066a8:	4621      	mov	r1, r4
 80066aa:	4628      	mov	r0, r5
 80066ac:	e023      	b.n	80066f6 <floor+0x96>
 80066ae:	4f29      	ldr	r7, [pc, #164]	@ (8006754 <floor+0xf4>)
 80066b0:	4137      	asrs	r7, r6
 80066b2:	ea01 0307 	and.w	r3, r1, r7
 80066b6:	4303      	orrs	r3, r0
 80066b8:	d01d      	beq.n	80066f6 <floor+0x96>
 80066ba:	a323      	add	r3, pc, #140	@ (adr r3, 8006748 <floor+0xe8>)
 80066bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c0:	f7f9 fdec 	bl	800029c <__adddf3>
 80066c4:	2200      	movs	r2, #0
 80066c6:	2300      	movs	r3, #0
 80066c8:	f7fa fa2e 	bl	8000b28 <__aeabi_dcmpgt>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d0eb      	beq.n	80066a8 <floor+0x48>
 80066d0:	2c00      	cmp	r4, #0
 80066d2:	bfbe      	ittt	lt
 80066d4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80066d8:	4133      	asrlt	r3, r6
 80066da:	18e4      	addlt	r4, r4, r3
 80066dc:	ea24 0407 	bic.w	r4, r4, r7
 80066e0:	2500      	movs	r5, #0
 80066e2:	e7e1      	b.n	80066a8 <floor+0x48>
 80066e4:	2e33      	cmp	r6, #51	@ 0x33
 80066e6:	dd0a      	ble.n	80066fe <floor+0x9e>
 80066e8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80066ec:	d103      	bne.n	80066f6 <floor+0x96>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	f7f9 fdd3 	bl	800029c <__adddf3>
 80066f6:	ec41 0b10 	vmov	d0, r0, r1
 80066fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066fe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8006702:	f04f 37ff 	mov.w	r7, #4294967295
 8006706:	40df      	lsrs	r7, r3
 8006708:	4207      	tst	r7, r0
 800670a:	d0f4      	beq.n	80066f6 <floor+0x96>
 800670c:	a30e      	add	r3, pc, #56	@ (adr r3, 8006748 <floor+0xe8>)
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f7f9 fdc3 	bl	800029c <__adddf3>
 8006716:	2200      	movs	r2, #0
 8006718:	2300      	movs	r3, #0
 800671a:	f7fa fa05 	bl	8000b28 <__aeabi_dcmpgt>
 800671e:	2800      	cmp	r0, #0
 8006720:	d0c2      	beq.n	80066a8 <floor+0x48>
 8006722:	2c00      	cmp	r4, #0
 8006724:	da0a      	bge.n	800673c <floor+0xdc>
 8006726:	2e14      	cmp	r6, #20
 8006728:	d101      	bne.n	800672e <floor+0xce>
 800672a:	3401      	adds	r4, #1
 800672c:	e006      	b.n	800673c <floor+0xdc>
 800672e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8006732:	2301      	movs	r3, #1
 8006734:	40b3      	lsls	r3, r6
 8006736:	441d      	add	r5, r3
 8006738:	4545      	cmp	r5, r8
 800673a:	d3f6      	bcc.n	800672a <floor+0xca>
 800673c:	ea25 0507 	bic.w	r5, r5, r7
 8006740:	e7b2      	b.n	80066a8 <floor+0x48>
 8006742:	2500      	movs	r5, #0
 8006744:	462c      	mov	r4, r5
 8006746:	e7af      	b.n	80066a8 <floor+0x48>
 8006748:	8800759c 	.word	0x8800759c
 800674c:	7e37e43c 	.word	0x7e37e43c
 8006750:	bff00000 	.word	0xbff00000
 8006754:	000fffff 	.word	0x000fffff

08006758 <_init>:
 8006758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800675a:	bf00      	nop
 800675c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675e:	bc08      	pop	{r3}
 8006760:	469e      	mov	lr, r3
 8006762:	4770      	bx	lr

08006764 <_fini>:
 8006764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006766:	bf00      	nop
 8006768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800676a:	bc08      	pop	{r3}
 800676c:	469e      	mov	lr, r3
 800676e:	4770      	bx	lr
